commit e87b2ff6f6082fddd36e937d1df4e6d422624acd (from 3870154ae34b944928b3c187f4f9532531f5f275)
Merge: 3870154 d25aefb
Author: Adam Hill <adam@diginc.us>
Date:   Sat Oct 27 12:04:33 2018 -0500

    Merge pull request #350 from PeterDaveHelloKitchen/improve-Dockerfile
    
    Refactor Dockerfile for smaller and less layer image

diff --git a/Dockerfile.template b/Dockerfile.template
index ea6c449..50fee2f 100644
--- a/Dockerfile.template
+++ b/Dockerfile.template
@@ -7,11 +7,10 @@ ENV S6OVERLAY_RELEASE https://github.com/just-containers/s6-overlay/releases/dow
 RUN apt-get update && \
     apt-get install -y curl procps && \
     curl -L -s $S6OVERLAY_RELEASE | tar xvzf - -C / && \
+    bash -ex docker-install.sh 2>&1 && \
     rm -rf /var/cache/apt/archives /var/lib/apt/lists/* && \
     mv /init /s6-init
 
-RUN apt-get update && bash -ex docker-install.sh 2>&1
-
 ENTRYPOINT [ "/s6-init" ]
 
 ADD s6/debian-root /
diff --git a/Dockerfile_aarch64 b/Dockerfile_aarch64
index 621e8dc..3f8d2a3 100644
--- a/Dockerfile_aarch64
+++ b/Dockerfile_aarch64
@@ -7,11 +7,10 @@ ENV S6OVERLAY_RELEASE https://github.com/just-containers/s6-overlay/releases/dow
 RUN apt-get update && \
     apt-get install -y curl procps && \
     curl -L -s $S6OVERLAY_RELEASE | tar xvzf - -C / && \
+    bash -ex docker-install.sh 2>&1 && \
     rm -rf /var/cache/apt/archives /var/lib/apt/lists/* && \
     mv /init /s6-init
 
-RUN apt-get update && bash -ex docker-install.sh 2>&1
-
 ENTRYPOINT [ "/s6-init" ]
 
 ADD s6/debian-root /
diff --git a/Dockerfile_amd64 b/Dockerfile_amd64
index 547fe8a..9a86f85 100644
--- a/Dockerfile_amd64
+++ b/Dockerfile_amd64
@@ -7,11 +7,10 @@ ENV S6OVERLAY_RELEASE https://github.com/just-containers/s6-overlay/releases/dow
 RUN apt-get update && \
     apt-get install -y curl procps && \
     curl -L -s $S6OVERLAY_RELEASE | tar xvzf - -C / && \
+    bash -ex docker-install.sh 2>&1 && \
     rm -rf /var/cache/apt/archives /var/lib/apt/lists/* && \
     mv /init /s6-init
 
-RUN apt-get update && bash -ex docker-install.sh 2>&1
-
 ENTRYPOINT [ "/s6-init" ]
 
 ADD s6/debian-root /
diff --git a/Dockerfile_armel b/Dockerfile_armel
index 17eb271..64dca3e 100644
--- a/Dockerfile_armel
+++ b/Dockerfile_armel
@@ -7,11 +7,10 @@ ENV S6OVERLAY_RELEASE https://github.com/just-containers/s6-overlay/releases/dow
 RUN apt-get update && \
     apt-get install -y curl procps && \
     curl -L -s $S6OVERLAY_RELEASE | tar xvzf - -C / && \
+    bash -ex docker-install.sh 2>&1 && \
     rm -rf /var/cache/apt/archives /var/lib/apt/lists/* && \
     mv /init /s6-init
 
-RUN apt-get update && bash -ex docker-install.sh 2>&1
-
 ENTRYPOINT [ "/s6-init" ]
 
 ADD s6/debian-root /
diff --git a/Dockerfile_armhf b/Dockerfile_armhf
index 976e433..a4de52b 100644
--- a/Dockerfile_armhf
+++ b/Dockerfile_armhf
@@ -7,11 +7,10 @@ ENV S6OVERLAY_RELEASE https://github.com/just-containers/s6-overlay/releases/dow
 RUN apt-get update && \
     apt-get install -y curl procps && \
     curl -L -s $S6OVERLAY_RELEASE | tar xvzf - -C / && \
+    bash -ex docker-install.sh 2>&1 && \
     rm -rf /var/cache/apt/archives /var/lib/apt/lists/* && \
     mv /init /s6-init
 
-RUN apt-get update && bash -ex docker-install.sh 2>&1
-
 ENTRYPOINT [ "/s6-init" ]
 
 ADD s6/debian-root /
diff --git a/README.md b/README.md
index 0dbc189..6a81b59 100644
--- a/README.md
+++ b/README.md
@@ -12,18 +12,14 @@
 A [Docker](https://www.docker.com/what-docker) project to make a lightweight x86 and ARM container with [Pi-hole](https://pi-hole.net) functionality.
 
 1) Install docker for your [x86-64 system](https://www.docker.com/community-edition) or [ARMv7 system](https://www.raspberrypi.org/blog/docker-comes-to-raspberry-pi/) using those links.
-2) Use the appropriate tag (x86 can use default tag, ARM users need to use images from [pihole/pihole:v4.0_armhf](https://store.docker.com/community/images/pihole/pihole/tags)) in the below `docker run` command
+2) Use the below `docker run` command, customize if desired.
 3) Enjoy!
 
 [![Build Status](https://api.travis-ci.org/pi-hole/docker-pi-hole.svg?branch=master)](https://travis-ci.org/pi-hole/docker-pi-hole) [![Docker Stars](https://img.shields.io/docker/stars/pihole/pihole.svg?maxAge=604800)](https://store.docker.com/community/images/pihole/pihole) [![Docker Pulls](https://img.shields.io/docker/pulls/pihole/pihole.svg?maxAge=604800)](https://store.docker.com/community/images/pihole/pihole)
 
-[![Join the chat at https://gitter.im/pihole/docker-pi-hole](https://badges.gitter.im/pihole/docker-pi-hole.svg)](https://gitter.im/pihole/docker-pi-hole?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
-
 ## Running Pi-hole Docker
 
-[DockerCloud](https://store.docker.com/community/images/pihole/pihole) automatically builds the latest docker-pi-hole changes into images which can easily be pulled and ran with a simple `docker run` command.  Changes and updates under development or testing can be found in the [dev tags](#development) section.
-
-One crucial thing to know before starting is this container needs port 53 and port 80, two very popular ports that may conflict with existing applications.  If you have no other services or docker containers using port 53/80 (if you do, keep reading below for a reverse proxy example), the minimum arguments required to run this container are in the script [docker_run.sh](https://github.com/pi-hole/docker-pi-hole/blob/master/docker_run.sh) or summarized here:
+This container uses 2 peopular ports, port 53 and port 80, so **may conflict with existing applications ports**.  If you have no other services or docker containers using port 53/80 (if you do, keep reading below for a reverse proxy example), the minimum arguments required to run this container are in the script [docker_run.sh](https://github.com/pi-hole/docker-pi-hole/blob/master/docker_run.sh) or summarized here:
 
 ```bash
 IP_LOOKUP="$(ip route get 8.8.8.8 | awk '{ print $NF; exit }')"  # May not work for VPN / tun0
@@ -52,7 +48,7 @@ echo -n "Your password for https://${IP}/admin/ is "
 docker logs pihole 2> /dev/null | grep 'password'
 ```
 
-**This is just an example and might need changing.**  Volumes are stored in the directory `$DOCKER_CONFIGS` and are recommended for persisting data across docker re-creations for updating images.  As mentioned on line 2, the auto `IP_LOOKUP` variable may not work for VPN tunnel interfaces.
+**This is just an example and might need changing.**  Volumes are stored in the directory `$DOCKER_CONFIGS` and are recommended for persisting data across docker re-creations for updating images.  The IP lookup variables may not work for everyone, please review their values and hard code IP and IPv6 if necessary.
 
 Two recently added ports to the `docker run` and `docker-compose` examples are port 67 and 443.  Port 67 is for users who wish to have Pi-hole run a DHCP server.  Port 443 is to provide a sinkhole for ads that use SSL.  If only port 80 is used, then blocked HTTPS queries will fail to connect to port 443 and may cause long loading times.  Rejecting 443 on your firewall can also serve this same purpose.  Ubuntu firewall example: `sudo ufw reject https`
 
@@ -107,33 +103,28 @@ If you're a fan of [docker-compose](https://docs.docker.com/compose/install/) I
 
 ## Docker tags and versioning
 
-The primary docker tags / versions are explained in the following table.  [Click here to see the full list of x86 tags](https://store.docker.com/community/images/pihole/pihole/tags) ([arm tags are here](https://store.docker.com/community/images/pihole/pihole/tags)), I also try to tag with the specific version of Pi-hole Core for version archival purposes, the web version that comes with the core releases should be in the [GitHub Release notes](https://github.com/pi-hole/docker-pi-hole/releases).
+The primary docker tags / versions are explained in the following table.  [Click here to see the full list of tags](https://store.docker.com/community/images/pihole/pihole/tags) ([arm tags are here](https://store.docker.com/community/images/pihole/pihole/tags)), I also try to tag with the specific version of Pi-hole Core for version archival purposes, the web version that comes with the core releases should be in the [GitHub Release notes](https://github.com/pi-hole/docker-pi-hole/releases).
 
 | tag                 | architecture | description                                                             | Dockerfile |
 | ---                 | ------------ | -----------                                                             | ---------- |
-| `latest` / `v4.0`   | x86          | Debian x86 image, container running lighttpd and dnsmasq                | [Dockerfile](https://github.com/pi-hole/docker-pi-hole/blob/master/Dockerfile_amd64) |
-
+| `latest`            | auto detect  | x86, arm, or arm64 container, docker auto detects your architecture.    | [Dockerfile](https://github.com/pi-hole/docker-pi-hole/blob/master/Dockerfile_amd64) |
+| `v4.0.0-1`          | auto detect  | Versioned tags, if you want to pin against a specific version, use one of thesse |  |
+| `v4.0.0-1_<arch>`   | based on tag | Specific architectures tags | |
+| `development`       | auto detect  | like latest tag, but for the development branch (pushed occasionally)   | |
+    
 ### `pihole/pihole:latest` [![](https://images.microbadger.com/badges/image/pihole/pihole:latest.svg)](https://microbadger.com/images/pihole/pihole "Get your own image badge on microbadger.com") [![](https://images.microbadger.com/badges/version/pihole/pihole:latest.svg)](https://microbadger.com/images/pihole/pihole "Get your own version badge on microbadger.com") [![](https://images.microbadger.com/badges/version/pihole/pihole:latest.svg)](https://microbadger.com/images/pihole/pihole "Get your own version badge on microbadger.com")
 
 This version of the docker aims to be as close to a standard Pi-hole installation by using the recommended base OS and the exact configs and scripts (minimally modified to get them working).  This enables fast updating when an update comes from Pi-hole.
 
-### `pihole/pihole:v4.0_armhf` [![](https://images.microbadger.com/badges/image/pihole/pihole:v4.0_armhf.svg)](https://microbadger.com/images/pihole/pihole "Get your own image badge on microbadger.com")
-Latest version of ARMv7-compatible pihole image
-
-https://hub.docker.com/r/pihole/pihole/tags/
-
-### `pihole/pihole:v4.0_aarch64` [![](https://images.microbadger.com/badges/image/pihole/pihole:v4.0_aarch64.svg)](https://microbadger.com/images/pihole/pihole "Get your own image badge on microbadger.com")
-Latest version of ARM64-compatible pihole image
-
 https://hub.docker.com/r/pihole/pihole/tags/
 
 ## Upgrading, Persistence, and Customizations
 
 The standard Pi-hole customization abilities apply to this docker, but with docker twists such as using docker volume mounts to map host stored file configurations over the container defaults.  Volumes are also important to persist the configuration in case you have removed the Pi-hole container which is a typical docker upgrade pattern.
 
-### Upgrading
+### Upgrading / Reconfiguring
 
-`pihole -up` is disabled.  Upgrade the docker way instead, please.  Long-living docker containers are not the docker way since they aim to be portable and reproducible, why not re-create them often!  Just to prove you can.
+Do not attempt to upgrade (`pihole -up`) or reconfigure (`pihole -r`).  New images will be released for upgrades, upgrading by replacing your old container with a fresh upgraded image is the 'docker way'.  Long-living docker containers are not the docker way since they aim to be portable and reproducible, why not re-create them often!  Just to prove you can.
 
 1. Download the latest version of the image: `docker pull pihole/pihole`
 2. Throw away your container: `docker rm -f pihole`
@@ -141,8 +132,9 @@ The standard Pi-hole customization abilities apply to this docker, but with dock
   * If you care about your data (logs/customizations), make sure you have it volume-mapped or it will be deleted in this step.
 3. Start your container with the newer base image: `docker run <args> pihole/pihole` (`<args>` being your preferred run volumes and env vars)
 
-Why is this style of upgrading good?  A couple reasons: Everyone is starting from the same base image which has been tested to know it works.  No worrying about upgrading from A to B, B to C, or A to C is required when rolling out updates, it reducing complexity, and simply allows a 'fresh start' every time while preserving customizations with volumes.  Basically I'm encouraging [phoenix servers](https://www.google.com/?q=phoenix+servers) principles for your containers.
+Why is this style of upgrading good?  A couple reasons: Everyone is starting from the same base image which has been tested to known it works.  No worrying about upgrading from A to B, B to C, or A to C is required when rolling out updates, it reducing complexity, and simply allows a 'fresh start' every time while preserving customizations with volumes.  Basically I'm encouraging [phoenix server](https://www.google.com/?q=phoenix+servers) principles for your containers.
 
+To reconfigure Pi-hole you'll either need to use an existing container environment variables or if there is no a variable for what you need, use the web UI or CLI commands.
 
 ### Pi-hole features
 
@@ -166,10 +158,6 @@ As long as your docker system service auto starts on boot and you run your conta
 
 NOTE:  After initial run you may need to manually stop the docker container with "docker stop pihole" before the systemctl can start controlling the container.
 
-## Development
-
-Development image tags coming soon
-
 # User Feedback
 
-Please report issues on the [GitHub project](https://github.com/pi-hole/docker-pi-hole) when you suspect something docker related.  Pi-hole questions are best answered on our [user forums](https://github.com/pi-hole/pi-hole/blob/master/README.md#get-help-or-connect-with-us-on-the-web).  Ping me (@diginc) on the forums if it's a docker container and you're not sure if it's docker related.
+Please report issues on the [GitHub project](https://github.com/pi-hole/docker-pi-hole) when you suspect something docker related.  Pi-hole or general docker questions are best answered on our [user forums](https://github.com/pi-hole/pi-hole/blob/master/README.md#get-help-or-connect-with-us-on-the-web).  Ping me (@diginc) on the forums if it's a docker container and you're not sure if it's docker related.

commit e87b2ff6f6082fddd36e937d1df4e6d422624acd (from d25aefbf8dcd7344069621f167b4695d4c896393)
Merge: 3870154 d25aefb
Author: Adam Hill <adam@diginc.us>
Date:   Sat Oct 27 12:04:33 2018 -0500

    Merge pull request #350 from PeterDaveHelloKitchen/improve-Dockerfile
    
    Refactor Dockerfile for smaller and less layer image

diff --git a/bash_functions.sh b/bash_functions.sh
index 43fc397..74561a0 100644
--- a/bash_functions.sh
+++ b/bash_functions.sh
@@ -120,6 +120,14 @@ setup_dnsmasq_interface() {
     [ -n "$interface" ] && change_setting "PIHOLE_INTERFACE" "${interface}"
 }
 
+setup_dnsmasq_listening_behaviour() {
+    local dnsmasq_listening_behaviour="${1}"
+
+    if [ -n "$dnsmasq_listening_behaviour" ]; then
+      change_setting "DNSMASQ_LISTENING" "${dnsmasq_listening_behaviour}"
+    fi;
+}
+
 setup_dnsmasq_config_if_missing() {
     # When fresh empty directory volumes are used we miss this file
     if [ ! -f /etc/dnsmasq.d/01-pihole.conf ] ; then
@@ -131,10 +139,12 @@ setup_dnsmasq() {
     local dns1="$1"
     local dns2="$2"
     local interface="$3"
+    local dnsmasq_listening_behaviour="$4"
     # Coordinates 
     setup_dnsmasq_config_if_missing
     setup_dnsmasq_dns "$dns1" "$dns2" 
     setup_dnsmasq_interface "$interface"
+    setup_dnsmasq_listening_behaviour "$dnsmasq_listening_behaviour"
     ProcessDNSSettings
 }
 
diff --git a/install.sh b/install.sh
index 50fae9a..3f70673 100755
--- a/install.sh
+++ b/install.sh
@@ -42,6 +42,11 @@ distro_check
 # fix permission denied to resolvconf post-inst /etc/resolv.conf moby/moby issue #1297
 apt-get -y install debconf-utils && echo resolvconf resolvconf/linkify-resolvconf boolean false | debconf-set-selections
 
+# fix error AUDIT: Allow login in non-init namespaces
+# Credit to https://github.com/sequenceiq/docker-pam/blob/master/ubuntu-14.04/Dockerfile
+apt-get -y build-dep pam && 
+export CONFIGURE_OPTS=--disable-audit && cd /tmp && apt-get -b source pam && dpkg -i libpam-doc*.deb libpam-modules*.deb libpam-runtime*.deb libpam0g*.deb
+
 # Tried this - unattended causes starting services during a build, should probably PR a flag to shut that off and switch to that 
 #bash -ex "./${PIHOLE_INSTALL}" --unattended
 install_dependent_packages INSTALLER_DEPS[@]
diff --git a/start.sh b/start.sh
index ab5c1be..e34af20 100755
--- a/start.sh
+++ b/start.sh
@@ -11,6 +11,7 @@ export WEBLOGDIR
 export DNS1
 export DNS2
 export INTERFACE
+export DNSMASQ_LISTENING_BEHAVIOUR="$DNSMASQ_LISTENING"
 export IPv6
 export WEB_PORT
 
@@ -32,7 +33,7 @@ change_setting "IPV4_ADDRESS" "$ServerIP"
 change_setting "IPV6_ADDRESS" "$ServerIPv6"
 setup_web_port "$WEB_PORT"
 setup_web_password "$WEBPASSWORD"
-setup_dnsmasq "$DNS1" "$DNS2" "$INTERFACE"
+setup_dnsmasq "$DNS1" "$DNS2" "$INTERFACE" "$DNSMASQ_LISTENING_BEHAVIOUR"
 setup_php_env
 setup_dnsmasq_hostnames "$ServerIP" "$ServerIPv6" "$HOSTNAME"
 setup_ipv4_ipv6
