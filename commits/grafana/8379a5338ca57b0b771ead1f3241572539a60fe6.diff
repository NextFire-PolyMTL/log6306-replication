commit 8379a5338ca57b0b771ead1f3241572539a60fe6
Author: Jack Baldry <jack.baldry@grafana.com>
Date:   Mon Jan 30 09:27:11 2023 +0000

    CI: Lint starlark files with `buildifier` (#59157)
    
    * Add verify-starlark build action that returns an error for starlark files with lint
    
    Relies on `buildifier` tool.
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Add verify_starlark_step to PR pipeline
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Manually fetch buildifier in curl_image until a new build_image is created
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Format with buildifier
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Remove all unused variables retaining one unused function
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Use snake_case for variable
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Replace deprecated dictionary concatenation with .update() method
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Start adding docstrings for all modules and functions
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Prefer os.WriteFile as ioutil.WriteFile has been deprecated since go 1.16
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Attempt to document the behavior of the init_enterprise_step
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Document test_backend pipeline
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Document enterprise_downstream_step
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Document the pipeline utility function
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Document publish_images_step
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Document publish_images_steps
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Document enterprise2_pipelines function
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Add tags table for Starlark files.
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Document test_frontend
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Document windows function
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Add docstrings to verifystarlark functions
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Refactor error handling to be more clear and document complex behavior
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Split errors into execution errors and verification errors
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Document all other library functions
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Add local variables to TAGS
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Add blank line between all Args and Returns sections
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Fix new linting errors
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Lint new Starlark files
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Correct buildifier binary mv
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Document the need to set nofile ulimit to at least 2048
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Update build-container to include buildifier
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Ensure buildifier binary is executable
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Fix valid content test
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Simply return execution error
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Only check files rather than fixing them
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Use updated build-container with executable buildifier
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Test that context cancellation stops execution
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Simplify error handling
    
    Return execution errors that short circuit WalkDir rather than
    separately tracking that error.
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Remove fetching of buildifier binary now that it is in the build-container
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Use build image in verify-starlark step
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Use semver tag
    
    The image is the same but uses a semver tag to make it clearer that
    this is a forward upgrade from the old version.
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    * Use node 18 image with buildifier
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>
    
    ---------
    
    Signed-off-by: Jack Baldry <jack.baldry@grafana.com>

diff --git a/.drone.star b/.drone.star
index f5994191a0c..8c2a3c03767 100644
--- a/.drone.star
+++ b/.drone.star
@@ -3,54 +3,55 @@
 # 2. Login to drone and export the env variables (token and server) shown here: https://drone.grafana.net/account
 # 3. Run `make drone`
 # More information about this process here: https://github.com/grafana/deployment_tools/blob/master/docs/infrastructure/drone/signing.md
+"""
+This module returns a Drone configuration including pipelines and secrets.
+"""
 
-load('scripts/drone/events/pr.star', 'pr_pipelines')
-load('scripts/drone/events/main.star', 'main_pipelines')
-load('scripts/drone/pipelines/docs.star', 'docs_pipelines')
+load("scripts/drone/events/pr.star", "pr_pipelines")
+load("scripts/drone/events/main.star", "main_pipelines")
 load(
-    'scripts/drone/events/release.star',
-    'oss_pipelines',
-    'enterprise_pipelines',
-    'enterprise2_pipelines',
-    'publish_artifacts_pipelines',
-    'publish_npm_pipelines',
-    'publish_packages_pipeline',
-    'artifacts_page_pipeline',
+    "scripts/drone/events/release.star",
+    "artifacts_page_pipeline",
+    "enterprise2_pipelines",
+    "enterprise_pipelines",
+    "oss_pipelines",
+    "publish_artifacts_pipelines",
+    "publish_npm_pipelines",
+    "publish_packages_pipeline",
 )
 load(
-    'scripts/drone/pipelines/publish_images.star',
-    'publish_image_pipelines_public',
-    'publish_image_pipelines_security',
+    "scripts/drone/pipelines/publish_images.star",
+    "publish_image_pipelines_public",
+    "publish_image_pipelines_security",
 )
-load('scripts/drone/pipelines/github.star', 'publish_github_pipeline')
-load('scripts/drone/pipelines/aws_marketplace.star', 'publish_aws_marketplace_pipeline')
-load('scripts/drone/version.star', 'version_branch_pipelines')
-load('scripts/drone/events/cron.star', 'cronjobs')
-load('scripts/drone/vault.star', 'secrets')
+load("scripts/drone/pipelines/github.star", "publish_github_pipeline")
+load("scripts/drone/pipelines/aws_marketplace.star", "publish_aws_marketplace_pipeline")
+load("scripts/drone/version.star", "version_branch_pipelines")
+load("scripts/drone/events/cron.star", "cronjobs")
+load("scripts/drone/vault.star", "secrets")
 
-
-def main(ctx):
+def main(_ctx):
     return (
-        pr_pipelines()
-        + main_pipelines()
-        + oss_pipelines()
-        + enterprise_pipelines()
-        + enterprise2_pipelines()
-        + enterprise2_pipelines(
-            prefix='custom-',
-            trigger={'event': ['custom']},
-        )
-        + publish_image_pipelines_public()
-        + publish_image_pipelines_security()
-        + publish_github_pipeline('public')
-        + publish_github_pipeline('security')
-        + publish_aws_marketplace_pipeline('public')
-        + publish_artifacts_pipelines('security')
-        + publish_artifacts_pipelines('public')
-        + publish_npm_pipelines()
-        + publish_packages_pipeline()
-        + artifacts_page_pipeline()
-        + version_branch_pipelines()
-        + cronjobs()
-        + secrets()
+        pr_pipelines() +
+        main_pipelines() +
+        oss_pipelines() +
+        enterprise_pipelines() +
+        enterprise2_pipelines() +
+        enterprise2_pipelines(
+            prefix = "custom-",
+            trigger = {"event": ["custom"]},
+        ) +
+        publish_image_pipelines_public() +
+        publish_image_pipelines_security() +
+        publish_github_pipeline("public") +
+        publish_github_pipeline("security") +
+        publish_aws_marketplace_pipeline("public") +
+        publish_artifacts_pipelines("security") +
+        publish_artifacts_pipelines("public") +
+        publish_npm_pipelines() +
+        publish_packages_pipeline() +
+        artifacts_page_pipeline() +
+        version_branch_pipelines() +
+        cronjobs() +
+        secrets()
     )
diff --git a/.drone.yml b/.drone.yml
index e787f4007f8..1879dd0a72b 100644
--- a/.drone.yml
+++ b/.drone.yml
@@ -63,6 +63,61 @@ environment:
 image_pull_secrets:
 - dockerconfigjson
 kind: pipeline
+name: pr-verify-starlark
+node:
+  type: no-parallel
+platform:
+  arch: amd64
+  os: linux
+services: []
+steps:
+- commands:
+  - echo $DRONE_RUNNER_NAME
+  image: alpine:3.15.6
+  name: identify-runner
+- commands:
+  - mkdir -p bin
+  - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v3.0.20/grabpl
+  - chmod +x bin/grabpl
+  image: byrnedo/alpine-curl:0.1.8
+  name: grabpl
+- commands:
+  - go build -o ./bin/build -ldflags '-extldflags -static' ./pkg/build/cmd
+  depends_on: []
+  environment:
+    CGO_ENABLED: 0
+  image: golang:1.19.4
+  name: compile-build-cmd
+- commands:
+  - ./bin/build verify-starlark .
+  depends_on:
+  - compile-build-cmd
+  image: grafana/build-container:v1.7.1
+  name: lint-starlark
+trigger:
+  event:
+  - pull_request
+  paths:
+    exclude:
+    - docs/**
+    - '*.md'
+    include:
+    - scripts/drone/**
+    - .drone.star
+type: docker
+volumes:
+- host:
+    path: /var/run/docker.sock
+  name: docker
+---
+clone:
+  retries: 3
+depends_on: []
+environment:
+  EDITION: oss
+image_pull_secrets:
+- dockerconfigjson
+kind: pipeline
 name: pr-test-frontend
 node:
   type: no-parallel
@@ -84,13 +139,13 @@ steps:
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - yarn betterer ci
   depends_on:
   - yarn-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: betterer-frontend
 - commands:
   - yarn run ci:test-frontend
@@ -98,7 +153,7 @@ steps:
   - yarn-install
   environment:
     TEST_MAX_WORKERS: 50%
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-frontend
 trigger:
   event:
@@ -141,7 +196,7 @@ steps:
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - yarn run prettier:check
@@ -152,7 +207,7 @@ steps:
   - yarn-install
   environment:
     TEST_MAX_WORKERS: 50%
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: lint-frontend
 trigger:
   event:
@@ -206,7 +261,7 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -214,25 +269,25 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - go test -short -covermode=atomic -timeout=5m ./pkg/...
   depends_on:
   - wire-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-backend
 - commands:
   - go test -run Integration -covermode=atomic -timeout=5m ./pkg/...
   depends_on:
   - wire-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-backend-integration
 trigger:
   event:
@@ -286,7 +341,7 @@ steps:
 - commands:
   - make gen-go
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - apt-get update && apt-get install make
@@ -359,7 +414,7 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -367,18 +422,18 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - git clone "https://$${GITHUB_TOKEN}@github.com/grafana/grafana-enterprise.git"
@@ -403,7 +458,7 @@ steps:
       from_secret: github_token_pr
     TEST_TAG: v0.0.0-test
   failure: ignore
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: trigger-test-release
   when:
     paths:
@@ -430,7 +485,7 @@ steps:
   depends_on:
   - wire-install
   - compile-build-cmd
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-backend
 - commands:
   - ./bin/build build-frontend --jobs 8 --edition oss --build-id ${DRONE_BUILD_NUMBER}
@@ -439,7 +494,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend
 - commands:
   - ./bin/build build-frontend-packages --jobs 8 --edition oss --build-id ${DRONE_BUILD_NUMBER}
@@ -448,7 +503,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend-packages
 - commands:
   - ./bin/build  build-plugins --jobs 8 --edition oss
@@ -456,7 +511,7 @@ steps:
   - compile-build-cmd
   - yarn-install
   environment: null
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-plugins
 - commands:
   - . scripts/build/gpg-test-vars.sh && ./bin/build package --jobs 8 --edition oss
@@ -467,7 +522,7 @@ steps:
   - build-frontend
   - build-frontend-packages
   environment: null
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: package
 - commands:
   - ./scripts/grafana-server/start-server
@@ -480,7 +535,7 @@ steps:
   environment:
     ARCH: linux-amd64
     PORT: 3001
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: grafana-server
 - commands:
   - apt-get install -y netcat
@@ -583,7 +638,7 @@ steps:
   - build-frontend-packages
   environment:
     NODE_OPTIONS: --max_old_space_size=4096
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-storybook
   when:
     paths:
@@ -594,7 +649,7 @@ steps:
   - cp dist/*.tar.gz* packaging/docker/
   depends_on:
   - package
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: copy-packages-for-docker
 - commands:
   - yarn wait-on http://$HOST:$PORT
@@ -696,7 +751,7 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -704,13 +759,13 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - apt-get update
@@ -726,7 +781,7 @@ steps:
     GRAFANA_TEST_DB: postgres
     PGPASSWORD: grafanatest
     POSTGRES_HOST: postgres
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: postgres-integration-tests
 - commands:
   - apt-get update
@@ -742,7 +797,7 @@ steps:
   environment:
     GRAFANA_TEST_DB: mysql
     MYSQL_HOST: mysql
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: mysql-integration-tests
 trigger:
   event:
@@ -800,7 +855,7 @@ steps:
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - |-
@@ -812,7 +867,7 @@ steps:
     wan" > words_to_ignore.txt
   - codespell -I words_to_ignore.txt docs/
   - rm words_to_ignore.txt
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: codespell
 - commands:
   - yarn run prettier:checkDocs
@@ -820,7 +875,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: lint-docs
 - commands:
   - mkdir -p /hugo/content/docs/grafana
@@ -870,7 +925,7 @@ steps:
   - ./bin/build shellcheck
   depends_on:
   - compile-build-cmd
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: shellcheck
 trigger:
   event:
@@ -917,7 +972,7 @@ steps:
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - |-
@@ -929,7 +984,7 @@ steps:
     wan" > words_to_ignore.txt
   - codespell -I words_to_ignore.txt docs/
   - rm words_to_ignore.txt
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: codespell
 - commands:
   - yarn run prettier:checkDocs
@@ -937,7 +992,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: lint-docs
 - commands:
   - mkdir -p /hugo/content/docs/grafana
@@ -990,13 +1045,13 @@ steps:
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - yarn betterer ci
   depends_on:
   - yarn-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: betterer-frontend
 - commands:
   - yarn run ci:test-frontend
@@ -1004,7 +1059,7 @@ steps:
   - yarn-install
   environment:
     TEST_MAX_WORKERS: 50%
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-frontend
 trigger:
   branch: main
@@ -1044,7 +1099,7 @@ steps:
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - yarn run prettier:check
@@ -1055,7 +1110,7 @@ steps:
   - yarn-install
   environment:
     TEST_MAX_WORKERS: 50%
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: lint-frontend
 trigger:
   branch: main
@@ -1106,7 +1161,7 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -1114,25 +1169,25 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - go test -short -covermode=atomic -timeout=5m ./pkg/...
   depends_on:
   - wire-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-backend
 - commands:
   - go test -run Integration -covermode=atomic -timeout=5m ./pkg/...
   depends_on:
   - wire-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-backend-integration
 trigger:
   branch: main
@@ -1179,7 +1234,7 @@ steps:
 - commands:
   - make gen-go
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - apt-get update && apt-get install make
@@ -1251,7 +1306,7 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -1259,25 +1314,25 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - ./bin/build build-backend --jobs 8 --edition oss --build-id ${DRONE_BUILD_NUMBER}
   depends_on:
   - wire-install
   - compile-build-cmd
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-backend
 - commands:
   - ./bin/build build-frontend --jobs 8 --edition oss --build-id ${DRONE_BUILD_NUMBER}
@@ -1286,7 +1341,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend
 - commands:
   - ./bin/build build-frontend-packages --jobs 8 --edition oss --build-id ${DRONE_BUILD_NUMBER}
@@ -1295,7 +1350,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend-packages
 - commands:
   - ./bin/build  build-plugins --jobs 8 --edition oss
@@ -1305,7 +1360,7 @@ steps:
   environment:
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-plugins
 - commands:
   - ./bin/build package --jobs 8 --edition oss --build-id ${DRONE_BUILD_NUMBER} --sign
@@ -1323,7 +1378,7 @@ steps:
       from_secret: packages_gpg_public_key
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: package
 - commands:
   - ./scripts/grafana-server/start-server
@@ -1336,7 +1391,7 @@ steps:
   environment:
     ARCH: linux-amd64
     PORT: 3001
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: grafana-server
 - commands:
   - apt-get install -y netcat
@@ -1439,7 +1494,7 @@ steps:
   - build-frontend-packages
   environment:
     NODE_OPTIONS: --max_old_space_size=4096
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-storybook
   when:
     paths:
@@ -1450,7 +1505,7 @@ steps:
   - cp dist/*.tar.gz* packaging/docker/
   depends_on:
   - package
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: copy-packages-for-docker
 - commands:
   - yarn wait-on http://$HOST:$PORT
@@ -1494,7 +1549,7 @@ steps:
     GRAFANA_MISC_STATS_API_KEY:
       from_secret: grafana_misc_stats_api_key
   failure: ignore
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: publish-frontend-metrics
   when:
     repo:
@@ -1575,7 +1630,7 @@ steps:
   environment:
     NPM_TOKEN:
       from_secret: npm_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: release-canary-npm-packages
   when:
     repo:
@@ -1686,7 +1741,7 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -1694,13 +1749,13 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - apt-get update
@@ -1716,7 +1771,7 @@ steps:
     GRAFANA_TEST_DB: postgres
     PGPASSWORD: grafanatest
     POSTGRES_HOST: postgres
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: postgres-integration-tests
 - commands:
   - apt-get update
@@ -1732,7 +1787,7 @@ steps:
   environment:
     GRAFANA_TEST_DB: mysql
     MYSQL_HOST: mysql
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: mysql-integration-tests
 trigger:
   branch: main
@@ -1970,18 +2025,18 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - go build -o ./bin/build -ldflags '-extldflags -static' ./pkg/build/cmd
@@ -1995,7 +2050,7 @@ steps:
   depends_on:
   - wire-install
   - compile-build-cmd
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-backend
 - commands:
   - ./bin/build build-frontend --jobs 8 --edition oss ${DRONE_TAG}
@@ -2004,7 +2059,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend
 - commands:
   - ./bin/build build-frontend-packages --jobs 8 --edition oss ${DRONE_TAG}
@@ -2013,7 +2068,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend-packages
 - commands:
   - ./bin/build  build-plugins --jobs 8 --edition oss
@@ -2023,7 +2078,7 @@ steps:
   environment:
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-plugins
 - commands:
   - ./bin/build package --jobs 8 --edition oss  --sign ${DRONE_TAG}
@@ -2041,14 +2096,14 @@ steps:
       from_secret: packages_gpg_public_key
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: package
 - commands:
   - ls dist/*.tar.gz*
   - cp dist/*.tar.gz* packaging/docker/
   depends_on:
   - package
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: copy-packages-for-docker
 - commands:
   - ./bin/build build-docker --edition oss --shouldSave
@@ -2087,7 +2142,7 @@ steps:
   environment:
     ARCH: linux-amd64
     PORT: 3001
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: grafana-server
 - commands:
   - apt-get install -y netcat
@@ -2164,7 +2219,7 @@ steps:
   - build-frontend-packages
   environment:
     NODE_OPTIONS: --max_old_space_size=4096
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-storybook
   when:
     event:
@@ -2223,7 +2278,7 @@ steps:
       from_secret: gcp_key
     PRERELEASE_BUCKET:
       from_secret: prerelease_bucket
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: store-npm-packages
 trigger:
   event:
@@ -2272,13 +2327,13 @@ steps:
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - yarn betterer ci
   depends_on:
   - yarn-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: betterer-frontend
 - commands:
   - yarn run ci:test-frontend
@@ -2286,7 +2341,7 @@ steps:
   - yarn-install
   environment:
     TEST_MAX_WORKERS: 50%
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-frontend
 trigger:
   event:
@@ -2334,7 +2389,7 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -2342,25 +2397,25 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - go test -short -covermode=atomic -timeout=5m ./pkg/...
   depends_on:
   - wire-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-backend
 - commands:
   - go test -run Integration -covermode=atomic -timeout=5m ./pkg/...
   depends_on:
   - wire-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-backend-integration
 trigger:
   event:
@@ -2427,7 +2482,7 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -2435,13 +2490,13 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - apt-get update
@@ -2457,7 +2512,7 @@ steps:
     GRAFANA_TEST_DB: postgres
     PGPASSWORD: grafanatest
     POSTGRES_HOST: postgres
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: postgres-integration-tests
 - commands:
   - apt-get update
@@ -2473,7 +2528,7 @@ steps:
   environment:
     GRAFANA_TEST_DB: mysql
     MYSQL_HOST: mysql
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: mysql-integration-tests
 trigger:
   event:
@@ -2590,7 +2645,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: clone-enterprise
 - commands:
   - mv bin/grabpl /tmp/
@@ -2606,7 +2661,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: init-enterprise
 - commands:
   - go build -o ./bin/build -ldflags '-extldflags -static' ./pkg/build/cmd
@@ -2620,13 +2675,13 @@ steps:
   - make gen-go
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - yarn install --immutable
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - '# It is required that code generated from Thema/CUE be committed and in sync
@@ -2636,7 +2691,7 @@ steps:
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -2645,14 +2700,14 @@ steps:
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - ./bin/build build-backend --jobs 8 --edition enterprise ${DRONE_TAG}
   depends_on:
   - wire-install
   - compile-build-cmd
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-backend
 - commands:
   - ./bin/build build-frontend --jobs 8 --edition enterprise ${DRONE_TAG}
@@ -2661,7 +2716,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend
 - commands:
   - ./bin/build build-frontend-packages --jobs 8 --edition enterprise ${DRONE_TAG}
@@ -2670,7 +2725,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend-packages
 - commands:
   - ./bin/build  build-plugins --jobs 8 --edition enterprise
@@ -2680,7 +2735,7 @@ steps:
   environment:
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-plugins
 - commands:
   - ./bin/build package --jobs 8 --edition enterprise  --sign ${DRONE_TAG}
@@ -2698,14 +2753,14 @@ steps:
       from_secret: packages_gpg_public_key
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: package
 - commands:
   - ls dist/*.tar.gz*
   - cp dist/*.tar.gz* packaging/docker/
   depends_on:
   - package
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: copy-packages-for-docker
 - commands:
   - ./bin/build build-docker --edition enterprise --shouldSave
@@ -2745,7 +2800,7 @@ steps:
     ARCH: linux-amd64
     PORT: 3001
     RUNDIR: scripts/grafana-server/tmp-grafana-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: grafana-server
 - commands:
   - apt-get install -y netcat
@@ -2877,7 +2932,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: clone-enterprise
 - commands:
   - mv bin/grabpl /tmp/
@@ -2893,7 +2948,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: init-enterprise
 - commands:
   - echo $DRONE_RUNNER_NAME
@@ -2909,14 +2964,14 @@ steps:
   - yarn install --immutable
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - yarn betterer ci
   depends_on:
   - init-enterprise
   - yarn-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: betterer-frontend
 - commands:
   - yarn run ci:test-frontend
@@ -2925,7 +2980,7 @@ steps:
   - yarn-install
   environment:
     TEST_MAX_WORKERS: 50%
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-frontend
 trigger:
   event:
@@ -2962,7 +3017,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: clone-enterprise
 - commands:
   - mkdir -p bin
@@ -2984,7 +3039,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: init-enterprise
 - commands:
   - echo $DRONE_RUNNER_NAME
@@ -3006,7 +3061,7 @@ steps:
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -3015,25 +3070,25 @@ steps:
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - go test -short -covermode=atomic -timeout=5m ./pkg/...
   depends_on:
   - wire-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-backend
 - commands:
   - go test -run Integration -covermode=atomic -timeout=5m ./pkg/...
   depends_on:
   - wire-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-backend-integration
 trigger:
   event:
@@ -3106,7 +3161,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: clone-enterprise
 - commands:
   - mv bin/grabpl /tmp/
@@ -3122,7 +3177,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: init-enterprise
 - commands:
   - '# It is required that code generated from Thema/CUE be committed and in sync
@@ -3132,7 +3187,7 @@ steps:
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -3141,13 +3196,13 @@ steps:
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - apt-get update
@@ -3163,7 +3218,7 @@ steps:
     GRAFANA_TEST_DB: postgres
     PGPASSWORD: grafanatest
     POSTGRES_HOST: postgres
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: postgres-integration-tests
 - commands:
   - apt-get update
@@ -3179,18 +3234,16 @@ steps:
   environment:
     GRAFANA_TEST_DB: mysql
     MYSQL_HOST: mysql
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: mysql-integration-tests
 - commands:
   - dockerize -wait tcp://redis:6379/0 -timeout 120s
-  - go clean -testcache
-  - go list './pkg/...' | xargs -I {} sh -c 'go test -run Integration -covermode=atomic
-    -timeout=5m {}'
+  - ./bin/grabpl integration-tests
   depends_on:
   - wire-install
   environment:
     REDIS_URL: redis://redis:6379/0
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: redis-integration-tests
 - commands:
   - dockerize -wait tcp://memcached:11211 -timeout 120s
@@ -3201,7 +3254,7 @@ steps:
   - wire-install
   environment:
     MEMCACHED_HOSTS: memcached:11211
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: memcached-integration-tests
 trigger:
   event:
@@ -3338,7 +3391,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: clone-enterprise
 - commands:
   - mv bin/grabpl /tmp/
@@ -3354,7 +3407,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: init-enterprise
 - commands:
   - go build -o ./bin/build -ldflags '-extldflags -static' ./pkg/build/cmd
@@ -3368,13 +3421,13 @@ steps:
   - make gen-go
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - yarn install --immutable
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - '# It is required that code generated from Thema/CUE be committed and in sync
@@ -3384,7 +3437,7 @@ steps:
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - ./bin/build build-frontend --jobs 8 --edition enterprise ${DRONE_TAG}
@@ -3393,7 +3446,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend
 - commands:
   - ./bin/build build-frontend-packages --jobs 8 --edition enterprise ${DRONE_TAG}
@@ -3402,7 +3455,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend-packages
 - commands:
   - ./bin/build  build-plugins --jobs 8 --edition enterprise
@@ -3412,14 +3465,14 @@ steps:
   environment:
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-plugins
 - commands:
   - ./bin/build build-backend --jobs 8 --edition enterprise2 ${DRONE_TAG}
   depends_on:
   - wire-install
   - compile-build-cmd
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-backend-enterprise2
 - commands:
   - ./bin/build package --jobs 8 --edition enterprise2  --sign ${DRONE_TAG}
@@ -3437,7 +3490,7 @@ steps:
       from_secret: packages_gpg_public_key
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: package-enterprise2
 - commands:
   - ./bin/build upload-cdn --edition enterprise2
@@ -3457,7 +3510,7 @@ steps:
   - cp dist/*.tar.gz* packaging/docker/
   depends_on:
   - package-enterprise2
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: copy-packages-for-docker
 - commands:
   - ./bin/build build-docker --edition enterprise2 --shouldSave
@@ -3588,7 +3641,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: clone-enterprise
 - commands:
   - mv bin/grabpl /tmp/
@@ -3604,7 +3657,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: init-enterprise
 - commands:
   - go build -o ./bin/build -ldflags '-extldflags -static' ./pkg/build/cmd
@@ -3618,13 +3671,13 @@ steps:
   - make gen-go
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - yarn install --immutable
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - '# It is required that code generated from Thema/CUE be committed and in sync
@@ -3634,7 +3687,7 @@ steps:
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - ./bin/build build-frontend --jobs 8 --edition enterprise ${DRONE_TAG}
@@ -3643,7 +3696,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend
 - commands:
   - ./bin/build build-frontend-packages --jobs 8 --edition enterprise ${DRONE_TAG}
@@ -3652,7 +3705,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend-packages
 - commands:
   - ./bin/build  build-plugins --jobs 8 --edition enterprise
@@ -3662,14 +3715,14 @@ steps:
   environment:
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-plugins
 - commands:
   - ./bin/build build-backend --jobs 8 --edition enterprise2 ${DRONE_TAG}
   depends_on:
   - wire-install
   - compile-build-cmd
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-backend-enterprise2
 - commands:
   - ./bin/build package --jobs 8 --edition enterprise2  --sign ${DRONE_TAG}
@@ -3687,7 +3740,7 @@ steps:
       from_secret: packages_gpg_public_key
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: package-enterprise2
 - commands:
   - ./bin/build upload-cdn --edition enterprise2
@@ -3707,7 +3760,7 @@ steps:
   - cp dist/*.tar.gz* packaging/docker/
   depends_on:
   - package-enterprise2
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: copy-packages-for-docker
 - commands:
   - ./bin/build build-docker --edition enterprise2 --shouldSave
@@ -4366,7 +4419,7 @@ steps:
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - ./bin/build artifacts npm retrieve --tag ${DRONE_TAG}
@@ -4390,7 +4443,7 @@ steps:
     NPM_TOKEN:
       from_secret: npm_token
   failure: ignore
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: release-npm-packages
 trigger:
   event:
@@ -4626,7 +4679,7 @@ steps:
   environment:
     GCP_KEY:
       from_secret: gcp_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: artifacts-page
 trigger:
   event:
@@ -4671,18 +4724,18 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - go build -o ./bin/build -ldflags '-extldflags -static' ./pkg/build/cmd
@@ -4696,7 +4749,7 @@ steps:
   depends_on:
   - wire-install
   - compile-build-cmd
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-backend
 - commands:
   - ./bin/build build-frontend --jobs 8 --edition oss --build-id ${DRONE_BUILD_NUMBER}
@@ -4705,7 +4758,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend
 - commands:
   - ./bin/build build-frontend-packages --jobs 8 --edition oss --build-id ${DRONE_BUILD_NUMBER}
@@ -4714,7 +4767,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend-packages
 - commands:
   - ./bin/build  build-plugins --jobs 8 --edition oss
@@ -4724,7 +4777,7 @@ steps:
   environment:
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-plugins
 - commands:
   - ./bin/build package --jobs 8 --edition oss --build-id ${DRONE_BUILD_NUMBER} --sign
@@ -4742,14 +4795,14 @@ steps:
       from_secret: packages_gpg_public_key
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: package
 - commands:
   - ls dist/*.tar.gz*
   - cp dist/*.tar.gz* packaging/docker/
   depends_on:
   - package
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: copy-packages-for-docker
 - commands:
   - ./bin/build build-docker --edition oss --shouldSave
@@ -4788,7 +4841,7 @@ steps:
   environment:
     ARCH: linux-amd64
     PORT: 3001
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: grafana-server
 - commands:
   - apt-get install -y netcat
@@ -4865,7 +4918,7 @@ steps:
   - build-frontend-packages
   environment:
     NODE_OPTIONS: --max_old_space_size=4096
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-storybook
   when:
     paths:
@@ -4946,13 +4999,13 @@ steps:
 - commands:
   - yarn install --immutable
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - yarn betterer ci
   depends_on:
   - yarn-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: betterer-frontend
 - commands:
   - yarn run ci:test-frontend
@@ -4960,7 +5013,7 @@ steps:
   - yarn-install
   environment:
     TEST_MAX_WORKERS: 50%
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-frontend
 trigger:
   ref:
@@ -5005,7 +5058,7 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -5013,25 +5066,25 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - go test -short -covermode=atomic -timeout=5m ./pkg/...
   depends_on:
   - wire-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-backend
 - commands:
   - go test -run Integration -covermode=atomic -timeout=5m ./pkg/...
   depends_on:
   - wire-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-backend-integration
 trigger:
   ref:
@@ -5095,7 +5148,7 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -5103,13 +5156,13 @@ steps:
     in output.'
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on: []
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - apt-get update
@@ -5125,7 +5178,7 @@ steps:
     GRAFANA_TEST_DB: postgres
     PGPASSWORD: grafanatest
     POSTGRES_HOST: postgres
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: postgres-integration-tests
 - commands:
   - apt-get update
@@ -5141,7 +5194,7 @@ steps:
   environment:
     GRAFANA_TEST_DB: mysql
     MYSQL_HOST: mysql
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: mysql-integration-tests
 trigger:
   ref:
@@ -5248,7 +5301,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: clone-enterprise
 - commands:
   - mv bin/grabpl /tmp/
@@ -5263,7 +5316,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: init-enterprise
 - commands:
   - go build -o ./bin/build -ldflags '-extldflags -static' ./pkg/build/cmd
@@ -5277,13 +5330,13 @@ steps:
   - make gen-go
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - yarn install --immutable
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - '# It is required that code generated from Thema/CUE be committed and in sync
@@ -5293,7 +5346,7 @@ steps:
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -5302,14 +5355,14 @@ steps:
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - ./bin/build build-backend --jobs 8 --edition enterprise --build-id ${DRONE_BUILD_NUMBER}
   depends_on:
   - wire-install
   - compile-build-cmd
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-backend
 - commands:
   - ./bin/build build-frontend --jobs 8 --edition enterprise --build-id ${DRONE_BUILD_NUMBER}
@@ -5318,7 +5371,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend
 - commands:
   - ./bin/build build-frontend-packages --jobs 8 --edition enterprise --build-id ${DRONE_BUILD_NUMBER}
@@ -5327,7 +5380,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend-packages
 - commands:
   - ./bin/build  build-plugins --jobs 8 --edition enterprise
@@ -5337,7 +5390,7 @@ steps:
   environment:
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-plugins
 - commands:
   - ./bin/build package --jobs 8 --edition enterprise --build-id ${DRONE_BUILD_NUMBER}
@@ -5356,14 +5409,14 @@ steps:
       from_secret: packages_gpg_public_key
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: package
 - commands:
   - ls dist/*.tar.gz*
   - cp dist/*.tar.gz* packaging/docker/
   depends_on:
   - package
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: copy-packages-for-docker
 - commands:
   - ./bin/build build-docker --edition enterprise --shouldSave
@@ -5403,7 +5456,7 @@ steps:
     ARCH: linux-amd64
     PORT: 3001
     RUNDIR: scripts/grafana-server/tmp-grafana-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: grafana-server
 - commands:
   - apt-get install -y netcat
@@ -5538,7 +5591,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: clone-enterprise
 - commands:
   - mv bin/grabpl /tmp/
@@ -5553,7 +5606,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: init-enterprise
 - commands:
   - echo $DRONE_RUNNER_NAME
@@ -5569,14 +5622,14 @@ steps:
   - yarn install --immutable
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - yarn betterer ci
   depends_on:
   - init-enterprise
   - yarn-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: betterer-frontend
 - commands:
   - yarn run ci:test-frontend
@@ -5585,7 +5638,7 @@ steps:
   - yarn-install
   environment:
     TEST_MAX_WORKERS: 50%
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-frontend
 trigger:
   ref:
@@ -5619,7 +5672,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: clone-enterprise
 - commands:
   - mkdir -p bin
@@ -5640,7 +5693,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: init-enterprise
 - commands:
   - echo $DRONE_RUNNER_NAME
@@ -5662,7 +5715,7 @@ steps:
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -5671,25 +5724,25 @@ steps:
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - go test -short -covermode=atomic -timeout=5m ./pkg/...
   depends_on:
   - wire-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-backend
 - commands:
   - go test -run Integration -covermode=atomic -timeout=5m ./pkg/...
   depends_on:
   - wire-install
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: test-backend-integration
 trigger:
   ref:
@@ -5759,7 +5812,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: clone-enterprise
 - commands:
   - mv bin/grabpl /tmp/
@@ -5774,7 +5827,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: init-enterprise
 - commands:
   - '# It is required that code generated from Thema/CUE be committed and in sync
@@ -5784,7 +5837,7 @@ steps:
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - '# It is required that generated jsonnet is committed and in sync with its inputs.'
@@ -5793,13 +5846,13 @@ steps:
   - CODEGEN_VERIFY=1 make gen-jsonnet
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-jsonnet
 - commands:
   - make gen-go
   depends_on:
   - verify-gen-cue
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - apt-get update
@@ -5815,7 +5868,7 @@ steps:
     GRAFANA_TEST_DB: postgres
     PGPASSWORD: grafanatest
     POSTGRES_HOST: postgres
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: postgres-integration-tests
 - commands:
   - apt-get update
@@ -5831,18 +5884,16 @@ steps:
   environment:
     GRAFANA_TEST_DB: mysql
     MYSQL_HOST: mysql
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: mysql-integration-tests
 - commands:
   - dockerize -wait tcp://redis:6379/0 -timeout 120s
-  - go clean -testcache
-  - go list './pkg/...' | xargs -I {} sh -c 'go test -run Integration -covermode=atomic
-    -timeout=5m {}'
+  - ./bin/grabpl integration-tests
   depends_on:
   - wire-install
   environment:
     REDIS_URL: redis://redis:6379/0
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: redis-integration-tests
 - commands:
   - dockerize -wait tcp://memcached:11211 -timeout 120s
@@ -5853,7 +5904,7 @@ steps:
   - wire-install
   environment:
     MEMCACHED_HOSTS: memcached:11211
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: memcached-integration-tests
 trigger:
   ref:
@@ -5980,7 +6031,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: clone-enterprise
 - commands:
   - mv bin/grabpl /tmp/
@@ -5995,7 +6046,7 @@ steps:
   environment:
     GITHUB_TOKEN:
       from_secret: github_token
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: init-enterprise
 - commands:
   - go build -o ./bin/build -ldflags '-extldflags -static' ./pkg/build/cmd
@@ -6009,13 +6060,13 @@ steps:
   - make gen-go
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: wire-install
 - commands:
   - yarn install --immutable
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: yarn-install
 - commands:
   - '# It is required that code generated from Thema/CUE be committed and in sync
@@ -6025,7 +6076,7 @@ steps:
   - CODEGEN_VERIFY=1 make gen-cue
   depends_on:
   - init-enterprise
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: verify-gen-cue
 - commands:
   - ./bin/build build-frontend --jobs 8 --edition enterprise --build-id ${DRONE_BUILD_NUMBER}
@@ -6034,7 +6085,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend
 - commands:
   - ./bin/build build-frontend-packages --jobs 8 --edition enterprise --build-id ${DRONE_BUILD_NUMBER}
@@ -6043,7 +6094,7 @@ steps:
   - yarn-install
   environment:
     NODE_OPTIONS: --max_old_space_size=8192
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-frontend-packages
 - commands:
   - ./bin/build  build-plugins --jobs 8 --edition enterprise
@@ -6053,7 +6104,7 @@ steps:
   environment:
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-plugins
 - commands:
   - ./bin/build build-backend --jobs 8 --edition enterprise2 --build-id ${DRONE_BUILD_NUMBER}
@@ -6061,7 +6112,7 @@ steps:
   depends_on:
   - wire-install
   - compile-build-cmd
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: build-backend-enterprise2
 - commands:
   - ./bin/build package --jobs 8 --edition enterprise2 --build-id ${DRONE_BUILD_NUMBER}
@@ -6080,7 +6131,7 @@ steps:
       from_secret: packages_gpg_public_key
     GRAFANA_API_KEY:
       from_secret: grafana_api_key
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: package-enterprise2
 - commands:
   - ./bin/build upload-cdn --edition enterprise2
@@ -6100,7 +6151,7 @@ steps:
   - cp dist/*.tar.gz* packaging/docker/
   depends_on:
   - package-enterprise2
-  image: grafana/build-container:1.6.7
+  image: grafana/build-container:v1.7.1
   name: copy-packages-for-docker
 - commands:
   - ./bin/build build-docker --edition enterprise2 --shouldSave
@@ -6451,6 +6502,6 @@ kind: secret
 name: aws_secret_access_key
 ---
 kind: signature
-hmac: 86222a86386ae1d2afce23b4a15f09e97aaeb873275ed34ac73d733335d63e4b
+hmac: 6e76bf175f2c58fd4ffdc42e2120c558345a71a45011279b14092acb67252b28
 
 ...
diff --git a/Makefile b/Makefile
index 78cb6f15963..49acbcf06fa 100644
--- a/Makefile
+++ b/Makefile
@@ -239,8 +239,12 @@ drone: $(DRONE)
 	$(DRONE) lint .drone.yml --trusted
 	$(DRONE) --server https://drone.grafana.net sign --save grafana/grafana
 
+# Generate an Emacs tags table (https://www.gnu.org/software/emacs/manual/html_node/emacs/Tags-Tables.html) for Starlark files.
+scripts/drone/TAGS: $(shell find scripts/drone -name '*.star')
+	etags --lang none --regex="/def \(\w+\)[^:]+:/\1/" --regex="/\s*\(\w+\) =/\1/" $^ -o $@
+
 format-drone:
-	black --include '\.star$$' -S scripts/drone/ .drone.star
+	buildifier -r scripts/drone
 
 help: ## Display this help.
 	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)
diff --git a/pkg/build/cmd/main.go b/pkg/build/cmd/main.go
index 69a326f5335..6725fb7e050 100644
--- a/pkg/build/cmd/main.go
+++ b/pkg/build/cmd/main.go
@@ -132,6 +132,12 @@ func main() {
 			Usage:  "Verify Drone configuration",
 			Action: VerifyDrone,
 		},
+		{
+			Name:      "verify-starlark",
+			Usage:     "Verify Starlark configuration",
+			ArgsUsage: "<workspace path>",
+			Action:    VerifyStarlark,
+		},
 		{
 			Name:   "export-version",
 			Usage:  "Exports version in dist/grafana.version",
diff --git a/pkg/build/cmd/verifystarlark.go b/pkg/build/cmd/verifystarlark.go
new file mode 100644
index 00000000000..ff33a77a3af
--- /dev/null
+++ b/pkg/build/cmd/verifystarlark.go
@@ -0,0 +1,142 @@
+package main
+
+import (
+	"context"
+	"errors"
+	"fmt"
+	"io/fs"
+	"os/exec"
+	"path/filepath"
+	"strings"
+
+	"github.com/urfave/cli/v2"
+)
+
+func mapSlice[I any, O any](a []I, f func(I) O) []O {
+	o := make([]O, len(a))
+	for i, e := range a {
+		o[i] = f(e)
+	}
+	return o
+}
+
+// VerifyStarlark is the CLI Action for verifying Starlark files in a workspace.
+// It expects a single context argument which is the path to the workspace.
+// The actual verification procedure can return multiple errors which are
+// joined together to be one holistic error for the action.
+func VerifyStarlark(c *cli.Context) error {
+	if c.NArg() != 1 {
+		var message string
+		if c.NArg() == 0 {
+			message = "ERROR: missing required argument <workspace path>"
+		}
+		if c.NArg() > 1 {
+			message = "ERROR: too many arguments"
+		}
+
+		if err := cli.ShowSubcommandHelp(c); err != nil {
+			return err
+		}
+
+		return cli.Exit(message, 1)
+	}
+
+	workspace := c.Args().Get(0)
+	verificationErrs, executionErr := verifyStarlark(c.Context, workspace, buildifierLintCommand)
+	if executionErr != nil {
+		return executionErr
+	}
+
+	if len(verificationErrs) == 0 {
+		return nil
+	}
+
+	noun := "file"
+	if len(verificationErrs) > 1 {
+		noun += "s"
+	}
+
+	return fmt.Errorf("verification failed for %d %s:\n%s",
+		len(verificationErrs),
+		noun,
+		strings.Join(
+			mapSlice(verificationErrs, func(e error) string { return e.Error() }),
+			"\n",
+		))
+}
+
+type commandFunc = func(path string) (command string, args []string)
+
+func buildifierLintCommand(path string) (string, []string) {
+	return "buildifier", []string{"-lint", "warn", "-mode", "check", path}
+}
+
+// verifyStarlark walks all directories starting at provided workspace path and
+// verifies any Starlark files it finds.
+// Starlark files are assumed to end with the .star extension.
+// The verification relies on linting frovided by the 'buildifier' binary which
+// must be in the PATH.
+// A slice of verification errors are returned, one for each file that failed verification.
+// If any execution of the `buildifier` command fails, this is returned separately.
+// commandFn is executed on every Starlark file to determine the command and arguments to be executed.
+// The caller is trusted and it is the callers responsibility to ensure that the resulting command is safe to execute.
+func verifyStarlark(ctx context.Context, workspace string, commandFn commandFunc) ([]error, error) {
+	var verificationErrs []error
+
+	// All errors from filepath.WalkDir are filtered by the fs.WalkDirFunc.
+	// Lstat or ReadDir errors are reported as verificationErrors.
+	// If any execution of the `buildifier` command fails or if the context is cancelled,
+	// it is reported as an error and any verification of subsequent files is skipped.
+	err := filepath.WalkDir(workspace, func(path string, d fs.DirEntry, err error) error {
+		// Skip verification of the file or files within the directory if there is an error
+		// returned by Lstat or ReadDir.
+		if err != nil {
+			verificationErrs = append(verificationErrs, err)
+			return nil
+		}
+
+		if d.IsDir() {
+			return nil
+		}
+
+		if filepath.Ext(path) == ".star" {
+			command, args := commandFn(path)
+			// The caller is trusted.
+			//nolint:gosec
+			cmd := exec.CommandContext(ctx, command, args...)
+			cmd.Dir = workspace
+
+			_, err = cmd.Output()
+			if err == nil { // No error, early return.
+				return nil
+			}
+
+			// The error returned from cmd.Output() is never wrapped.
+			//nolint:errorlint
+			if err, ok := err.(*exec.ExitError); ok {
+				switch err.ExitCode() {
+				// Case comments are informed by the output of `buildifier --help`
+				case 1: // syntax errors in input
+					verificationErrs = append(verificationErrs, errors.New(string(err.Stderr)))
+					return nil
+				case 2: // usage errors: invoked incorrectly
+					return fmt.Errorf("command %q: %s", cmd, err.Stderr)
+				case 3: // unexpected runtime errors: file I/O problems or internal bugs
+					return fmt.Errorf("command %q: %s", cmd, err.Stderr)
+				case 4: // check mode failed (reformat is needed)
+					verificationErrs = append(verificationErrs, errors.New(string(err.Stderr)))
+					return nil
+				default:
+					return fmt.Errorf("command %q: %s", cmd, err.Stderr)
+				}
+			}
+
+			// Error was not an exit error from the command.
+			return fmt.Errorf("command %q: %v", cmd, err)
+		}
+
+		return nil
+	})
+
+	return verificationErrs, err
+}
diff --git a/pkg/build/cmd/verifystarlark_test.go b/pkg/build/cmd/verifystarlark_test.go
new file mode 100644
index 00000000000..8fe61dc2e8c
--- /dev/null
+++ b/pkg/build/cmd/verifystarlark_test.go
@@ -0,0 +1,135 @@
+package main
+
+import (
+	"context"
+	"os"
+	"path/filepath"
+	"strings"
+	"testing"
+
+	"github.com/stretchr/testify/require"
+)
+
+func TestVerifyStarlark(t *testing.T) {
+	t.Run("execution errors", func(t *testing.T) {
+		t.Run("invalid usage", func(t *testing.T) {
+			ctx := context.Background()
+			workspace := t.TempDir()
+			err := os.WriteFile(filepath.Join(workspace, "ignored.star"), []byte{}, os.ModePerm)
+			if err != nil {
+				t.Fatalf(err.Error())
+			}
+
+			_, executionErr := verifyStarlark(ctx, workspace, func(string) (string, []string) { return "buildifier", []string{"--invalid"} })
+			if executionErr == nil {
+				t.Fatalf("Expected execution error but got none")
+			}
+		})
+
+		t.Run("context cancellation", func(t *testing.T) {
+			ctx, cancel := context.WithCancel(context.Background())
+			workspace := t.TempDir()
+			err := os.WriteFile(filepath.Join(workspace, "ignored.star"), []byte{}, os.ModePerm)
+			if err != nil {
+				t.Fatalf(err.Error())
+			}
+			err = os.WriteFile(filepath.Join(workspace, "other-ignored.star"), []byte{}, os.ModePerm)
+			if err != nil {
+				t.Fatalf(err.Error())
+			}
+			cancel()
+
+			_, executionErr := verifyStarlark(ctx, workspace, buildifierLintCommand)
+			if executionErr == nil {
+				t.Fatalf("Expected execution error but got none")
+			}
+		})
+	})
+
+	t.Run("verification errors", func(t *testing.T) {
+		t.Run("a single file with lint", func(t *testing.T) {
+			ctx := context.Background()
+			workspace := t.TempDir()
+
+			invalidContent := []byte(`load("scripts/drone/other.star", "function")
+
+function()`)
+			err := os.WriteFile(filepath.Join(workspace, "has-lint.star"), invalidContent, os.ModePerm)
+			if err != nil {
+				t.Fatalf(err.Error())
+			}
+
+			verificationErrs, executionErr := verifyStarlark(ctx, workspace, buildifierLintCommand)
+			if executionErr != nil {
+				t.Fatalf("Unexpected execution error: %v", executionErr)
+			}
+			if len(verificationErrs) == 0 {
+				t.Fatalf(`"has-lint.star" requires linting but the verifyStarlark function provided no linting error`)
+			}
+			if len(verificationErrs) > 1 {
+				t.Fatalf(`verifyStarlark returned multiple errors for the "has-lint.star" file but only one was expected: %v`, verificationErrs)
+			}
+			if !strings.Contains(verificationErrs[0].Error(), "has-lint.star:1: module-docstring: The file has no module docstring.") {
+				t.Fatalf(`"has-lint.star" is missing a module docstring but the verifyStarlark function linting error did not mention this, instead we got: %v`, verificationErrs[0])
+			}
+		})
+
+		t.Run("no files with lint", func(t *testing.T) {
+			ctx := context.Background()
+			workspace := t.TempDir()
+
+			content := []byte(`"""
+This module does nothing.
+"""
+
+load("scripts/drone/other.star", "function")
+
+function()
+`)
+			require.NoError(t, os.WriteFile(filepath.Join(workspace, "no-lint.star"), content, os.ModePerm))
+
+			verificationErrs, executionErr := verifyStarlark(ctx, workspace, buildifierLintCommand)
+			if executionErr != nil {
+				t.Fatalf("Unexpected execution error: %v", executionErr)
+			}
+			if len(verificationErrs) != 0 {
+				t.Log(`"no-lint.star" has no lint but the verifyStarlark function provided at least one error`)
+				for _, err := range verificationErrs {
+					t.Log(err)
+				}
+				t.FailNow()
+			}
+		})
+
+		t.Run("multiple files with lint", func(t *testing.T) {
+			ctx := context.Background()
+			workspace := t.TempDir()
+
+			invalidContent := []byte(`load("scripts/drone/other.star", "function")
+
+function()`)
+			require.NoError(t, os.WriteFile(filepath.Join(workspace, "has-lint.star"), invalidContent, os.ModePerm))
+			require.NoError(t, os.WriteFile(filepath.Join(workspace, "has-lint2.star"), invalidContent, os.ModePerm))
+
+			verificationErrs, executionErr := verifyStarlark(ctx, workspace, buildifierLintCommand)
+			if executionErr != nil {
+				t.Fatalf("Unexpected execution error: %v", executionErr)
+			}
+			if len(verificationErrs) == 0 {
+				t.Fatalf(`Two files require linting but the verifyStarlark function provided no linting error`)
+			}
+			if len(verificationErrs) == 1 {
+				t.Fatalf(`Two files require linting but the verifyStarlark function provided only one linting error: %v`, verificationErrs[0])
+			}
+			if len(verificationErrs) > 2 {
+				t.Fatalf(`verifyStarlark returned more errors than expected: %v`, verificationErrs)
+			}
+			if !strings.Contains(verificationErrs[0].Error(), "has-lint.star:1: module-docstring: The file has no module docstring.") {
+				t.Errorf(`"has-lint.star" is missing a module docstring but the verifyStarlark function linting error did not mention this, instead we got: %v`, verificationErrs[0])
+			}
+			if !strings.Contains(verificationErrs[1].Error(), "has-lint2.star:1: module-docstring: The file has no module docstring.") {
+				t.Fatalf(`"has-lint2.star" is missing a module docstring but the verifyStarlark function linting error did not mention this, instead we got: %v`, verificationErrs[0])
+			}
+		})
+	})
+}
diff --git a/scripts/build/ci-build/Dockerfile b/scripts/build/ci-build/Dockerfile
index 32c90995f10..3316a3fcfc2 100644
--- a/scripts/build/ci-build/Dockerfile
+++ b/scripts/build/ci-build/Dockerfile
@@ -87,6 +87,12 @@ RUN curl -fLO http://storage.googleapis.com/grafana-downloads/ci-dependencies/sh
 RUN echo $SHELLCHECK_CHKSUM shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz | sha512sum --check --strict --status
 RUN tar xf shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz && mv shellcheck-v${SHELLCHECK_VERSION}/shellcheck /tmp/
 
+ARG BUILDIFIER_VERSION=5.1.0
+ARG BUILDIFIER_CHKSUM=52bf6b102cb4f88464e197caac06d69793fa2b05f5ad50a7e7bf6fbd656648a3
+RUN curl -fLO https://github.com/bazelbuild/buildtools/releases/download/${BUILDIFIER_VERSION}/buildifier-linux-amd64
+RUN echo $BUILDIFIER_CHKSUM buildifier-linux-amd64 | sha256sum --check --strict --status
+RUN mv buildifier-linux-amd64 /tmp/buildifier && chmod +x /tmp/buildifier
+
 ARG CUE_VERSION=0.3.0-alpha5
 ARG CUE_CHKSUM=9d3131e470cdb5182afd9966688f1c052d383145cce005a947156b5591da39b7
 RUN curl -fLO https://github.com/cuelang/cue/releases/download/v${CUE_VERSION}/cue_${CUE_VERSION}_Linux_x86_64.tar.gz
@@ -113,6 +119,7 @@ ARG DEBIAN_FRONTEND=noninteractive
 
 COPY --from=toolchain /tmp/x86_64-centos6-linux-gnu.tar.xz /tmp/osxcross.tar.xz /tmp/
 COPY --from=toolchain /tmp/shellcheck /usr/local/bin/
+COPY --from=toolchain /tmp/buildifier /usr/local/bin/
 COPY --from=toolchain /tmp/cue /usr/local/bin/
 COPY --from=toolchain /tmp/dockerize /usr/local/bin/
 
diff --git a/scripts/build/ci-build/README.md b/scripts/build/ci-build/README.md
index 72bd15705f7..ed6dbe509aa 100644
--- a/scripts/build/ci-build/README.md
+++ b/scripts/build/ci-build/README.md
@@ -11,7 +11,7 @@ In order to build and publish the Grafana build Docker image, execute the follow
 
 ```
 # Download MacOSX10.15.sdk.tar.xz from our private GCS bucket into this directory
-docker build -t grafana/build-container:<VERSION> .
+docker build -t grafana/build-container:<VERSION> --ulimit nofile=2048:2048 .
 docker push grafana/build-container:<VERSION>
 ```
 
diff --git a/scripts/drone/TAGS b/scripts/drone/TAGS
new file mode 100644
index 00000000000..1c9f9da89a5
--- /dev/null
+++ b/scripts/drone/TAGS
@@ -0,0 +1,628 @@
+
+events/release.star,6652
+ver_mode =ver_mode64,1602
+release_trigger =release_trigger65,1623
+def store_npm_packages_step():store_npm_packages_step74,1752
+def retrieve_npm_packages_step():retrieve_npm_packages_step90,2193
+def release_npm_packages_step():release_npm_packages_step107,2663
+def oss_pipelines(ver_mode = ver_mode, trigger = release_trigger):oss_pipelines123,3076
+    environment =environment135,3492
+    edition =edition136,3529
+    services =services137,3549
+    volumes =volumes138,3609
+    package_steps =package_steps139,3659
+    publish_steps =publish_steps140,3682
+    should_publish =should_publish141,3705
+    should_upload =should_upload142,3748
+    init_steps =init_steps143,3818
+    build_steps =build_steps152,4033
+    integration_test_steps =integration_test_steps159,4342
+    build_storybook =build_storybook182,5254
+        publish_step =publish_step190,5674
+        store_npm_step =store_npm_step191,5758
+    windows_package_steps =windows_package_steps196,5957
+    windows_pipeline =windows_pipeline198,6044
+        name =name199,6077
+        edition =edition200,6127
+        trigger =trigger201,6154
+        steps =steps202,6181
+        platform =platform203,6256
+        depends_on =depends_on204,6286
+        environment =environment207,6393
+    pipelines =pipelines209,6434
+            name =name211,6470
+            edition =edition212,6550
+            trigger =trigger213,6581
+            services =services214,6612
+            steps =steps215,6639
+            environment =environment216,6717
+            volumes =volumes217,6756
+                name =name225,6970
+                edition =edition226,7038
+                trigger =trigger227,7073
+                services =services228,7108
+                steps =steps229,7145
+                environment =environment230,7329
+                volumes =volumes231,7372
+        deps =deps234,7433
+def enterprise_pipelines(ver_mode = ver_mode, trigger = release_trigger):enterprise_pipelines247,7856
+    environment =environment259,8284
+    edition =edition260,8328
+    services =services261,8355
+    volumes =volumes262,8415
+    package_steps =package_steps263,8465
+    publish_steps =publish_steps264,8488
+    should_publish =should_publish265,8511
+    should_upload =should_upload266,8554
+    include_enterprise =include_enterprise267,8624
+    edition2 =edition2268,8673
+    init_steps =init_steps269,8702
+    build_steps =build_steps277,8909
+    integration_test_steps =integration_test_steps284,9218
+    build_storybook =build_storybook312,10299
+        publish_step =publish_step324,10892
+        store_npm_step =store_npm_step325,10976
+    windows_package_steps =windows_package_steps330,11175
+        step =step333,11284
+    deps_on_clone_enterprise_step =deps_on_clone_enterprise_step337,11418
+    windows_pipeline =windows_pipeline347,11746
+        name =name348,11779
+        edition =edition349,11836
+        trigger =trigger350,11863
+        steps =steps351,11890
+        platform =platform352,11965
+        depends_on =depends_on353,11995
+        environment =environment356,12109
+    pipelines =pipelines358,12150
+            name =name360,12186
+            edition =edition361,12273
+            trigger =trigger362,12304
+            services =services363,12335
+            steps =steps364,12362
+            environment =environment365,12440
+            volumes =volumes366,12479
+                name =name374,12711
+                edition =edition375,12786
+                trigger =trigger376,12821
+                services =services377,12856
+                steps =steps378,12893
+                environment =environment379,13213
+                volumes =volumes380,13256
+        deps =deps383,13317
+def enterprise2_pipelines(prefix = "", ver_mode = ver_mode, trigger = release_trigger):enterprise2_pipelines397,13769
+    environment =environment412,14364
+    edition =edition415,14424
+    volumes =volumes416,14451
+    package_steps =package_steps417,14501
+    publish_steps =publish_steps418,14524
+    should_publish =should_publish419,14547
+    should_upload =should_upload420,14590
+    include_enterprise =include_enterprise421,14660
+    edition2 =edition2422,14709
+    init_steps =init_steps423,14738
+    build_steps =build_steps431,14945
+    fetch_images =fetch_images442,15355
+    upload_cdn =upload_cdn444,15497
+        step =step458,16187
+    deps_on_clone_enterprise_step =deps_on_clone_enterprise_step462,16321
+    pipelines =pipelines472,16608
+            name =name474,16644
+            edition =edition475,16742
+            trigger =trigger476,16773
+            services =services477,16804
+            steps =steps478,16831
+            volumes =volumes479,16909
+            environment =environment480,16940
+def publish_artifacts_step(mode):publish_artifacts_step486,17019
+    security =security487,17053
+        security =security489,17098
+def publish_artifacts_pipelines(mode):publish_artifacts_pipelines501,17538
+    trigger =trigger502,17577
+    steps =steps506,17655
+        name =name512,17768
+        trigger =trigger513,17820
+        steps =steps514,17847
+        edition =edition515,17870
+        environment =environment516,17895
+def publish_packages_pipeline():publish_packages_pipeline519,17945
+    trigger =trigger526,18162
+    oss_steps =oss_steps530,18244
+    enterprise_steps =enterprise_steps538,18560
+    deps =deps545,18903
+        name =name552,19062
+        trigger =trigger553,19101
+        steps =steps554,19128
+        edition =edition555,19155
+        depends_on =depends_on556,19180
+        environment =environment557,19207
+        name =name559,19266
+        trigger =trigger560,19312
+        steps =steps561,19339
+        edition =edition562,19373
+        depends_on =depends_on563,19398
+        environment =environment564,19425
+def publish_npm_pipelines(mode):publish_npm_pipelines567,19482
+    trigger =trigger568,19515
+    steps =steps572,19593
+        name =name580,19772
+        trigger =trigger581,19827
+        steps =steps582,19854
+        edition =edition583,19877
+        environment =environment584,19902
+def artifacts_page_pipeline():artifacts_page_pipeline587,19952
+    trigger =trigger588,19983
+        name =name593,20087
+        trigger =trigger594,20128
+        steps =steps595,20155
+        edition =edition596,20220
+        environment =environment597,20245
+def get_e2e_suffix():get_e2e_suffix600,20295
+
+events/cron.star,1016
+aquasec_trivy_image =aquasec_trivy_image8,209
+def cronjobs(edition):cronjobs10,255
+    grafana_com_nightly_pipeline =grafana_com_nightly_pipeline11,278
+        cronName =cronName12,332
+        name =name13,374
+        steps =steps14,412
+def cron_job_pipeline(cronName, name, steps):cron_job_pipeline24,773
+def scan_docker_image_pipeline(edition, tag):scan_docker_image_pipeline43,1175
+        edition =edition55,1530
+        edition =edition57,1579
+    docker_image =docker_image59,1608
+        cronName =cronName62,1695
+        name =name63,1725
+        steps =steps64,1775
+def scan_docker_image_unkown_low_medium_vulnerabilities_step(docker_image):scan_docker_image_unkown_low_medium_vulnerabilities_step71,2047
+def scan_docker_image_high_critical_vulnerabilities_step(docker_image):scan_docker_image_high_critical_vulnerabilities_step80,2353
+def slack_job_failed_step(channel, image):slack_job_failed_step89,2646
+def post_to_grafana_com_step():post_to_grafana_com_step103,3069
+
+events/main.star,633
+ver_mode =ver_mode49,966
+trigger =trigger50,984
+def main_pipelines(edition):main_pipelines62,1168
+    drone_change_trigger =drone_change_trigger63,1197
+    pipelines =pipelines79,1513
+            name =name89,1951
+            slack_channel =slack_channel90,1994
+            trigger =trigger91,2045
+            template =template92,2089
+            secret =secret93,2135
+            name =name97,2276
+            slack_channel =slack_channel98,2310
+            trigger =trigger99,2366
+            depends_on =depends_on100,2425
+            template =template101,2563
+            secret =secret102,2604
+
+events/pr.star,252
+ver_mode =ver_mode48,997
+trigger =trigger49,1013
+def pr_pipelines(edition):pr_pipelines62,1198
+def get_pr_trigger(include_paths = None, exclude_paths = None):get_pr_trigger76,2396
+    paths_ex =paths_ex91,3080
+    paths_in =paths_in92,3115
+
+services/services.star,225
+def integration_test_services_volumes():integration_test_services_volumes5,79
+def integration_test_services(edition):integration_test_services14,292
+    services =services15,332
+def ldap_service():ldap_service59,1616
+
+utils/utils.star,561
+failure_template =failure_template11,191
+drone_change_template =drone_change_template12,509
+        services =services19,932
+        platform =platform20,955
+        depends_on =depends_on21,983
+        environment =environment22,1008
+        volumes =volumes23,1036
+        platform_conf =platform_conf50,2166
+        platform_conf =platform_conf62,2534
+    pipeline =pipeline70,2713
+def notify_pipeline(name, slack_channel, trigger, depends_on = [], template = None, secret = None):notify_pipeline105,3545
+    trigger =trigger106,3645
+
+pipelines/trigger_downstream.star,440
+trigger =trigger14,249
+def enterprise_downstream_pipeline(edition, ver_mode):enterprise_downstream_pipeline26,433
+    environment =environment27,488
+    steps =steps28,527
+    deps =deps29,587
+        name =name31,672
+        edition =edition32,714
+        trigger =trigger33,741
+        services =services34,768
+        steps =steps35,791
+        depends_on =depends_on36,814
+        environment =environment37,841
+
+pipelines/verify_starlark.star,323
+def verify_starlark(trigger, ver_mode):verify_starlark17,305
+    environment =environment18,345
+    steps =steps19,382
+        name =name26,546
+        edition =edition27,600
+        trigger =trigger28,625
+        services =services29,652
+        steps =steps30,675
+        environment =environment31,698
+
+pipelines/build.star,508
+def build_e2e(trigger, ver_mode, edition):build_e2e39,936
+    environment =environment50,1096
+    variants =variants51,1135
+    init_steps =init_steps52,1219
+    build_steps =build_steps61,1491
+    publish_suffix =publish_suffix107,4049
+        publish_suffix =publish_suffix109,4100
+        name =name112,4158
+        edition =edition113,4224
+        environment =environment114,4249
+        services =services115,4284
+        steps =steps116,4307
+        trigger =trigger117,4349
+
+pipelines/shellcheck.star,386
+trigger =trigger15,235
+def shellcheck_step():shellcheck_step31,483
+def shellcheck_pipeline():shellcheck_pipeline43,725
+    environment =environment44,752
+    steps =steps45,789
+        name =name50,886
+        edition =edition51,918
+        trigger =trigger52,943
+        services =services53,970
+        steps =steps54,993
+        environment =environment55,1016
+
+pipelines/verify_drone.star,317
+def verify_drone(trigger, ver_mode):verify_drone17,293
+    environment =environment18,330
+    steps =steps19,367
+        name =name26,528
+        edition =edition27,579
+        trigger =trigger28,604
+        services =services29,631
+        steps =steps30,654
+        environment =environment31,677
+
+pipelines/test_backend.star,474
+def test_backend(trigger, ver_mode, edition = "oss"):test_backend23,463
+    environment =environment35,882
+    init_steps =init_steps36,921
+    test_steps =test_steps46,1291
+    pipeline_name =pipeline_name51,1387
+        pipeline_name =pipeline_name53,1492
+        name =name55,1584
+        edition =edition56,1614
+        trigger =trigger57,1641
+        services =services58,1668
+        steps =steps59,1691
+        environment =environment60,1732
+
+pipelines/lint_frontend.star,415
+def lint_frontend_pipeline(trigger, ver_mode):lint_frontend_pipeline16,260
+    environment =environment26,546
+    yarn_step =yarn_step27,583
+    init_steps =init_steps29,660
+    test_steps =test_steps33,736
+        name =name37,812
+        edition =edition38,864
+        trigger =trigger39,889
+        services =services40,916
+        steps =steps41,939
+        environment =environment42,980
+
+pipelines/docs.star,494
+docs_paths =docs_paths19,383
+def docs_pipelines(edition, ver_mode, trigger):docs_pipelines28,511
+    environment =environment29,559
+    steps =steps30,598
+        name =name40,815
+        edition =edition41,858
+        trigger =trigger42,885
+        services =services43,912
+        steps =steps44,935
+        environment =environment45,958
+def lint_docs():lint_docs48,1000
+def trigger_docs_main():trigger_docs_main63,1328
+def trigger_docs_pr():trigger_docs_pr72,1478
+
+pipelines/test_frontend.star,476
+def test_frontend(trigger, ver_mode, edition = "oss"):test_frontend20,374
+    environment =environment32,794
+    init_steps =init_steps33,833
+    test_steps =test_steps41,1102
+    pipeline_name =pipeline_name45,1205
+        pipeline_name =pipeline_name47,1311
+        name =name49,1404
+        edition =edition50,1434
+        trigger =trigger51,1461
+        services =services52,1488
+        steps =steps53,1511
+        environment =environment54,1552
+
+pipelines/integration_tests.star,483
+def integration_tests(trigger, ver_mode, edition):integration_tests26,542
+    environment =environment37,900
+    services =services38,939
+    volumes =volumes39,989
+    init_steps =init_steps40,1039
+    test_steps =test_steps48,1282
+        name =name54,1412
+        edition =edition55,1468
+        trigger =trigger56,1493
+        services =services57,1520
+        steps =steps58,1549
+        environment =environment59,1590
+        volumes =volumes60,1625
+
+pipelines/windows.star,954
+def windows(trigger, edition, ver_mode):windows17,339
+    environment =environment29,798
+    init_cmds =init_cmds30,837
+    steps =steps38,1205
+        bucket =bucket49,1497
+            ver_part =ver_part51,1590
+            dir =dir52,1628
+            dir =dir54,1670
+            bucket =bucket55,1695
+            build_no =build_no56,1736
+            ver_part =ver_part57,1780
+        installer_commands =installer_commands58,1842
+            committish =committish100,3763
+            committish =committish102,3846
+            committish =committish104,3906
+        download_grabpl_step_cmds =download_grabpl_step_cmds107,4057
+        clone_cmds =clone_cmds113,4363
+        name =name146,5711
+        edition =edition147,5742
+        trigger =trigger148,5769
+        steps =steps149,5830
+        depends_on =depends_on150,5889
+        platform =platform151,6007
+        environment =environment152,6037
+
+pipelines/lint_backend.star,418
+def lint_backend_pipeline(trigger, ver_mode):lint_backend_pipeline18,306
+    environment =environment28,590
+    wire_step =wire_step29,627
+    init_steps =init_steps31,704
+    test_steps =test_steps36,809
+        name =name43,959
+        edition =edition44,1010
+        trigger =trigger45,1035
+        services =services46,1062
+        steps =steps47,1085
+        environment =environment48,1126
+
+pipelines/publish_images.star,998
+def publish_image_steps(edition, mode, docker_repo):publish_image_steps17,303
+    additional_docker_repo =additional_docker_repo31,922
+        additional_docker_repo =additional_docker_repo33,979
+    steps =steps34,1034
+def publish_image_pipelines_public():publish_image_pipelines_public45,1369
+    mode =mode51,1521
+    trigger =trigger52,1541
+        name =name57,1641
+        trigger =trigger58,1694
+        steps =steps59,1721
+        edition =edition60,1813
+        environment =environment61,1835
+        name =name63,1894
+        trigger =trigger64,1954
+        steps =steps65,1981
+        edition =edition66,2091
+        environment =environment67,2113
+def publish_image_pipelines_security():publish_image_pipelines_security70,2170
+    mode =mode71,2210
+    trigger =trigger72,2232
+        name =name77,2332
+        trigger =trigger78,2392
+        steps =steps79,2419
+        edition =edition80,2529
+        environment =environment81,2551
+
+steps/lib.star,8579
+grabpl_version =grabpl_version7,181
+build_image =build_image8,208
+publish_image =publish_image9,254
+deploy_docker_image =deploy_docker_image10,304
+alpine_image =alpine_image11,380
+curl_image =curl_image12,411
+windows_image =windows_image13,452
+wix_image =wix_image14,501
+go_image =go_image15,536
+disable_tests =disable_tests17,564
+trigger_oss =trigger_oss18,586
+def slack_step(channel, template, secret):slack_step24,653
+def yarn_install_step(edition = "oss"):yarn_install_step35,918
+    deps =deps36,958
+        deps =deps38,1004
+def wire_install_step():wire_install_step48,1222
+def identify_runner_step(platform = "linux"):identify_runner_step60,1454
+def clone_enterprise_step(ver_mode):clone_enterprise_step78,1916
+        committish =committish87,2193
+        committish =committish89,2268
+        committish =committish91,2317
+def init_enterprise_step(ver_mode):init_enterprise_step105,2747
+    source_commit =source_commit115,3098
+        source_commit =source_commit117,3151
+        environment =environment118,3191
+        token =token121,3280
+        environment =environment123,3369
+        token =token126,3458
+        environment =environment128,3518
+        token =token129,3543
+def download_grabpl_step(platform = "linux"):download_grabpl_step148,4147
+def lint_drone_step():lint_drone_step173,4973
+def lint_starlark_step():lint_starlark_step185,5216
+def enterprise_downstream_step(edition, ver_mode):enterprise_downstream_step206,6000
+    repo =repo219,6482
+    step =step225,6623
+def lint_backend_step():lint_backend_step247,7248
+def benchmark_ldap_step():benchmark_ldap_step265,7713
+def build_storybook_step(edition, ver_mode):build_storybook_step278,8087
+def store_storybook_step(edition, ver_mode, trigger = None):store_storybook_step300,8743
+    commands =commands314,9202
+        commands =commands323,9521
+    step =step325,9593
+        when_cond =when_cond338,10125
+        step =step346,10330
+def e2e_tests_artifacts(edition):e2e_tests_artifacts349,10391
+def upload_cdn_step(edition, ver_mode, trigger = None):upload_cdn_step386,12378
+    deps =deps397,12763
+    step =step407,12970
+        step =step420,13423
+def build_backend_step(edition, ver_mode, variants = None):build_backend_step423,13482
+    variants_str =variants_str437,14070
+        variants_str =variants_str439,14109
+        cmds =cmds443,14256
+        build_no =build_no449,14418
+        cmds =cmds450,14461
+def build_frontend_step(edition, ver_mode):build_frontend_step468,14906
+    build_no =build_no478,15246
+        cmds =cmds482,15356
+        cmds =cmds487,15505
+def build_frontend_package_step(edition, ver_mode):build_frontend_package_step505,15960
+    build_no =build_no515,16312
+        cmds =cmds519,16422
+        cmds =cmds524,16580
+def build_plugins_step(edition, ver_mode):build_plugins_step542,17053
+        env =env544,17121
+        env =env548,17220
+def test_backend_step():test_backend_step563,17607
+def test_backend_integration_step():test_backend_integration_step575,17880
+def betterer_frontend_step(edition = "oss"):betterer_frontend_step587,18187
+    deps =deps596,18427
+def test_frontend_step(edition = "oss"):test_frontend_step609,18728
+    deps =deps618,18962
+def lint_frontend_step():lint_frontend_step634,19343
+def test_a11y_frontend_step(ver_mode, edition, port = 3001):test_a11y_frontend_step652,19793
+    commands =commands664,20279
+    failure =failure667,20345
+        failure =failure672,20483
+def frontend_metrics_step(edition, trigger = None):frontend_metrics_step693,21146
+    step =step706,21507
+        step =step721,22007
+def codespell_step():codespell_step724,22066
+def package_step(edition, ver_mode, variants = None):package_step736,22468
+    deps =deps750,23006
+    variants_str =variants_str757,23167
+        variants_str =variants_str759,23206
+        sign_args =sign_args762,23332
+        env =env763,23362
+        test_args =test_args769,23628
+        sign_args =sign_args771,23661
+        env =env772,23684
+        test_args =test_args773,23703
+        cmds =cmds777,23829
+        build_no =build_no784,24036
+        cmds =cmds785,24079
+def grafana_server_step(edition, port = 3001):grafana_server_step798,24459
+    package_file_pfx =package_file_pfx808,24729
+        package_file_pfx =package_file_pfx810,24788
+        package_file_pfx =package_file_pfx812,24889
+    environment =environment814,24938
+def e2e_tests_step(suite, edition, port = 3001, tries = None):e2e_tests_step837,25554
+    cmd =cmd838,25617
+def cloud_plugins_e2e_tests_step(suite, edition, cloud, trigger = None):cloud_plugins_e2e_tests_step856,26186
+    environment =environment869,26649
+    when =when870,26670
+        when =when872,26700
+        environment =environment874,26748
+        when =when882,27129
+    branch =branch888,27345
+    step =step889,27401
+    step =step901,27822
+def build_docs_website_step():build_docs_website_step904,27874
+def copy_packages_for_docker_step(edition = None):copy_packages_for_docker_step916,28272
+def build_docker_images_step(edition, archs = None, ubuntu = False, publish = False):build_docker_images_step929,28622
+    cmd =cmd943,29193
+    ubuntu_sfx =ubuntu_sfx947,29307
+        ubuntu_sfx =ubuntu_sfx949,29342
+    environment =environment955,29468
+def fetch_images_step(edition):fetch_images_step979,30079
+def publish_images_step(edition, ver_mode, mode, docker_repo, trigger = None):publish_images_step997,30745
+    name =name1013,31562
+    docker_repo =docker_repo1014,31585
+        mode =mode1016,31663
+        mode =mode1018,31709
+    environment =environment1020,31728
+    cmd =cmd1026,31912
+        deps =deps1029,32041
+        deps =deps1032,32147
+        name =name1035,32250
+        docker_repo =docker_repo1036,32273
+        cmd =cmd1038,32459
+    step =step1040,32565
+        step =step1052,32929
+def postgres_integration_tests_step():postgres_integration_tests_step1056,32989
+    cmds =cmds1057,33028
+def mysql_integration_tests_step():mysql_integration_tests_step1079,33850
+    cmds =cmds1080,33886
+def redis_integration_tests_step():redis_integration_tests_step1100,34629
+def memcached_integration_tests_step():memcached_integration_tests_step1114,35026
+def release_canary_npm_packages_step(edition, trigger = None):release_canary_npm_packages_step1128,35435
+    step =step1141,35805
+        step =step1153,36143
+def enterprise2_suffix(edition):enterprise2_suffix1156,36202
+def upload_packages_step(edition, ver_mode, trigger = None):upload_packages_step1161,36320
+    deps =deps1176,36816
+    step =step1184,37036
+        step =step1195,37471
+def publish_grafanacom_step(edition, ver_mode):publish_grafanacom_step1198,37530
+        cmd =cmd1211,38044
+        build_no =build_no1215,38188
+        cmd =cmd1216,38231
+def publish_linux_packages_step(edition, package_manager = "deb"):publish_linux_packages_step1239,38866
+def get_windows_steps(edition, ver_mode):get_windows_steps1261,39989
+    init_cmds =init_cmds1270,40281
+    steps =steps1278,40649
+        bucket =bucket1289,40941
+            ver_part =ver_part1291,41034
+            dir =dir1292,41072
+            dir =dir1294,41114
+            bucket =bucket1295,41139
+            build_no =build_no1296,41180
+            ver_part =ver_part1297,41224
+        installer_commands =installer_commands1298,41286
+            committish =committish1340,43207
+            committish =committish1342,43290
+            committish =committish1344,43350
+        download_grabpl_step_cmds =download_grabpl_step_cmds1347,43501
+        clone_cmds =clone_cmds1353,43807
+def verify_gen_cue_step(edition):verify_gen_cue_step1387,45152
+    deps =deps1388,45186
+def verify_gen_jsonnet_step(edition):verify_gen_jsonnet_step1402,45694
+    deps =deps1403,45732
+def trigger_test_release():trigger_test_release1417,46236
+def artifacts_page_step():artifacts_page_step1451,47731
+def end_to_end_tests_deps():end_to_end_tests_deps1466,48058
+def compile_build_cmd(edition = "oss"):compile_build_cmd1476,48321
+    dependencies =dependencies1477,48361
+        dependencies =dependencies1479,48432
+def get_trigger_storybook(ver_mode):get_trigger_storybook1492,48780
+    trigger_storybook =trigger_storybook1500,49031
+        trigger_storybook =trigger_storybook1502,49088
+        trigger_storybook =trigger_storybook1506,49168
+
+vault.star,444
+pull_secret =pull_secret4,87
+github_token =github_token5,120
+drone_token =drone_token6,150
+prerelease_bucket =prerelease_bucket7,178
+gcp_upload_artifacts_key =gcp_upload_artifacts_key8,218
+azure_sp_app_id =azure_sp_app_id9,272
+azure_sp_app_pw =azure_sp_app_pw10,308
+azure_tenant =azure_tenant11,344
+def from_secret(secret):from_secret13,375
+def vault_secret(name, path, key):vault_secret18,451
+def secrets():secrets28,633
+
+version.star,116
+ver_mode =ver_mode12,197
+trigger =trigger13,225
+def version_branch_pipelines():version_branch_pipelines15,268
diff --git a/scripts/drone/events/cron.star b/scripts/drone/events/cron.star
index d311214ea72..9b718f79572 100644
--- a/scripts/drone/events/cron.star
+++ b/scripts/drone/events/cron.star
@@ -1,110 +1,114 @@
-load('scripts/drone/vault.star', 'from_secret')
+"""
+This module provides functions for cronjob pipelines and steps used within.
+"""
+
+load("scripts/drone/vault.star", "from_secret")
 load(
-    'scripts/drone/steps/lib.star',
-    'publish_image',
-    'compile_build_cmd',
+    "scripts/drone/steps/lib.star",
+    "compile_build_cmd",
+    "publish_image",
 )
 
-aquasec_trivy_image = 'aquasec/trivy:0.21.0'
-
+aquasec_trivy_image = "aquasec/trivy:0.21.0"
 
 def cronjobs():
     return [
-        scan_docker_image_pipeline('latest'),
-        scan_docker_image_pipeline('main'),
-        scan_docker_image_pipeline('latest-ubuntu'),
-        scan_docker_image_pipeline('main-ubuntu'),
+        scan_docker_image_pipeline("latest"),
+        scan_docker_image_pipeline("main"),
+        scan_docker_image_pipeline("latest-ubuntu"),
+        scan_docker_image_pipeline("main-ubuntu"),
         grafana_com_nightly_pipeline(),
     ]
 
-
 def cron_job_pipeline(cronName, name, steps):
     return {
-        'kind': 'pipeline',
-        'type': 'docker',
-        'platform': {
-            'os': 'linux',
-            'arch': 'amd64',
+        "kind": "pipeline",
+        "type": "docker",
+        "platform": {
+            "os": "linux",
+            "arch": "amd64",
         },
-        'name': name,
-        'trigger': {
-            'event': 'cron',
-            'cron': cronName,
+        "name": name,
+        "trigger": {
+            "event": "cron",
+            "cron": cronName,
         },
-        'clone': {
-            'retries': 3,
+        "clone": {
+            "retries": 3,
         },
-        'steps': steps,
+        "steps": steps,
     }
 
-
 def scan_docker_image_pipeline(tag):
-    dockerImage = 'grafana/{}:{}'.format('grafana', tag)
+    """Generates a cronjob pipeline for nightly scans of grafana Docker images.
+
+    Args:
+      tag: determines which image tag is scanned.
+
+    Returns:
+      Drone cronjob pipeline.
+    """
+    docker_image = "grafana/grafana:{}".format(tag)
 
     return cron_job_pipeline(
-        cronName='nightly',
-        name='scan-' + dockerImage + '-image',
-        steps=[
-            scan_docker_image_unkown_low_medium_vulnerabilities_step(dockerImage),
-            scan_docker_image_high_critical_vulnerabilities_step(dockerImage),
-            slack_job_failed_step('grafana-backend-ops', dockerImage),
+        cronName = "nightly",
+        name = "scan-" + docker_image + "-image",
+        steps = [
+            scan_docker_image_unkown_low_medium_vulnerabilities_step(docker_image),
+            scan_docker_image_high_critical_vulnerabilities_step(docker_image),
+            slack_job_failed_step("grafana-backend-ops", docker_image),
         ],
     )
 
-
-def scan_docker_image_unkown_low_medium_vulnerabilities_step(dockerImage):
+def scan_docker_image_unkown_low_medium_vulnerabilities_step(docker_image):
     return {
-        'name': 'scan-unkown-low-medium-vulnerabilities',
-        'image': aquasec_trivy_image,
-        'commands': [
-            'trivy --exit-code 0 --severity UNKNOWN,LOW,MEDIUM ' + dockerImage,
+        "name": "scan-unkown-low-medium-vulnerabilities",
+        "image": aquasec_trivy_image,
+        "commands": [
+            "trivy --exit-code 0 --severity UNKNOWN,LOW,MEDIUM " + docker_image,
         ],
     }
 
-
-def scan_docker_image_high_critical_vulnerabilities_step(dockerImage):
+def scan_docker_image_high_critical_vulnerabilities_step(docker_image):
     return {
-        'name': 'scan-high-critical-vulnerabilities',
-        'image': aquasec_trivy_image,
-        'commands': [
-            'trivy --exit-code 1 --severity HIGH,CRITICAL ' + dockerImage,
+        "name": "scan-high-critical-vulnerabilities",
+        "image": aquasec_trivy_image,
+        "commands": [
+            "trivy --exit-code 1 --severity HIGH,CRITICAL " + docker_image,
         ],
     }
 
-
 def slack_job_failed_step(channel, image):
     return {
-        'name': 'slack-notify-failure',
-        'image': 'plugins/slack',
-        'settings': {
-            'webhook': from_secret('slack_webhook_backend'),
-            'channel': channel,
-            'template': 'Nightly docker image scan job for '
-            + image
-            + ' failed: {{build.link}}',
+        "name": "slack-notify-failure",
+        "image": "plugins/slack",
+        "settings": {
+            "webhook": from_secret("slack_webhook_backend"),
+            "channel": channel,
+            "template": "Nightly docker image scan job for " +
+                        image +
+                        " failed: {{build.link}}",
         },
-        'when': {'status': 'failure'},
+        "when": {"status": "failure"},
     }
 
-
 def post_to_grafana_com_step():
     return {
-        'name': 'post-to-grafana-com',
-        'image': publish_image,
-        'environment': {
-            'GRAFANA_COM_API_KEY': from_secret('grafana_api_key'),
-            'GCP_KEY': from_secret('gcp_key'),
+        "name": "post-to-grafana-com",
+        "image": publish_image,
+        "environment": {
+            "GRAFANA_COM_API_KEY": from_secret("grafana_api_key"),
+            "GCP_KEY": from_secret("gcp_key"),
         },
-        'depends_on': ['compile-build-cmd'],
-        'commands': ['./bin/build publish grafana-com --edition oss'],
+        "depends_on": ["compile-build-cmd"],
+        "commands": ["./bin/build publish grafana-com --edition oss"],
     }
 
-
 def grafana_com_nightly_pipeline():
     return cron_job_pipeline(
-        cronName='grafana-com-nightly',
-        name='grafana-com-nightly',
-        steps=[
+        cronName = "grafana-com-nightly",
+        name = "grafana-com-nightly",
+        steps = [
             compile_build_cmd(),
             post_to_grafana_com_step(),
         ],
diff --git a/scripts/drone/events/main.star b/scripts/drone/events/main.star
index bc238ecf719..ab003e15abb 100644
--- a/scripts/drone/events/main.star
+++ b/scripts/drone/events/main.star
@@ -1,125 +1,115 @@
+"""
+This module returns all the pipelines used in the event of pushes to the main branch.
+"""
+
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
-    'notify_pipeline',
-    'failure_template',
-    'drone_change_template',
+    "scripts/drone/utils/utils.star",
+    "drone_change_template",
+    "failure_template",
+    "notify_pipeline",
 )
-
 load(
-    'scripts/drone/pipelines/docs.star',
-    'docs_pipelines',
-    'trigger_docs_main',
+    "scripts/drone/pipelines/docs.star",
+    "docs_pipelines",
+    "trigger_docs_main",
 )
-
 load(
-    'scripts/drone/pipelines/test_frontend.star',
-    'test_frontend',
+    "scripts/drone/pipelines/test_frontend.star",
+    "test_frontend",
 )
-
 load(
-    'scripts/drone/pipelines/test_backend.star',
-    'test_backend',
+    "scripts/drone/pipelines/test_backend.star",
+    "test_backend",
 )
-
 load(
-    'scripts/drone/pipelines/integration_tests.star',
-    'integration_tests',
+    "scripts/drone/pipelines/integration_tests.star",
+    "integration_tests",
 )
-
 load(
-    'scripts/drone/pipelines/build.star',
-    'build_e2e',
+    "scripts/drone/pipelines/build.star",
+    "build_e2e",
 )
-
 load(
-    'scripts/drone/pipelines/windows.star',
-    'windows',
+    "scripts/drone/pipelines/windows.star",
+    "windows",
 )
-
 load(
-    'scripts/drone/pipelines/trigger_downstream.star',
-    'enterprise_downstream_pipeline',
+    "scripts/drone/pipelines/trigger_downstream.star",
+    "enterprise_downstream_pipeline",
 )
-
 load(
-    'scripts/drone/pipelines/lint_backend.star',
-    'lint_backend_pipeline',
+    "scripts/drone/pipelines/lint_backend.star",
+    "lint_backend_pipeline",
 )
-
 load(
-    'scripts/drone/pipelines/lint_frontend.star',
-    'lint_frontend_pipeline',
+    "scripts/drone/pipelines/lint_frontend.star",
+    "lint_frontend_pipeline",
 )
 
-load('scripts/drone/vault.star', 'from_secret')
-
-
-ver_mode = 'main'
+ver_mode = "main"
 trigger = {
-    'event': [
-        'push',
+    "event": [
+        "push",
     ],
-    'branch': 'main',
-    'paths': {
-        'exclude': [
-            '*.md',
-            'docs/**',
-            'latest.json',
+    "branch": "main",
+    "paths": {
+        "exclude": [
+            "*.md",
+            "docs/**",
+            "latest.json",
         ],
     },
 }
 
-
 def main_pipelines():
     drone_change_trigger = {
-        'event': [
-            'push',
+        "event": [
+            "push",
         ],
-        'branch': 'main',
-        'repo': [
-            'grafana/grafana',
+        "branch": "main",
+        "repo": [
+            "grafana/grafana",
         ],
-        'paths': {
-            'include': [
-                '.drone.yml',
+        "paths": {
+            "include": [
+                ".drone.yml",
             ],
-            'exclude': [
-                'exclude',
+            "exclude": [
+                "exclude",
             ],
         },
     }
 
     pipelines = [
         docs_pipelines(ver_mode, trigger_docs_main()),
-        test_frontend(trigger, ver_mode, committish='${DRONE_COMMIT}'),
+        test_frontend(trigger, ver_mode),
         lint_frontend_pipeline(trigger, ver_mode),
-        test_backend(trigger, ver_mode, committish='${DRONE_COMMIT}'),
+        test_backend(trigger, ver_mode),
         lint_backend_pipeline(trigger, ver_mode),
         build_e2e(trigger, ver_mode),
-        integration_tests(trigger, prefix=ver_mode),
-        windows(trigger, edition='oss', ver_mode=ver_mode),
+        integration_tests(trigger, prefix = ver_mode),
+        windows(trigger, edition = "oss", ver_mode = ver_mode),
         notify_pipeline(
-            name='notify-drone-changes',
-            slack_channel='slack-webhooks-test',
-            trigger=drone_change_trigger,
-            template=drone_change_template,
-            secret='drone-changes-webhook',
+            name = "notify-drone-changes",
+            slack_channel = "slack-webhooks-test",
+            trigger = drone_change_trigger,
+            template = drone_change_template,
+            secret = "drone-changes-webhook",
         ),
         enterprise_downstream_pipeline(),
         notify_pipeline(
-            name='main-notify',
-            slack_channel='grafana-ci-notifications',
-            trigger=dict(trigger, status=['failure']),
-            depends_on=[
-                'main-test-frontend',
-                'main-test-backend',
-                'main-build-e2e-publish',
-                'main-integration-tests',
-                'main-windows',
+            name = "main-notify",
+            slack_channel = "grafana-ci-notifications",
+            trigger = dict(trigger, status = ["failure"]),
+            depends_on = [
+                "main-test-frontend",
+                "main-test-backend",
+                "main-build-e2e-publish",
+                "main-integration-tests",
+                "main-windows",
             ],
-            template=failure_template,
-            secret='slack_webhook',
+            template = failure_template,
+            secret = "slack_webhook",
         ),
     ]
 
diff --git a/scripts/drone/events/pr.star b/scripts/drone/events/pr.star
index d9afe947305..73ab62d2680 100644
--- a/scripts/drone/events/pr.star
+++ b/scripts/drone/events/pr.star
@@ -1,143 +1,155 @@
+"""
+This module returns all pipelines used in the event of a pull request.
+It also includes a function generating a PR trigger from a list of included and excluded paths.
+"""
+
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/pipelines/test_frontend.star",
+    "test_frontend",
 )
-
 load(
-    'scripts/drone/pipelines/test_frontend.star',
-    'test_frontend',
+    "scripts/drone/pipelines/test_backend.star",
+    "test_backend",
 )
-
 load(
-    'scripts/drone/pipelines/test_backend.star',
-    'test_backend',
+    "scripts/drone/pipelines/integration_tests.star",
+    "integration_tests",
 )
-
 load(
-    'scripts/drone/pipelines/integration_tests.star',
-    'integration_tests',
+    "scripts/drone/pipelines/build.star",
+    "build_e2e",
 )
-
 load(
-    'scripts/drone/pipelines/build.star',
-    'build_e2e',
+    "scripts/drone/pipelines/verify_drone.star",
+    "verify_drone",
 )
-
 load(
-    'scripts/drone/pipelines/verify_drone.star',
-    'verify_drone',
+    "scripts/drone/pipelines/verify_starlark.star",
+    "verify_starlark",
 )
-
 load(
-    'scripts/drone/pipelines/docs.star',
-    'docs_pipelines',
-    'trigger_docs_pr',
+    "scripts/drone/pipelines/docs.star",
+    "docs_pipelines",
+    "trigger_docs_pr",
 )
-
 load(
-    'scripts/drone/pipelines/shellcheck.star',
-    'shellcheck_pipeline',
+    "scripts/drone/pipelines/shellcheck.star",
+    "shellcheck_pipeline",
 )
-
 load(
-    'scripts/drone/pipelines/lint_backend.star',
-    'lint_backend_pipeline',
+    "scripts/drone/pipelines/lint_backend.star",
+    "lint_backend_pipeline",
 )
-
 load(
-    'scripts/drone/pipelines/lint_frontend.star',
-    'lint_frontend_pipeline',
+    "scripts/drone/pipelines/lint_frontend.star",
+    "lint_frontend_pipeline",
 )
 
-ver_mode = 'pr'
+ver_mode = "pr"
 trigger = {
-    'event': [
-        'pull_request',
+    "event": [
+        "pull_request",
     ],
-    'paths': {
-        'exclude': [
-            '*.md',
-            'docs/**',
-            'latest.json',
+    "paths": {
+        "exclude": [
+            "*.md",
+            "docs/**",
+            "latest.json",
         ],
     },
 }
 
-
 def pr_pipelines():
     return [
         verify_drone(
             get_pr_trigger(
-                include_paths=['scripts/drone/**', '.drone.yml', '.drone.star']
+                include_paths = ["scripts/drone/**", ".drone.yml", ".drone.star"],
+            ),
+            ver_mode,
+        ),
+        verify_starlark(
+            get_pr_trigger(
+                include_paths = ["scripts/drone/**", ".drone.star"],
             ),
             ver_mode,
         ),
         test_frontend(
             get_pr_trigger(
-                exclude_paths=['pkg/**', 'packaging/**', 'go.sum', 'go.mod']
+                exclude_paths = ["pkg/**", "packaging/**", "go.sum", "go.mod"],
             ),
             ver_mode,
-            committish='${DRONE_COMMIT}',
         ),
         lint_frontend_pipeline(
             get_pr_trigger(
-                exclude_paths=['pkg/**', 'packaging/**', 'go.sum', 'go.mod']
+                exclude_paths = ["pkg/**", "packaging/**", "go.sum", "go.mod"],
             ),
             ver_mode,
         ),
         test_backend(
             get_pr_trigger(
-                include_paths=[
-                    'pkg/**',
-                    'packaging/**',
-                    '.drone.yml',
-                    'conf/**',
-                    'go.sum',
-                    'go.mod',
-                    'public/app/plugins/**/plugin.json',
-                    'devenv/**',
-                ]
+                include_paths = [
+                    "pkg/**",
+                    "packaging/**",
+                    ".drone.yml",
+                    "conf/**",
+                    "go.sum",
+                    "go.mod",
+                    "public/app/plugins/**/plugin.json",
+                    "devenv/**",
+                ],
             ),
             ver_mode,
-            committish='${DRONE_COMMIT}',
         ),
         lint_backend_pipeline(
             get_pr_trigger(
-                include_paths=[
-                    'pkg/**',
-                    'packaging/**',
-                    'conf/**',
-                    'go.sum',
-                    'go.mod',
-                    'public/app/plugins/**/plugin.json',
-                    'devenv/**',
-                    '.bingo/**',
-                ]
+                include_paths = [
+                    "pkg/**",
+                    "packaging/**",
+                    "conf/**",
+                    "go.sum",
+                    "go.mod",
+                    "public/app/plugins/**/plugin.json",
+                    "devenv/**",
+                    ".bingo/**",
+                ],
             ),
             ver_mode,
         ),
         build_e2e(trigger, ver_mode),
         integration_tests(
             get_pr_trigger(
-                include_paths=[
-                    'pkg/**',
-                    'packaging/**',
-                    '.drone.yml',
-                    'conf/**',
-                    'go.sum',
-                    'go.mod',
-                    'public/app/plugins/**/plugin.json',
-                ]
+                include_paths = [
+                    "pkg/**",
+                    "packaging/**",
+                    ".drone.yml",
+                    "conf/**",
+                    "go.sum",
+                    "go.mod",
+                    "public/app/plugins/**/plugin.json",
+                ],
             ),
-            prefix=ver_mode,
+            prefix = ver_mode,
         ),
         docs_pipelines(ver_mode, trigger_docs_pr()),
         shellcheck_pipeline(),
     ]
 
+def get_pr_trigger(include_paths = None, exclude_paths = None):
+    """Generates a trigger filter from the lists of included and excluded path patterns.
+
+    This function is primarily intended to generate a trigger for code changes
+    as the patterns 'docs/**' and '*.md' are always excluded.
+
+    Args:
+      include_paths: a list of path patterns using the same syntax as gitignore.
+        Changes affecting files matching these path patterns trigger the pipeline.
+      exclude_paths: a list of path patterns using the same syntax as gitignore.
+        Changes affecting files matching these path patterns do not trigger the pipeline.
 
-def get_pr_trigger(include_paths=None, exclude_paths=None):
-    paths_ex = ['docs/**', '*.md']
+    Returns:
+      Drone trigger.
+    """
+    paths_ex = ["docs/**", "*.md"]
     paths_in = []
     if include_paths:
         for path in include_paths:
@@ -146,11 +158,11 @@ def get_pr_trigger(include_paths=None, exclude_paths=None):
         for path in exclude_paths:
             paths_ex.extend([path])
     return {
-        'event': [
-            'pull_request',
+        "event": [
+            "pull_request",
         ],
-        'paths': {
-            'exclude': paths_ex,
-            'include': paths_in,
+        "paths": {
+            "exclude": paths_ex,
+            "include": paths_in,
         },
     }
diff --git a/scripts/drone/events/release.star b/scripts/drone/events/release.star
index c1983d7dee9..d9edb1c9bee 100644
--- a/scripts/drone/events/release.star
+++ b/scripts/drone/events/release.star
@@ -1,155 +1,137 @@
-load(
-    'scripts/drone/steps/lib.star',
-    'artifacts_page_step',
-    'benchmark_ldap_step',
-    'build_backend_step',
-    'build_docker_images_step',
-    'build_frontend_package_step',
-    'build_frontend_step',
-    'build_image',
-    'build_plugins_step',
-    'build_storybook_step',
-    'clone_enterprise_step',
-    'compile_build_cmd',
-    'copy_packages_for_docker_step',
-    'download_grabpl_step',
-    'e2e_tests_artifacts',
-    'e2e_tests_step',
-    'fetch_images_step',
-    'get_windows_steps',
-    'grafana_server_step',
-    'identify_runner_step',
-    'init_enterprise_step',
-    'lint_backend_step',
-    'lint_drone_step',
-    'lint_frontend_step',
-    'memcached_integration_tests_step',
-    'mysql_integration_tests_step',
-    'package_step',
-    'postgres_integration_tests_step',
-    'publish_grafanacom_step',
-    'publish_image',
-    'publish_images_step',
-    'publish_linux_packages_step',
-    'redis_integration_tests_step',
-    'store_storybook_step',
-    'test_backend_integration_step',
-    'test_backend_step',
-    'test_frontend_step',
-    'trigger_oss',
-    'upload_cdn_step',
-    'upload_packages_step',
-    'verify_gen_cue_step',
-    'verify_gen_jsonnet_step',
-    'wire_install_step',
-    'yarn_install_step',
-)
+"""
+This module returns all the pipelines used in the event of a release along with supporting functions.
+"""
 
 load(
-    'scripts/drone/services/services.star',
-    'integration_test_services',
-    'integration_test_services_volumes',
-    'ldap_service',
+    "scripts/drone/steps/lib.star",
+    "artifacts_page_step",
+    "build_backend_step",
+    "build_docker_images_step",
+    "build_frontend_package_step",
+    "build_frontend_step",
+    "build_image",
+    "build_plugins_step",
+    "build_storybook_step",
+    "clone_enterprise_step",
+    "compile_build_cmd",
+    "copy_packages_for_docker_step",
+    "download_grabpl_step",
+    "e2e_tests_artifacts",
+    "e2e_tests_step",
+    "fetch_images_step",
+    "get_windows_steps",
+    "grafana_server_step",
+    "identify_runner_step",
+    "init_enterprise_step",
+    "memcached_integration_tests_step",
+    "mysql_integration_tests_step",
+    "package_step",
+    "postgres_integration_tests_step",
+    "publish_grafanacom_step",
+    "publish_image",
+    "publish_images_step",
+    "publish_linux_packages_step",
+    "redis_integration_tests_step",
+    "store_storybook_step",
+    "trigger_oss",
+    "upload_cdn_step",
+    "upload_packages_step",
+    "verify_gen_cue_step",
+    "verify_gen_jsonnet_step",
+    "wire_install_step",
+    "yarn_install_step",
 )
-
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
-    'notify_pipeline',
-    'failure_template',
-    'drone_change_template',
-    'with_deps',
+    "scripts/drone/services/services.star",
+    "integration_test_services",
+    "integration_test_services_volumes",
 )
-
 load(
-    'scripts/drone/pipelines/test_frontend.star',
-    'test_frontend',
-    'test_frontend_enterprise',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
+    "with_deps",
 )
-
 load(
-    'scripts/drone/pipelines/test_backend.star',
-    'test_backend',
-    'test_backend_enterprise',
+    "scripts/drone/pipelines/test_frontend.star",
+    "test_frontend",
+    "test_frontend_enterprise",
 )
-
 load(
-    'scripts/drone/vault.star',
-    'from_secret',
-    'pull_secret',
-    'drone_token',
-    'prerelease_bucket',
+    "scripts/drone/pipelines/test_backend.star",
+    "test_backend",
+    "test_backend_enterprise",
 )
+load("scripts/drone/vault.star", "from_secret", "prerelease_bucket")
 
-ver_mode = 'release'
+ver_mode = "release"
 release_trigger = {
-    'event': {'exclude': ['promote']},
-    'ref': [
-        'refs/tags/v*',
+    "event": {"exclude": ["promote"]},
+    "ref": [
+        "refs/tags/v*",
     ],
 }
 
-
 def store_npm_packages_step():
     return {
-        'name': 'store-npm-packages',
-        'image': build_image,
-        'depends_on': [
-            'compile-build-cmd',
-            'build-frontend-packages',
+        "name": "store-npm-packages",
+        "image": build_image,
+        "depends_on": [
+            "compile-build-cmd",
+            "build-frontend-packages",
         ],
-        'environment': {
-            'GCP_KEY': from_secret('gcp_key'),
-            'PRERELEASE_BUCKET': from_secret(prerelease_bucket),
+        "environment": {
+            "GCP_KEY": from_secret("gcp_key"),
+            "PRERELEASE_BUCKET": from_secret(prerelease_bucket),
         },
-        'commands': ['./bin/build artifacts npm store --tag ${DRONE_TAG}'],
+        "commands": ["./bin/build artifacts npm store --tag ${DRONE_TAG}"],
     }
 
-
 def retrieve_npm_packages_step():
     return {
-        'name': 'retrieve-npm-packages',
-        'image': publish_image,
-        'depends_on': [
-            'compile-build-cmd',
-            'yarn-install',
+        "name": "retrieve-npm-packages",
+        "image": publish_image,
+        "depends_on": [
+            "compile-build-cmd",
+            "yarn-install",
         ],
-        'failure': 'ignore',
-        'environment': {
-            'GCP_KEY': from_secret('gcp_key'),
-            'PRERELEASE_BUCKET': from_secret(prerelease_bucket),
+        "failure": "ignore",
+        "environment": {
+            "GCP_KEY": from_secret("gcp_key"),
+            "PRERELEASE_BUCKET": from_secret(prerelease_bucket),
         },
-        'commands': ['./bin/build artifacts npm retrieve --tag ${DRONE_TAG}'],
+        "commands": ["./bin/build artifacts npm retrieve --tag ${DRONE_TAG}"],
     }
 
-
 def release_npm_packages_step():
     return {
-        'name': 'release-npm-packages',
-        'image': build_image,
-        'depends_on': [
-            'compile-build-cmd',
-            'retrieve-npm-packages',
+        "name": "release-npm-packages",
+        "image": build_image,
+        "depends_on": [
+            "compile-build-cmd",
+            "retrieve-npm-packages",
         ],
-        'failure': 'ignore',
-        'environment': {
-            'NPM_TOKEN': from_secret('npm_token'),
+        "failure": "ignore",
+        "environment": {
+            "NPM_TOKEN": from_secret("npm_token"),
         },
-        'commands': ['./bin/build artifacts npm release --tag ${DRONE_TAG}'],
+        "commands": ["./bin/build artifacts npm release --tag ${DRONE_TAG}"],
     }
 
+def oss_pipelines(ver_mode = ver_mode, trigger = release_trigger):
+    """Generates all pipelines used for Grafana OSS.
 
-def oss_pipelines(ver_mode=ver_mode, trigger=release_trigger):
-    if ver_mode == 'release':
-        committish = '${DRONE_TAG}'
-    elif ver_mode == 'release-branch':
-        committish = '${DRONE_BRANCH}'
-    else:
-        committish = '${DRONE_COMMIT}'
+    Args:
+      ver_mode: controls which steps are included in the pipeline.
+        Defaults to 'release'.
+      trigger: controls which events can trigger the pipeline execution.
+        Defaults to tag events for tags with a 'v' prefix.
 
-    environment = {'EDITION': 'oss'}
+    Returns:
+      List of Drone pipelines.
+    """
+    environment = {"EDITION": "oss"}
 
-    services = integration_test_services(edition='oss')
+    services = integration_test_services(edition = "oss")
     volumes = integration_test_services_volumes()
 
     init_steps = [
@@ -162,46 +144,50 @@ def oss_pipelines(ver_mode=ver_mode, trigger=release_trigger):
     ]
 
     build_steps = [
-        build_backend_step(edition='oss', ver_mode=ver_mode),
-        build_frontend_step(edition='oss', ver_mode=ver_mode),
-        build_frontend_package_step(edition='oss', ver_mode=ver_mode),
-        build_plugins_step(edition='oss', ver_mode=ver_mode),
-        package_step(edition='oss', ver_mode=ver_mode),
+        build_backend_step(edition = "oss", ver_mode = ver_mode),
+        build_frontend_step(edition = "oss", ver_mode = ver_mode),
+        build_frontend_package_step(edition = "oss", ver_mode = ver_mode),
+        build_plugins_step(edition = "oss", ver_mode = ver_mode),
+        package_step(edition = "oss", ver_mode = ver_mode),
         copy_packages_for_docker_step(),
-        build_docker_images_step(edition='oss', ver_mode=ver_mode, publish=True),
+        build_docker_images_step(edition = "oss", publish = True),
         build_docker_images_step(
-            edition='oss', ver_mode=ver_mode, publish=True, ubuntu=True
+            edition = "oss",
+            publish = True,
+            ubuntu = True,
         ),
-        grafana_server_step(edition='oss'),
-        e2e_tests_step('dashboards-suite', tries=3),
-        e2e_tests_step('smoke-tests-suite', tries=3),
-        e2e_tests_step('panels-suite', tries=3),
-        e2e_tests_step('various-suite', tries=3),
+        grafana_server_step(edition = "oss"),
+        e2e_tests_step("dashboards-suite", tries = 3),
+        e2e_tests_step("smoke-tests-suite", tries = 3),
+        e2e_tests_step("panels-suite", tries = 3),
+        e2e_tests_step("various-suite", tries = 3),
         e2e_tests_artifacts(),
-        build_storybook_step(ver_mode=ver_mode),
+        build_storybook_step(ver_mode = ver_mode),
     ]
 
     publish_steps = []
 
     if ver_mode in (
-        'release',
-        'release-branch',
+        "release",
+        "release-branch",
     ):
         publish_steps.extend(
             [
-                upload_cdn_step(edition='oss', ver_mode=ver_mode, trigger=trigger_oss),
+                upload_cdn_step(edition = "oss", ver_mode = ver_mode, trigger = trigger_oss),
                 upload_packages_step(
-                    edition='oss', ver_mode=ver_mode, trigger=trigger_oss
+                    edition = "oss",
+                    ver_mode = ver_mode,
+                    trigger = trigger_oss,
                 ),
-            ]
+            ],
         )
 
-    if ver_mode in ('release',):
+    if ver_mode in ("release",):
         publish_steps.extend(
             [
-                store_storybook_step(ver_mode=ver_mode),
+                store_storybook_step(ver_mode = ver_mode),
                 store_npm_packages_step(),
-            ]
+            ],
         )
 
     integration_test_steps = [
@@ -210,74 +196,84 @@ def oss_pipelines(ver_mode=ver_mode, trigger=release_trigger):
     ]
 
     windows_pipeline = pipeline(
-        name='{}-oss-windows'.format(ver_mode),
-        edition='oss',
-        trigger=trigger,
-        steps=get_windows_steps(edition='oss', ver_mode=ver_mode),
-        platform='windows',
-        depends_on=[
+        name = "{}-oss-windows".format(ver_mode),
+        edition = "oss",
+        trigger = trigger,
+        steps = get_windows_steps(edition = "oss", ver_mode = ver_mode),
+        platform = "windows",
+        depends_on = [
             # 'oss-build-e2e-publish-{}'.format(ver_mode),
-            '{}-oss-build-e2e-publish'.format(ver_mode),
-            '{}-oss-test-frontend'.format(ver_mode),
-            '{}-oss-test-backend'.format(ver_mode),
-            '{}-oss-integration-tests'.format(ver_mode),
+            "{}-oss-build-e2e-publish".format(ver_mode),
+            "{}-oss-test-frontend".format(ver_mode),
+            "{}-oss-test-backend".format(ver_mode),
+            "{}-oss-integration-tests".format(ver_mode),
         ],
-        environment=environment,
+        environment = environment,
     )
 
     pipelines = [
         pipeline(
-            name='{}-oss-build-e2e-publish'.format(ver_mode),
-            edition='oss',
-            trigger=trigger,
-            services=[],
-            steps=init_steps + build_steps + publish_steps,
-            environment=environment,
-            volumes=volumes,
+            name = "{}-oss-build-e2e-publish".format(ver_mode),
+            edition = "oss",
+            trigger = trigger,
+            services = [],
+            steps = init_steps + build_steps + publish_steps,
+            environment = environment,
+            volumes = volumes,
         ),
-        test_frontend(trigger, ver_mode, committish=committish),
-        test_backend(trigger, ver_mode, committish=committish),
+        test_frontend(trigger, ver_mode),
+        test_backend(trigger, ver_mode),
         pipeline(
-            name='{}-oss-integration-tests'.format(ver_mode),
-            edition='oss',
-            trigger=trigger,
-            services=services,
-            steps=[
-                download_grabpl_step(),
-                identify_runner_step(),
-                verify_gen_cue_step(),
-                verify_gen_jsonnet_step(),
-                wire_install_step(),
-            ]
-            + integration_test_steps,
-            environment=environment,
-            volumes=volumes,
+            name = "{}-oss-integration-tests".format(ver_mode),
+            edition = "oss",
+            trigger = trigger,
+            services = services,
+            steps = [
+                        download_grabpl_step(),
+                        identify_runner_step(),
+                        verify_gen_cue_step(),
+                        verify_gen_jsonnet_step(),
+                        wire_install_step(),
+                    ] +
+                    integration_test_steps,
+            environment = environment,
+            volumes = volumes,
         ),
         windows_pipeline,
     ]
 
     return pipelines
 
-
-def enterprise_pipelines(ver_mode=ver_mode, trigger=release_trigger):
-    if ver_mode == 'release':
-        committish = '${DRONE_TAG}'
-    elif ver_mode == 'release-branch':
-        committish = '${DRONE_BRANCH}'
+def enterprise_pipelines(ver_mode = ver_mode, trigger = release_trigger):
+    """Generates all pipelines used for Grafana Enterprise.
+
+    Args:
+      ver_mode: controls which steps are included in the pipeline.
+        Defaults to 'release'.
+      trigger: controls which events can trigger the pipeline execution.
+        Defaults to tag events for tags with a 'v' prefix.
+
+    Returns:
+      List of Drone pipelines.
+    """
+    if ver_mode == "release":
+        committish = "${DRONE_TAG}"
+    elif ver_mode == "release-branch":
+        committish = "${DRONE_BRANCH}"
     else:
-        committish = '${DRONE_COMMIT}'
+        committish = "${DRONE_COMMIT}"
 
-    environment = {'EDITION': 'enterprise'}
+    environment = {"EDITION": "enterprise"}
 
-    services = integration_test_services(edition='enterprise')
+    services = integration_test_services(edition = "enterprise")
     volumes = integration_test_services_volumes()
 
     init_steps = [
         download_grabpl_step(),
         identify_runner_step(),
-        clone_enterprise_step(committish=committish),
+        clone_enterprise_step(committish = committish),
         init_enterprise_step(ver_mode),
-        compile_build_cmd('enterprise'),
+        compile_build_cmd("enterprise"),
     ] + with_deps(
         [
             wire_install_step(),
@@ -286,50 +282,56 @@ def enterprise_pipelines(ver_mode=ver_mode, trigger=release_trigger):
             verify_gen_jsonnet_step(),
         ],
         [
-            'init-enterprise',
+            "init-enterprise",
         ],
     )
 
     build_steps = [
-        build_backend_step(edition='enterprise', ver_mode=ver_mode),
-        build_frontend_step(edition='enterprise', ver_mode=ver_mode),
-        build_frontend_package_step(edition='enterprise', ver_mode=ver_mode),
-        build_plugins_step(edition='enterprise', ver_mode=ver_mode),
+        build_backend_step(edition = "enterprise", ver_mode = ver_mode),
+        build_frontend_step(edition = "enterprise", ver_mode = ver_mode),
+        build_frontend_package_step(edition = "enterprise", ver_mode = ver_mode),
+        build_plugins_step(edition = "enterprise", ver_mode = ver_mode),
         package_step(
-            edition='enterprise',
-            ver_mode=ver_mode,
+            edition = "enterprise",
+            ver_mode = ver_mode,
         ),
         copy_packages_for_docker_step(),
-        build_docker_images_step(edition='enterprise', ver_mode=ver_mode, publish=True),
+        build_docker_images_step(edition = "enterprise", publish = True),
         build_docker_images_step(
-            edition='enterprise', ver_mode=ver_mode, publish=True, ubuntu=True
+            edition = "enterprise",
+            publish = True,
+            ubuntu = True,
         ),
-        grafana_server_step(edition='enterprise'),
-        e2e_tests_step('dashboards-suite', tries=3),
-        e2e_tests_step('smoke-tests-suite', tries=3),
-        e2e_tests_step('panels-suite', tries=3),
-        e2e_tests_step('various-suite', tries=3),
+        grafana_server_step(edition = "enterprise"),
+        e2e_tests_step("dashboards-suite", tries = 3),
+        e2e_tests_step("smoke-tests-suite", tries = 3),
+        e2e_tests_step("panels-suite", tries = 3),
+        e2e_tests_step("various-suite", tries = 3),
         e2e_tests_artifacts(),
     ]
 
     publish_steps = []
 
     if ver_mode in (
-        'release',
-        'release-branch',
+        "release",
+        "release-branch",
     ):
         upload_packages_enterprise = upload_packages_step(
-            edition='enterprise', ver_mode=ver_mode, trigger=trigger_oss
+            edition = "enterprise",
+            ver_mode = ver_mode,
+            trigger = trigger_oss,
         )
-        upload_packages_enterprise['depends_on'] = ['package']
+        upload_packages_enterprise["depends_on"] = ["package"]
 
         publish_steps.extend(
             [
                 upload_cdn_step(
-                    edition='enterprise', ver_mode=ver_mode, trigger=trigger_oss
+                    edition = "enterprise",
+                    ver_mode = ver_mode,
+                    trigger = trigger_oss,
                 ),
                 upload_packages_enterprise,
-            ]
+            ],
         )
 
     integration_test_steps = [
@@ -338,91 +340,103 @@ def enterprise_pipelines(ver_mode=ver_mode, trigger=release_trigger):
     ]
 
     windows_pipeline = pipeline(
-        name='{}-enterprise-windows'.format(ver_mode),
-        edition='enterprise',
-        trigger=trigger,
-        steps=get_windows_steps(edition='enterprise', ver_mode=ver_mode),
-        platform='windows',
-        depends_on=[
+        name = "{}-enterprise-windows".format(ver_mode),
+        edition = "enterprise",
+        trigger = trigger,
+        steps = get_windows_steps(edition = "enterprise", ver_mode = ver_mode),
+        platform = "windows",
+        depends_on = [
             # 'enterprise-build-e2e-publish-{}'.format(ver_mode),
-            '{}-enterprise-build-e2e-publish'.format(ver_mode),
-            '{}-enterprise-test-frontend'.format(ver_mode),
-            '{}-enterprise-test-backend'.format(ver_mode),
-            '{}-enterprise-integration-tests'.format(ver_mode),
+            "{}-enterprise-build-e2e-publish".format(ver_mode),
+            "{}-enterprise-test-frontend".format(ver_mode),
+            "{}-enterprise-test-backend".format(ver_mode),
+            "{}-enterprise-integration-tests".format(ver_mode),
         ],
-        environment=environment,
+        environment = environment,
     )
 
     pipelines = [
         pipeline(
-            name='{}-enterprise-build-e2e-publish'.format(ver_mode),
-            edition='enterprise',
-            trigger=trigger,
-            services=[],
-            steps=init_steps + build_steps + publish_steps,
-            environment=environment,
-            volumes=volumes,
+            name = "{}-enterprise-build-e2e-publish".format(ver_mode),
+            edition = "enterprise",
+            trigger = trigger,
+            services = [],
+            steps = init_steps + build_steps + publish_steps,
+            environment = environment,
+            volumes = volumes,
         ),
-        test_frontend_enterprise(trigger, ver_mode, committish=committish),
-        test_backend_enterprise(trigger, ver_mode, committish=committish),
+        test_frontend_enterprise(trigger, ver_mode, committish = committish),
+        test_backend_enterprise(trigger, ver_mode, committish = committish),
         pipeline(
-            name='{}-enterprise-integration-tests'.format(ver_mode),
-            edition='enterprise',
-            trigger=trigger,
-            services=services,
-            steps=[
-                download_grabpl_step(),
-                identify_runner_step(),
-                clone_enterprise_step(committish=committish),
-                init_enterprise_step(ver_mode),
-            ]
-            + with_deps(
-                [
-                    verify_gen_cue_step(),
-                    verify_gen_jsonnet_step(),
-                ],
-                [
-                    'init-enterprise',
-                ],
-            )
-            + [
-                wire_install_step(),
-            ]
-            + integration_test_steps
-            + [
-                redis_integration_tests_step(),
-                memcached_integration_tests_step(),
-            ],
-            environment=environment,
-            volumes=volumes,
+            name = "{}-enterprise-integration-tests".format(ver_mode),
+            edition = "enterprise",
+            trigger = trigger,
+            services = services,
+            steps = [
+                        download_grabpl_step(),
+                        identify_runner_step(),
+                        clone_enterprise_step(committish = committish),
+                        init_enterprise_step(ver_mode),
+                    ] +
+                    with_deps(
+                        [
+                            verify_gen_cue_step(),
+                            verify_gen_jsonnet_step(),
+                        ],
+                        [
+                            "init-enterprise",
+                        ],
+                    ) +
+                    [
+                        wire_install_step(),
+                    ] +
+                    integration_test_steps +
+                    [
+                        redis_integration_tests_step(),
+                        memcached_integration_tests_step(),
+                    ],
+            environment = environment,
+            volumes = volumes,
         ),
         windows_pipeline,
     ]
 
     return pipelines
 
-
-def enterprise2_pipelines(prefix='', ver_mode=ver_mode, trigger=release_trigger):
-    if ver_mode == 'release':
-        committish = '${DRONE_TAG}'
-    elif ver_mode == 'release-branch':
-        committish = '${DRONE_BRANCH}'
+def enterprise2_pipelines(prefix = "", ver_mode = ver_mode, trigger = release_trigger):
+    """Generate the next generation of pipelines for Grafana Enterprise.
+
+    Args:
+      prefix: a prefix for the pipeline name used to differentiate multiple instances of
+        the same pipeline.
+        Defaults to ''.
+      ver_mode: controls which steps are included in the pipeline.
+        Defaults to 'release'.
+      trigger: controls which events can trigger the pipeline execution.
+        Defaults to tag events for tags with a 'v' prefix.
+
+    Returns:
+      List of Drone pipelines.
+    """
+    if ver_mode == "release":
+        committish = "${DRONE_TAG}"
+    elif ver_mode == "release-branch":
+        committish = "${DRONE_BRANCH}"
     else:
-        committish = '${DRONE_COMMIT}'
+        committish = "${DRONE_COMMIT}"
 
     environment = {
-        'EDITION': 'enterprise2',
+        "EDITION": "enterprise2",
     }
 
-    services = integration_test_services(edition='enterprise')
     volumes = integration_test_services_volumes()
 
     init_steps = [
         download_grabpl_step(),
         identify_runner_step(),
-        clone_enterprise_step(committish=committish),
+        clone_enterprise_step(committish = committish),
         init_enterprise_step(ver_mode),
-        compile_build_cmd('enterprise'),
+        compile_build_cmd("enterprise"),
     ] + with_deps(
         [
             wire_install_step(),
@@ -430,104 +444,107 @@ def enterprise2_pipelines(prefix='', ver_mode=ver_mode, trigger=release_trigger)
             verify_gen_cue_step(),
         ],
         [
-            'init-enterprise',
+            "init-enterprise",
         ],
     )
 
     build_steps = [
-        build_frontend_step(edition='enterprise', ver_mode=ver_mode),
-        build_frontend_package_step(edition='enterprise', ver_mode=ver_mode),
-        build_plugins_step(edition='enterprise', ver_mode=ver_mode),
+        build_frontend_step(edition = "enterprise", ver_mode = ver_mode),
+        build_frontend_package_step(edition = "enterprise", ver_mode = ver_mode),
+        build_plugins_step(edition = "enterprise", ver_mode = ver_mode),
         build_backend_step(
-            edition='enterprise2', ver_mode=ver_mode, variants=['linux-amd64']
+            edition = "enterprise2",
+            ver_mode = ver_mode,
+            variants = ["linux-amd64"],
         ),
     ]
 
-    fetch_images = fetch_images_step('enterprise2')
+    fetch_images = fetch_images_step("enterprise2")
     fetch_images.update(
-        {'depends_on': ['build-docker-images', 'build-docker-images-ubuntu']}
+        {"depends_on": ["build-docker-images", "build-docker-images-ubuntu"]},
     )
 
-    upload_cdn = upload_cdn_step(edition='enterprise2', ver_mode=ver_mode)
-    upload_cdn['environment'].update(
-        {'ENTERPRISE2_CDN_PATH': from_secret('enterprise2-cdn-path')}
+    upload_cdn = upload_cdn_step(edition = "enterprise2", ver_mode = ver_mode)
+    upload_cdn["environment"].update(
+        {"ENTERPRISE2_CDN_PATH": from_secret("enterprise2-cdn-path")},
     )
 
     build_steps.extend(
         [
             package_step(
-                edition='enterprise2',
-                ver_mode=ver_mode,
-                variants=['linux-amd64'],
+                edition = "enterprise2",
+                ver_mode = ver_mode,
+                variants = ["linux-amd64"],
             ),
             upload_cdn,
-            copy_packages_for_docker_step(edition='enterprise2'),
+            copy_packages_for_docker_step(edition = "enterprise2"),
             build_docker_images_step(
-                edition='enterprise2', ver_mode=ver_mode, publish=True
+                edition = "enterprise2",
+                publish = True,
             ),
             build_docker_images_step(
-                edition='enterprise2', ver_mode=ver_mode, publish=True, ubuntu=True
+                edition = "enterprise2",
+                publish = True,
+                ubuntu = True,
             ),
             fetch_images,
             publish_images_step(
-                'enterprise2',
-                'release',
-                mode='enterprise2',
-                docker_repo='${{DOCKER_ENTERPRISE2_REPO}}',
+                "enterprise2",
+                "release",
+                mode = "enterprise2",
+                docker_repo = "${{DOCKER_ENTERPRISE2_REPO}}",
             ),
-        ]
+        ],
     )
 
     publish_steps = []
 
     if ver_mode in (
-        'release',
-        'release-branch',
+        "release",
+        "release-branch",
     ):
-        step = upload_packages_step(edition='enterprise2', ver_mode=ver_mode)
-        step['depends_on'] = ['package-enterprise2']
+        step = upload_packages_step(edition = "enterprise2", ver_mode = ver_mode)
+        step["depends_on"] = ["package-enterprise2"]
 
         publish_steps.append(step)
 
     pipelines = [
         pipeline(
-            name='{}{}-enterprise2-build-e2e-publish'.format(prefix, ver_mode),
-            edition='enterprise',
-            trigger=trigger,
-            services=[],
-            steps=init_steps + build_steps + publish_steps,
-            volumes=volumes,
-            environment=environment,
+            name = "{}{}-enterprise2-build-e2e-publish".format(prefix, ver_mode),
+            edition = "enterprise",
+            trigger = trigger,
+            services = [],
+            steps = init_steps + build_steps + publish_steps,
+            volumes = volumes,
+            environment = environment,
         ),
     ]
 
     return pipelines
 
-
 def publish_artifacts_step(mode):
-    security = ''
-    if mode == 'security':
-        security = '--security '
+    security = ""
+    if mode == "security":
+        security = "--security "
     return {
-        'name': 'publish-artifacts',
-        'image': publish_image,
-        'environment': {
-            'GCP_KEY': from_secret('gcp_key'),
-            'PRERELEASE_BUCKET': from_secret('prerelease_bucket'),
+        "name": "publish-artifacts",
+        "image": publish_image,
+        "environment": {
+            "GCP_KEY": from_secret("gcp_key"),
+            "PRERELEASE_BUCKET": from_secret("prerelease_bucket"),
         },
-        'commands': [
-            './bin/grabpl artifacts publish {}--tag $${{DRONE_TAG}} --src-bucket $${{PRERELEASE_BUCKET}}'.format(
-                security
-            )
+        "commands": [
+            "./bin/grabpl artifacts publish {}--tag $${{DRONE_TAG}} --src-bucket $${{PRERELEASE_BUCKET}}".format(
+                security,
+            ),
         ],
-        'depends_on': ['grabpl'],
+        "depends_on": ["grabpl"],
     }
 
-
 def publish_artifacts_pipelines(mode):
     trigger = {
-        'event': ['promote'],
-        'target': [mode],
+        "event": ["promote"],
+        "target": [mode],
     }
     steps = [
         download_grabpl_step(),
@@ -536,65 +553,69 @@ def publish_artifacts_pipelines(mode):
 
     return [
         pipeline(
-            name='publish-artifacts-{}'.format(mode),
-            trigger=trigger,
-            steps=steps,
-            edition="all",
-            environment={'EDITION': 'all'},
-        )
+            name = "publish-artifacts-{}".format(mode),
+            trigger = trigger,
+            steps = steps,
+            edition = "all",
+            environment = {"EDITION": "all"},
+        ),
     ]
 
-
 def publish_packages_pipeline():
+    """Generates pipelines used for publishing packages for both OSS and enterprise.
+
+    Returns:
+      List of Drone pipelines. One for each of OSS and enterprise packages.
+    """
+
     trigger = {
-        'event': ['promote'],
-        'target': ['public'],
+        "event": ["promote"],
+        "target": ["public"],
     }
     oss_steps = [
         download_grabpl_step(),
         compile_build_cmd(),
-        publish_linux_packages_step(edition='oss', package_manager='deb'),
-        publish_linux_packages_step(edition='oss', package_manager='rpm'),
-        publish_grafanacom_step(edition='oss', ver_mode='release'),
+        publish_linux_packages_step(edition = "oss", package_manager = "deb"),
+        publish_linux_packages_step(edition = "oss", package_manager = "rpm"),
+        publish_grafanacom_step(edition = "oss", ver_mode = "release"),
     ]
 
     enterprise_steps = [
         download_grabpl_step(),
         compile_build_cmd(),
-        publish_linux_packages_step(edition='enterprise', package_manager='deb'),
-        publish_linux_packages_step(edition='enterprise', package_manager='rpm'),
-        publish_grafanacom_step(edition='enterprise', ver_mode='release'),
+        publish_linux_packages_step(edition = "enterprise", package_manager = "deb"),
+        publish_linux_packages_step(edition = "enterprise", package_manager = "rpm"),
+        publish_grafanacom_step(edition = "enterprise", ver_mode = "release"),
     ]
     deps = [
-        'publish-artifacts-public',
-        'publish-docker-oss-public',
-        'publish-docker-enterprise-public',
+        "publish-artifacts-public",
+        "publish-docker-oss-public",
+        "publish-docker-enterprise-public",
     ]
 
     return [
         pipeline(
-            name='publish-packages-oss',
-            trigger=trigger,
-            steps=oss_steps,
-            edition="all",
-            depends_on=deps,
-            environment={'EDITION': 'oss'},
+            name = "publish-packages-oss",
+            trigger = trigger,
+            steps = oss_steps,
+            edition = "all",
+            depends_on = deps,
+            environment = {"EDITION": "oss"},
         ),
         pipeline(
-            name='publish-packages-enterprise',
-            trigger=trigger,
-            steps=enterprise_steps,
-            edition="all",
-            depends_on=deps,
-            environment={'EDITION': 'enterprise'},
+            name = "publish-packages-enterprise",
+            trigger = trigger,
+            steps = enterprise_steps,
+            edition = "all",
+            depends_on = deps,
+            environment = {"EDITION": "enterprise"},
         ),
     ]
 
-
 def publish_npm_pipelines():
     trigger = {
-        'event': ['promote'],
-        'target': ['public'],
+        "event": ["promote"],
+        "target": ["public"],
     }
     steps = [
         compile_build_cmd(),
@@ -605,26 +626,25 @@ def publish_npm_pipelines():
 
     return [
         pipeline(
-            name='publish-npm-packages-public',
-            trigger=trigger,
-            steps=steps,
-            edition="all",
-            environment={'EDITION': 'all'},
-        )
+            name = "publish-npm-packages-public",
+            trigger = trigger,
+            steps = steps,
+            edition = "all",
+            environment = {"EDITION": "all"},
+        ),
     ]
 
-
 def artifacts_page_pipeline():
     trigger = {
-        'event': ['promote'],
-        'target': 'security',
+        "event": ["promote"],
+        "target": "security",
     }
     return [
         pipeline(
-            name='publish-artifacts-page',
-            trigger=trigger,
-            steps=[download_grabpl_step(), artifacts_page_step()],
-            edition="all",
-            environment={'EDITION': 'all'},
-        )
+            name = "publish-artifacts-page",
+            trigger = trigger,
+            steps = [download_grabpl_step(), artifacts_page_step()],
+            edition = "all",
+            environment = {"EDITION": "all"},
+        ),
     ]
diff --git a/scripts/drone/pipelines/aws_marketplace.star b/scripts/drone/pipelines/aws_marketplace.star
index 299bc15b845..bbcc5b16bd0 100644
--- a/scripts/drone/pipelines/aws_marketplace.star
+++ b/scripts/drone/pipelines/aws_marketplace.star
@@ -1,38 +1,43 @@
+"""
+This module contains steps and pipelines publishing to AWS Marketplace.
+"""
+
 load(
-    'scripts/drone/steps/lib.star',
-    'download_grabpl_step',
-    'publish_images_step',
-    'compile_build_cmd',
-    'fetch_images_step',
-    'publish_image',
+    "scripts/drone/steps/lib.star",
+    "compile_build_cmd",
+    "fetch_images_step",
+    "publish_image",
 )
-
-load('scripts/drone/vault.star', 'from_secret')
-
+load("scripts/drone/vault.star", "from_secret")
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
 )
 
 def publish_aws_marketplace_step():
     return {
-        'name': 'publish-aws-marketplace',
-        'image': publish_image,
-        'commands': ['./bin/build publish aws --image grafana/grafana-enterprise --repo grafana-labs/grafanaenterprise --product 422b46fb-bea6-4f27-8bcc-832117bd627e'],
-        'depends_on': ['fetch-images-enterprise'],
-        'environment': {
-            'AWS_REGION': from_secret('aws_region'),
-            'AWS_ACCESS_KEY_ID': from_secret('aws_access_key_id'),
-            'AWS_SECRET_ACCESS_KEY': from_secret('aws_secret_access_key'),
+        "name": "publish-aws-marketplace",
+        "image": publish_image,
+        "commands": ["./bin/build publish aws --image grafana/grafana-enterprise --repo grafana-labs/grafanaenterprise --product 422b46fb-bea6-4f27-8bcc-832117bd627e"],
+        "depends_on": ["fetch-images-enterprise"],
+        "environment": {
+            "AWS_REGION": from_secret("aws_region"),
+            "AWS_ACCESS_KEY_ID": from_secret("aws_access_key_id"),
+            "AWS_SECRET_ACCESS_KEY": from_secret("aws_secret_access_key"),
         },
-        'volumes': [{'name': 'docker', 'path': '/var/run/docker.sock'}],
+        "volumes": [{"name": "docker", "path": "/var/run/docker.sock"}],
     }
 
 def publish_aws_marketplace_pipeline(mode):
     trigger = {
-        'event': ['promote'],
-        'target': [mode],
+        "event": ["promote"],
+        "target": [mode],
     }
     return [pipeline(
-        name='publish-aws-marketplace-{}'.format(mode), trigger=trigger, steps=[compile_build_cmd(), fetch_images_step('enterprise'), publish_aws_marketplace_step()], edition="", depends_on = ['publish-docker-enterprise-public'], environment = {'EDITION': 'enterprise2'}
-    ),]
+        name = "publish-aws-marketplace-{}".format(mode),
+        trigger = trigger,
+        steps = [compile_build_cmd(), fetch_images_step("enterprise"), publish_aws_marketplace_step()],
+        edition = "",
+        depends_on = ["publish-docker-enterprise-public"],
+        environment = {"EDITION": "enterprise2"},
+    )]
diff --git a/scripts/drone/pipelines/build.star b/scripts/drone/pipelines/build.star
index 2b4512daed8..2c03aa2b0ed 100644
--- a/scripts/drone/pipelines/build.star
+++ b/scripts/drone/pipelines/build.star
@@ -1,52 +1,55 @@
+"""This module contains the comprehensive build pipeline."""
+
 load(
-    'scripts/drone/steps/lib.star',
-    'benchmark_ldap_step',
-    'betterer_frontend_step',
-    'build_backend_step',
-    'build_docker_images_step',
-    'build_frontend_package_step',
-    'build_frontend_step',
-    'build_image',
-    'build_plugins_step',
-    'build_storybook_step',
-    'cloud_plugins_e2e_tests_step',
-    'compile_build_cmd',
-    'copy_packages_for_docker_step',
-    'download_grabpl_step',
-    'e2e_tests_artifacts',
-    'e2e_tests_step',
-    'enterprise_downstream_step',
-    'frontend_metrics_step',
-    'grafana_server_step',
-    'identify_runner_step',
-    'memcached_integration_tests_step',
-    'mysql_integration_tests_step',
-    'package_step',
-    'postgres_integration_tests_step',
-    'publish_images_step',
-    'redis_integration_tests_step',
-    'release_canary_npm_packages_step',
-    'store_storybook_step',
-    'test_a11y_frontend_step',
-    'trigger_oss',
-    'trigger_test_release',
-    'upload_cdn_step',
-    'upload_packages_step',
-    'verify_gen_cue_step',
-    'verify_gen_jsonnet_step',
-    'wire_install_step',
-    'yarn_install_step',
+    "scripts/drone/steps/lib.star",
+    "build_backend_step",
+    "build_docker_images_step",
+    "build_frontend_package_step",
+    "build_frontend_step",
+    "build_plugins_step",
+    "build_storybook_step",
+    "cloud_plugins_e2e_tests_step",
+    "compile_build_cmd",
+    "copy_packages_for_docker_step",
+    "download_grabpl_step",
+    "e2e_tests_artifacts",
+    "e2e_tests_step",
+    "enterprise_downstream_step",
+    "frontend_metrics_step",
+    "grafana_server_step",
+    "identify_runner_step",
+    "package_step",
+    "publish_images_step",
+    "release_canary_npm_packages_step",
+    "store_storybook_step",
+    "test_a11y_frontend_step",
+    "trigger_oss",
+    "trigger_test_release",
+    "upload_cdn_step",
+    "upload_packages_step",
+    "verify_gen_cue_step",
+    "verify_gen_jsonnet_step",
+    "wire_install_step",
+    "yarn_install_step",
 )
-
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
 )
 
-
+# @unused
 def build_e2e(trigger, ver_mode):
-    edition = 'oss'
-    environment = {'EDITION': edition}
+    """Perform e2e building, testing, and publishing."
+
+    Args:
+      trigger: controls which events can trigger the pipeline execution.
+      ver_mode: used in the naming of the pipeline.
+
+    Returns:
+      Drone pipeline.
+    """
+    edition = "oss"
+    environment = {"EDITION": edition}
     init_steps = [
         identify_runner_step(),
         download_grabpl_step(),
@@ -60,101 +63,107 @@ def build_e2e(trigger, ver_mode):
     build_steps = []
     variants = None
 
-    if ver_mode == 'pr':
+    if ver_mode == "pr":
         build_steps.extend(
             [
                 trigger_test_release(),
-                enterprise_downstream_step(ver_mode=ver_mode),
-            ]
+                enterprise_downstream_step(ver_mode = ver_mode),
+            ],
         )
 
         variants = [
-            'linux-amd64',
-            'linux-amd64-musl',
-            'darwin-amd64',
-            'windows-amd64',
+            "linux-amd64",
+            "linux-amd64-musl",
+            "darwin-amd64",
+            "windows-amd64",
         ]
 
     build_steps.extend(
         [
-            build_backend_step(edition=edition, ver_mode=ver_mode),
-            build_frontend_step(edition=edition, ver_mode=ver_mode),
-            build_frontend_package_step(edition=edition, ver_mode=ver_mode),
-            build_plugins_step(edition=edition, ver_mode=ver_mode),
-            package_step(edition=edition, ver_mode=ver_mode, variants=variants),
-            grafana_server_step(edition=edition),
-            e2e_tests_step('dashboards-suite'),
-            e2e_tests_step('smoke-tests-suite'),
-            e2e_tests_step('panels-suite'),
-            e2e_tests_step('various-suite'),
+            build_backend_step(edition = edition, ver_mode = ver_mode),
+            build_frontend_step(edition = edition, ver_mode = ver_mode),
+            build_frontend_package_step(edition = edition, ver_mode = ver_mode),
+            build_plugins_step(edition = edition, ver_mode = ver_mode),
+            package_step(edition = edition, variants = variants, ver_mode = ver_mode),
+            grafana_server_step(edition = edition),
+            e2e_tests_step("dashboards-suite"),
+            e2e_tests_step("smoke-tests-suite"),
+            e2e_tests_step("panels-suite"),
+            e2e_tests_step("various-suite"),
             cloud_plugins_e2e_tests_step(
-                'cloud-plugins-suite',
-                cloud='azure',
-                trigger=trigger_oss,
+                "cloud-plugins-suite",
+                cloud = "azure",
+                trigger = trigger_oss,
             ),
             e2e_tests_artifacts(),
-            build_storybook_step(ver_mode=ver_mode),
+            build_storybook_step(ver_mode = ver_mode),
             copy_packages_for_docker_step(),
-            test_a11y_frontend_step(ver_mode=ver_mode),
-        ]
+            test_a11y_frontend_step(ver_mode = ver_mode),
+        ],
     )
 
-    if ver_mode == 'main':
+    if ver_mode == "main":
         build_steps.extend(
             [
-                store_storybook_step(ver_mode=ver_mode, trigger=trigger_oss),
-                frontend_metrics_step(trigger=trigger_oss),
+                store_storybook_step(trigger = trigger_oss, ver_mode = ver_mode),
+                frontend_metrics_step(trigger = trigger_oss),
                 build_docker_images_step(
-                    edition=edition, ver_mode=ver_mode, publish=False
+                    edition = edition,
+                    publish = False,
                 ),
                 build_docker_images_step(
-                    edition=edition, ver_mode=ver_mode, publish=False, ubuntu=True
+                    edition = edition,
+                    publish = False,
+                    ubuntu = True,
                 ),
                 publish_images_step(
-                    edition=edition,
-                    ver_mode=ver_mode,
-                    mode='',
-                    docker_repo='grafana',
-                    trigger=trigger_oss,
+                    docker_repo = "grafana",
+                    edition = edition,
+                    mode = "",
+                    trigger = trigger_oss,
+                    ver_mode = ver_mode,
                 ),
                 publish_images_step(
-                    edition=edition,
-                    ver_mode=ver_mode,
-                    mode='',
-                    docker_repo='grafana-oss',
-                    trigger=trigger_oss,
+                    docker_repo = "grafana-oss",
+                    edition = edition,
+                    mode = "",
+                    trigger = trigger_oss,
+                    ver_mode = ver_mode,
                 ),
-                release_canary_npm_packages_step(trigger=trigger_oss),
+                release_canary_npm_packages_step(trigger = trigger_oss),
                 upload_packages_step(
-                    edition=edition, ver_mode=ver_mode, trigger=trigger_oss
+                    edition = edition,
+                    trigger = trigger_oss,
+                    ver_mode = ver_mode,
                 ),
                 upload_cdn_step(
-                    edition=edition, ver_mode=ver_mode, trigger=trigger_oss
+                    edition = edition,
+                    trigger = trigger_oss,
+                    ver_mode = ver_mode,
                 ),
-            ]
+            ],
         )
-    elif ver_mode == 'pr':
+    elif ver_mode == "pr":
         build_steps.extend(
             [
                 build_docker_images_step(
-                    edition=edition,
-                    ver_mode=ver_mode,
-                    archs=[
-                        'amd64',
+                    archs = [
+                        "amd64",
                     ],
-                )
-            ]
+                    edition = edition,
+                ),
+            ],
         )
 
-    publish_suffix = ''
-    if ver_mode == 'main':
-        publish_suffix = '-publish'
+    publish_suffix = ""
+    if ver_mode == "main":
+        publish_suffix = "-publish"
 
     return pipeline(
-        name='{}-build-e2e{}'.format(ver_mode, publish_suffix),
-        edition="oss",
-        trigger=trigger,
-        services=[],
-        steps=init_steps + build_steps,
-        environment=environment,
+        name = "{}-build-e2e{}".format(ver_mode, publish_suffix),
+        edition = "oss",
+        environment = environment,
+        services = [],
+        steps = init_steps + build_steps,
+        trigger = trigger,
     )
diff --git a/scripts/drone/pipelines/docs.star b/scripts/drone/pipelines/docs.star
index 031efa946ce..cba222fd2ff 100644
--- a/scripts/drone/pipelines/docs.star
+++ b/scripts/drone/pipelines/docs.star
@@ -1,39 +1,32 @@
-load(
-    'scripts/drone/steps/lib.star',
-    'build_image',
-    'yarn_install_step',
-    'identify_runner_step',
-    'download_grabpl_step',
-    'lint_frontend_step',
-    'codespell_step',
-    'test_frontend_step',
-    'build_storybook_step',
-    'build_docs_website_step',
-)
+"""
+This module returns all the pipelines used in the event of documentation changes along with supporting functions.
+"""
 
 load(
-    'scripts/drone/services/services.star',
-    'integration_test_services',
-    'ldap_service',
+    "scripts/drone/steps/lib.star",
+    "build_docs_website_step",
+    "build_image",
+    "codespell_step",
+    "download_grabpl_step",
+    "identify_runner_step",
+    "yarn_install_step",
 )
-
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
 )
 
 docs_paths = {
-    'include': [
-        '*.md',
-        'docs/**',
-        'packages/**/*.md',
-        'latest.json',
+    "include": [
+        "*.md",
+        "docs/**",
+        "packages/**/*.md",
+        "latest.json",
     ],
 }
 
-
 def docs_pipelines(ver_mode, trigger):
-    environment = {'EDITION': 'oss'}
+    environment = {"EDITION": "oss"}
     steps = [
         download_grabpl_step(),
         identify_runner_step(),
@@ -44,45 +37,42 @@ def docs_pipelines(ver_mode, trigger):
     ]
 
     return pipeline(
-        name='{}-docs'.format(ver_mode),
-        edition='oss',
-        trigger=trigger,
-        services=[],
-        steps=steps,
-        environment=environment,
+        name = "{}-docs".format(ver_mode),
+        edition = "oss",
+        trigger = trigger,
+        services = [],
+        steps = steps,
+        environment = environment,
     )
 
-
 def lint_docs():
     return {
-        'name': 'lint-docs',
-        'image': build_image,
-        'depends_on': [
-            'yarn-install',
+        "name": "lint-docs",
+        "image": build_image,
+        "depends_on": [
+            "yarn-install",
         ],
-        'environment': {
-            'NODE_OPTIONS': '--max_old_space_size=8192',
+        "environment": {
+            "NODE_OPTIONS": "--max_old_space_size=8192",
         },
-        'commands': [
-            'yarn run prettier:checkDocs',
+        "commands": [
+            "yarn run prettier:checkDocs",
         ],
     }
 
-
 def trigger_docs_main():
     return {
-        'branch': 'main',
-        'event': [
-            'push',
+        "branch": "main",
+        "event": [
+            "push",
         ],
-        'paths': docs_paths,
+        "paths": docs_paths,
     }
 
-
 def trigger_docs_pr():
     return {
-        'event': [
-            'pull_request',
+        "event": [
+            "pull_request",
         ],
-        'paths': docs_paths,
+        "paths": docs_paths,
     }
diff --git a/scripts/drone/pipelines/github.star b/scripts/drone/pipelines/github.star
index 06096327295..d3ccb6b30c9 100644
--- a/scripts/drone/pipelines/github.star
+++ b/scripts/drone/pipelines/github.star
@@ -1,36 +1,40 @@
+"""
+This module contains steps and pipelines relating to GitHub.
+"""
+
 load(
-    'scripts/drone/steps/lib.star',
-    'download_grabpl_step',
-    'publish_images_step',
-    'compile_build_cmd',
-    'fetch_images_step',
-    'publish_image',
+    "scripts/drone/steps/lib.star",
+    "compile_build_cmd",
+    "fetch_images_step",
+    "publish_image",
 )
-
-load('scripts/drone/vault.star', 'from_secret')
-
+load("scripts/drone/vault.star", "from_secret")
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
 )
 
 def publish_github_step():
     return {
-        'name': 'publish-github',
-        'image': publish_image,
-        'commands': ['./bin/build publish github --repo $${GH_REGISTRY} --create'],
-        'depends_on': ['fetch-images-enterprise2'],
-        'environment': {
-            'GH_TOKEN': from_secret('github_token'),
-            'GH_REGISTRY': from_secret('gh_registry'),
+        "name": "publish-github",
+        "image": publish_image,
+        "commands": ["./bin/build publish github --repo $${GH_REGISTRY} --create"],
+        "depends_on": ["fetch-images-enterprise2"],
+        "environment": {
+            "GH_TOKEN": from_secret("github_token"),
+            "GH_REGISTRY": from_secret("gh_registry"),
         },
     }
 
 def publish_github_pipeline(mode):
     trigger = {
-        'event': ['promote'],
-        'target': [mode],
+        "event": ["promote"],
+        "target": [mode],
     }
     return [pipeline(
-        name='publish-github-{}'.format(mode), trigger=trigger, steps=[compile_build_cmd(), fetch_images_step('enterprise2'), publish_github_step()], edition="", environment = {'EDITION': 'enterprise2'}
-    ),]
+        name = "publish-github-{}".format(mode),
+        trigger = trigger,
+        steps = [compile_build_cmd(), fetch_images_step("enterprise2"), publish_github_step()],
+        edition = "",
+        environment = {"EDITION": "enterprise2"},
+    )]
diff --git a/scripts/drone/pipelines/integration_tests.star b/scripts/drone/pipelines/integration_tests.star
index efb810d58ab..a5ceb011d78 100644
--- a/scripts/drone/pipelines/integration_tests.star
+++ b/scripts/drone/pipelines/integration_tests.star
@@ -1,32 +1,41 @@
+"""
+This module returns the pipeline used for integration tests.
+"""
+
 load(
-    'scripts/drone/steps/lib.star',
-    'compile_build_cmd',
-    'download_grabpl_step',
-    'identify_runner_step',
-    'verify_gen_cue_step',
-    'verify_gen_jsonnet_step',
-    'wire_install_step',
-    'postgres_integration_tests_step',
-    'mysql_integration_tests_step',
+    "scripts/drone/steps/lib.star",
+    "compile_build_cmd",
+    "download_grabpl_step",
+    "identify_runner_step",
+    "mysql_integration_tests_step",
+    "postgres_integration_tests_step",
+    "verify_gen_cue_step",
+    "verify_gen_jsonnet_step",
+    "wire_install_step",
 )
-
 load(
-    'scripts/drone/services/services.star',
-    'integration_test_services',
-    'integration_test_services_volumes',
-    'ldap_service',
+    "scripts/drone/services/services.star",
+    "integration_test_services",
+    "integration_test_services_volumes",
 )
-
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
 )
 
-
 def integration_tests(trigger, prefix):
-    environment = {'EDITION': 'oss'}
+    """Generate a pipeline for integration tests.
+
+    Args:
+      trigger: controls which events can trigger the pipeline execution.
+      prefix: used in the naming of the pipeline.
+
+    Returns:
+      Drone pipeline.
+    """
+    environment = {"EDITION": "oss"}
 
-    services = integration_test_services(edition="oss")
+    services = integration_test_services(edition = "oss")
     volumes = integration_test_services_volumes()
 
     init_steps = [
@@ -44,11 +53,11 @@ def integration_tests(trigger, prefix):
     ]
 
     return pipeline(
-        name='{}-integration-tests'.format(prefix),
-        edition='oss',
-        trigger=trigger,
-        environment=environment,
-        services=services,
-        volumes=volumes,
-        steps=init_steps + test_steps,
+        name = "{}-integration-tests".format(prefix),
+        edition = "oss",
+        trigger = trigger,
+        environment = environment,
+        services = services,
+        volumes = volumes,
+        steps = init_steps + test_steps,
     )
diff --git a/scripts/drone/pipelines/lint_backend.star b/scripts/drone/pipelines/lint_backend.star
index 1efbc24fb7e..73788b1e800 100644
--- a/scripts/drone/pipelines/lint_backend.star
+++ b/scripts/drone/pipelines/lint_backend.star
@@ -1,23 +1,34 @@
+"""
+This module returns the pipeline used for linting backend code.
+"""
+
 load(
-    'scripts/drone/steps/lib.star',
-    'identify_runner_step',
-    'wire_install_step',
-    'lint_backend_step',
-    'lint_drone_step',
-    'compile_build_cmd',
+    "scripts/drone/steps/lib.star",
+    "compile_build_cmd",
+    "identify_runner_step",
+    "lint_backend_step",
+    "lint_drone_step",
+    "wire_install_step",
 )
-
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
 )
 
-
 def lint_backend_pipeline(trigger, ver_mode):
-    environment = {'EDITION': 'oss'}
+    """Generates the pipelines used linting backend code.
+
+    Args:
+      trigger: controls which events can trigger the pipeline execution.
+      ver_mode: used in the naming of the pipeline.
+
+    Returns:
+      Drone pipeline.
+    """
+    environment = {"EDITION": "oss"}
 
     wire_step = wire_install_step()
-    wire_step.update({'depends_on': []})
+    wire_step.update({"depends_on": []})
 
     init_steps = [
         identify_runner_step(),
@@ -29,14 +40,14 @@ def lint_backend_pipeline(trigger, ver_mode):
         lint_backend_step(),
     ]
 
-    if ver_mode == 'main':
+    if ver_mode == "main":
         test_steps.append(lint_drone_step())
 
     return pipeline(
-        name='{}-lint-backend'.format(ver_mode),
-        edition="oss",
-        trigger=trigger,
-        services=[],
-        steps=init_steps + test_steps,
-        environment=environment,
+        name = "{}-lint-backend".format(ver_mode),
+        edition = "oss",
+        trigger = trigger,
+        services = [],
+        steps = init_steps + test_steps,
+        environment = environment,
     )
diff --git a/scripts/drone/pipelines/lint_frontend.star b/scripts/drone/pipelines/lint_frontend.star
index dd3947aac8d..7bdb542982f 100644
--- a/scripts/drone/pipelines/lint_frontend.star
+++ b/scripts/drone/pipelines/lint_frontend.star
@@ -1,18 +1,29 @@
+"""
+This module returns the pipeline used for linting frontend code.
+"""
+
 load(
-    'scripts/drone/steps/lib.star',
-    'identify_runner_step',
-    'yarn_install_step',
-    'lint_frontend_step',
+    "scripts/drone/steps/lib.star",
+    "identify_runner_step",
+    "lint_frontend_step",
+    "yarn_install_step",
 )
-
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
 )
 
-
 def lint_frontend_pipeline(trigger, ver_mode):
-    environment = {'EDITION': 'oss'}
+    """Generates the pipelines used linting frontend code.
+
+    Args:
+      trigger: controls which events can trigger the pipeline execution.
+      ver_mode: used in the naming of the pipeline.
+
+    Returns:
+      Drone pipeline.
+    """
+    environment = {"EDITION": "oss"}
 
     init_steps = [
         identify_runner_step(),
@@ -24,10 +35,10 @@ def lint_frontend_pipeline(trigger, ver_mode):
     ]
 
     return pipeline(
-        name='{}-lint-frontend'.format(ver_mode),
-        edition="oss",
-        trigger=trigger,
-        services=[],
-        steps=init_steps + test_steps,
-        environment=environment,
+        name = "{}-lint-frontend".format(ver_mode),
+        edition = "oss",
+        trigger = trigger,
+        services = [],
+        steps = init_steps + test_steps,
+        environment = environment,
     )
diff --git a/scripts/drone/pipelines/publish_images.star b/scripts/drone/pipelines/publish_images.star
index f2b7cd28cd3..cb848a12c61 100644
--- a/scripts/drone/pipelines/publish_images.star
+++ b/scripts/drone/pipelines/publish_images.star
@@ -1,75 +1,97 @@
+"""
+This module returns the pipeline used for publishing Docker images and its steps.
+"""
+
 load(
-    'scripts/drone/steps/lib.star',
-    'identify_runner_step',
-    'download_grabpl_step',
-    'publish_images_step',
-    'compile_build_cmd',
-    'fetch_images_step',
+    "scripts/drone/steps/lib.star",
+    "compile_build_cmd",
+    "download_grabpl_step",
+    "fetch_images_step",
+    "identify_runner_step",
+    "publish_images_step",
 )
-
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
 )
 
-
 def publish_image_steps(edition, mode, docker_repo):
+    """Generates the steps used for publising Docker images using grabpl.
+
+    Args:
+      edition: controls which version of an image is fetched in the case of a release.
+        It also controls which publishing implementation is used.
+        If edition == 'oss', it additionally publishes the grafana/grafana-oss repository.
+      mode: uses to control the publishing of security images when mode == 'security'.
+      docker_repo: the Docker image name.
+        It is combined with the 'grafana/' library prefix.
+
+    Returns:
+      List of Drone steps.
+    """
     steps = [
         identify_runner_step(),
         download_grabpl_step(),
         compile_build_cmd(),
         fetch_images_step(edition),
-        publish_images_step(edition, 'release', mode, docker_repo),
+        publish_images_step(edition, "release", mode, docker_repo),
     ]
 
-    if edition == 'oss':
+    if edition == "oss":
         steps.append(
-            publish_images_step(edition, 'release', mode, 'grafana/grafana-oss')
+            publish_images_step(edition, "release", mode, "grafana/grafana-oss"),
         )
 
     return steps
 
-
 def publish_image_pipelines_public():
-    mode = 'public'
+    """Generates the pipeline used for publising public Docker images.
+
+    Returns:
+      Drone pipeline
+    """
+    mode = "public"
     trigger = {
-        'event': ['promote'],
-        'target': [mode],
+        "event": ["promote"],
+        "target": [mode],
     }
     return [
         pipeline(
-            name='publish-docker-oss-{}'.format(mode),
-            trigger=trigger,
-            steps=publish_image_steps(edition='oss', mode=mode, docker_repo='grafana'),
-            edition="",
-            environment={'EDITION': 'oss'},
+            name = "publish-docker-oss-{}".format(mode),
+            trigger = trigger,
+            steps = publish_image_steps(edition = "oss", mode = mode, docker_repo = "grafana"),
+            edition = "",
+            environment = {"EDITION": "oss"},
         ),
         pipeline(
-            name='publish-docker-enterprise-{}'.format(mode),
-            trigger=trigger,
-            steps=publish_image_steps(
-                edition='enterprise', mode=mode, docker_repo='grafana-enterprise'
+            name = "publish-docker-enterprise-{}".format(mode),
+            trigger = trigger,
+            steps = publish_image_steps(
+                edition = "enterprise",
+                mode = mode,
+                docker_repo = "grafana-enterprise",
             ),
-            edition="",
-            environment={'EDITION': 'enterprise'},
+            edition = "",
+            environment = {"EDITION": "enterprise"},
         ),
     ]
 
-
 def publish_image_pipelines_security():
-    mode = 'security'
+    mode = "security"
     trigger = {
-        'event': ['promote'],
-        'target': [mode],
+        "event": ["promote"],
+        "target": [mode],
     }
     return [
         pipeline(
-            name='publish-docker-enterprise-{}'.format(mode),
-            trigger=trigger,
-            steps=publish_image_steps(
-                edition='enterprise', mode=mode, docker_repo='grafana-enterprise'
+            name = "publish-docker-enterprise-{}".format(mode),
+            trigger = trigger,
+            steps = publish_image_steps(
+                edition = "enterprise",
+                mode = mode,
+                docker_repo = "grafana-enterprise",
             ),
-            edition="",
-            environment={'EDITION': 'enterprise'},
+            edition = "",
+            environment = {"EDITION": "enterprise"},
         ),
     ]
diff --git a/scripts/drone/pipelines/shellcheck.star b/scripts/drone/pipelines/shellcheck.star
index 78a356adf8d..2a2aa55149e 100644
--- a/scripts/drone/pipelines/shellcheck.star
+++ b/scripts/drone/pipelines/shellcheck.star
@@ -1,49 +1,50 @@
-load('scripts/drone/steps/lib.star', 'build_image', 'compile_build_cmd')
+"""
+This module returns a Drone step and pipeline for linting with shellcheck.
+"""
 
+load("scripts/drone/steps/lib.star", "build_image", "compile_build_cmd")
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
 )
 
 trigger = {
-    'event': [
-        'pull_request',
+    "event": [
+        "pull_request",
     ],
-    'paths': {
-        'exclude': [
-            '*.md',
-            'docs/**',
-            'latest.json',
+    "paths": {
+        "exclude": [
+            "*.md",
+            "docs/**",
+            "latest.json",
         ],
-        'include': ['scripts/**/*.sh'],
+        "include": ["scripts/**/*.sh"],
     },
 }
 
-
 def shellcheck_step():
     return {
-        'name': 'shellcheck',
-        'image': build_image,
-        'depends_on': [
-            'compile-build-cmd',
+        "name": "shellcheck",
+        "image": build_image,
+        "depends_on": [
+            "compile-build-cmd",
         ],
-        'commands': [
-            './bin/build shellcheck',
+        "commands": [
+            "./bin/build shellcheck",
         ],
     }
 
-
 def shellcheck_pipeline():
-    environment = {'EDITION': 'oss'}
+    environment = {"EDITION": "oss"}
     steps = [
         compile_build_cmd(),
         shellcheck_step(),
     ]
     return pipeline(
-        name='pr-shellcheck',
-        edition="oss",
-        trigger=trigger,
-        services=[],
-        steps=steps,
-        environment=environment,
+        name = "pr-shellcheck",
+        edition = "oss",
+        trigger = trigger,
+        services = [],
+        steps = steps,
+        environment = environment,
     )
diff --git a/scripts/drone/pipelines/test_backend.star b/scripts/drone/pipelines/test_backend.star
index aa5cdfd8834..4b9dfb119a1 100644
--- a/scripts/drone/pipelines/test_backend.star
+++ b/scripts/drone/pipelines/test_backend.star
@@ -1,30 +1,41 @@
+"""
+This module returns the pipeline used for testing backend code.
+"""
+
 load(
-    'scripts/drone/steps/lib.star',
-    'identify_runner_step',
-    'download_grabpl_step',
-    'wire_install_step',
-    'test_backend_step',
-    'test_backend_integration_step',
-    'verify_gen_cue_step',
-    'verify_gen_jsonnet_step',
-    'compile_build_cmd',
-    'clone_enterprise_step',
-    'init_enterprise_step',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
+    "with_deps",
 )
-
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
-    'with_deps',
+    "scripts/drone/steps/lib.star",
+    "clone_enterprise_step",
+    "compile_build_cmd",
+    "download_grabpl_step",
+    "identify_runner_step",
+    "init_enterprise_step",
+    "test_backend_integration_step",
+    "test_backend_step",
+    "verify_gen_cue_step",
+    "verify_gen_jsonnet_step",
+    "wire_install_step",
 )
 
+def test_backend(trigger, ver_mode):
+    """Generates the pipeline used for testing OSS backend code.
+
+    Args:
+      trigger: a Drone trigger for the pipeline.
+      ver_mode: affects the pipeline name.
 
-def test_backend(trigger, ver_mode, committish):
-    environment = {'EDITION': 'oss'}
+    Returns:
+      Drone pipeline.
+    """
+    environment = {"EDITION": "oss"}
 
     steps = [
         identify_runner_step(),
-        compile_build_cmd(edition='oss'),
+        compile_build_cmd(edition = "oss"),
         verify_gen_cue_step(),
         verify_gen_jsonnet_step(),
         wire_install_step(),
@@ -32,21 +43,31 @@ def test_backend(trigger, ver_mode, committish):
         test_backend_integration_step(),
     ]
 
-    pipeline_name = '{}-test-backend'.format(ver_mode)
+    pipeline_name = "{}-test-backend".format(ver_mode)
     if ver_mode in ("release-branch", "release"):
-        pipeline_name = '{}-{}-test-backend'.format(ver_mode, 'oss')
+        pipeline_name = "{}-{}-test-backend".format(ver_mode, "oss")
 
     return pipeline(
-        name=pipeline_name,
-        edition='oss',
-        trigger=trigger,
-        steps=steps,
-        environment=environment,
+        name = pipeline_name,
+        edition = "oss",
+        trigger = trigger,
+        steps = steps,
+        environment = environment,
     )
 
+def test_backend_enterprise(trigger, ver_mode, committish, edition = "enterprise"):
+    """Generates the pipeline used for testing backend enterprise code.
 
-def test_backend_enterprise(trigger, ver_mode, committish, edition="enterprise"):
-    environment = {'EDITION': edition}
+    Args:
+      trigger: a Drone trigger for the pipeline.
+      ver_mode: affects the pipeline name.
+      committish: controls what revision of enterprise code to test with.
+      edition: affects the clone step in the pipeline and also affects the pipeline name.
+
+    Returns:
+      Drone pipeline.
+    """
+    environment = {"EDITION": edition}
 
     steps = (
         [
@@ -55,31 +76,31 @@ def test_backend_enterprise(trigger, ver_mode, committish, edition="enterprise")
             init_enterprise_step(ver_mode),
             identify_runner_step(),
             compile_build_cmd(edition),
-        ]
-        + with_deps(
+        ] +
+        with_deps(
             [
                 verify_gen_cue_step(),
                 verify_gen_jsonnet_step(),
             ],
             [
-                'init-enterprise',
+                "init-enterprise",
             ],
-        )
-        + [
+        ) +
+        [
             wire_install_step(),
             test_backend_step(),
             test_backend_integration_step(),
         ]
     )
 
-    pipeline_name = '{}-test-backend'.format(ver_mode)
+    pipeline_name = "{}-test-backend".format(ver_mode)
     if ver_mode in ("release-branch", "release"):
-        pipeline_name = '{}-{}-test-backend'.format(ver_mode, edition)
+        pipeline_name = "{}-{}-test-backend".format(ver_mode, edition)
 
     return pipeline(
-        name=pipeline_name,
-        edition=edition,
-        trigger=trigger,
-        steps=steps,
-        environment=environment,
+        name = pipeline_name,
+        edition = edition,
+        trigger = trigger,
+        steps = steps,
+        environment = environment,
     )
diff --git a/scripts/drone/pipelines/test_frontend.star b/scripts/drone/pipelines/test_frontend.star
index 0f3b7fd4655..55035efee0b 100644
--- a/scripts/drone/pipelines/test_frontend.star
+++ b/scripts/drone/pipelines/test_frontend.star
@@ -1,47 +1,68 @@
+"""
+This module returns the pipeline used for testing backend code.
+"""
+
 load(
-    'scripts/drone/steps/lib.star',
-    'identify_runner_step',
-    'clone_enterprise_step',
-    'init_enterprise_step',
-    'download_grabpl_step',
-    'yarn_install_step',
-    'betterer_frontend_step',
-    'test_frontend_step',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
+    "with_deps",
 )
-
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
-    'with_deps',
+    "scripts/drone/steps/lib.star",
+    "betterer_frontend_step",
+    "clone_enterprise_step",
+    "download_grabpl_step",
+    "identify_runner_step",
+    "init_enterprise_step",
+    "test_frontend_step",
+    "yarn_install_step",
 )
 
+def test_frontend(trigger, ver_mode):
+    """Generates the pipeline used for testing frontend code.
+
+    Args:
+      trigger: a Drone trigger for the pipeline
+      ver_mode: indirectly controls which revision of enterprise code to use.
 
-def test_frontend(trigger, ver_mode, committish):
-    environment = {'EDITION': 'oss'}
+    Returns:
+      Drone pipeline.
+    """
+    environment = {"EDITION": "oss"}
 
     steps = [
         identify_runner_step(),
         download_grabpl_step(),
         yarn_install_step(),
-        betterer_frontend_step(edition='oss'),
-        test_frontend_step(edition='oss'),
+        betterer_frontend_step(edition = "oss"),
+        test_frontend_step(edition = "oss"),
     ]
 
-    pipeline_name = '{}-test-frontend'.format(ver_mode)
+    pipeline_name = "{}-test-frontend".format(ver_mode)
     if ver_mode in ("release-branch", "release"):
-        pipeline_name = '{}-{}-test-frontend'.format(ver_mode, 'oss')
+        pipeline_name = "{}-{}-test-frontend".format(ver_mode, "oss")
 
     return pipeline(
-        name=pipeline_name,
-        edition='oss',
-        trigger=trigger,
-        steps=steps,
-        environment=environment,
+        name = pipeline_name,
+        edition = "oss",
+        trigger = trigger,
+        steps = steps,
+        environment = environment,
     )
 
+def test_frontend_enterprise(trigger, ver_mode, committish, edition = "enterprise"):
+    """Generates the pipeline used for testing frontend enterprise code.
 
-def test_frontend_enterprise(trigger, ver_mode, committish, edition='enterprise'):
-    environment = {'EDITION': edition}
+    Args:
+      trigger: a Drone trigger for the pipeline.
+      ver_mode: affects the pipeline name.
+      committish: controls what revision of enterprise code to test with.
+      edition: affects the clone step in the pipeline and also affects the pipeline name.
+
+    Returns:
+      Drone pipeline.
+    """
+    environment = {"EDITION": edition}
 
     steps = (
         [
@@ -49,22 +70,22 @@ def test_frontend_enterprise(trigger, ver_mode, committish, edition='enterprise'
             init_enterprise_step(ver_mode),
             identify_runner_step(),
             download_grabpl_step(),
-        ]
-        + with_deps([yarn_install_step()], ['init-enterprise'])
-        + [
+        ] +
+        with_deps([yarn_install_step()], ["init-enterprise"]) +
+        [
             betterer_frontend_step(edition),
             test_frontend_step(edition),
         ]
     )
 
-    pipeline_name = '{}-test-frontend'.format(ver_mode)
+    pipeline_name = "{}-test-frontend".format(ver_mode)
     if ver_mode in ("release-branch", "release"):
-        pipeline_name = '{}-{}-test-frontend'.format(ver_mode, edition)
+        pipeline_name = "{}-{}-test-frontend".format(ver_mode, edition)
 
     return pipeline(
-        name=pipeline_name,
-        edition=edition,
-        trigger=trigger,
-        steps=steps,
-        environment=environment,
+        name = pipeline_name,
+        edition = edition,
+        trigger = trigger,
+        steps = steps,
+        environment = environment,
     )
diff --git a/scripts/drone/pipelines/trigger_downstream.star b/scripts/drone/pipelines/trigger_downstream.star
index dafab45fe35..d3403de50f1 100644
--- a/scripts/drone/pipelines/trigger_downstream.star
+++ b/scripts/drone/pipelines/trigger_downstream.star
@@ -1,43 +1,45 @@
+"""
+This module returns the pipeline used for triggering a downstream pipeline for Grafana Enterprise.
+"""
+
 load(
-    'scripts/drone/steps/lib.star',
-    'enterprise_downstream_step',
+    "scripts/drone/steps/lib.star",
+    "enterprise_downstream_step",
 )
-
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
 )
 
 trigger = {
-    'event': [
-        'push',
+    "event": [
+        "push",
     ],
-    'branch': 'main',
-    'paths': {
-        'exclude': [
-            '*.md',
-            'docs/**',
-            'latest.json',
+    "branch": "main",
+    "paths": {
+        "exclude": [
+            "*.md",
+            "docs/**",
+            "latest.json",
         ],
     },
 }
 
-
 def enterprise_downstream_pipeline():
-    environment = {'EDITION': 'oss'}
+    environment = {"EDITION": "oss"}
     steps = [
-        enterprise_downstream_step(ver_mode='main'),
+        enterprise_downstream_step(ver_mode = "main"),
     ]
     deps = [
-        'main-build-e2e-publish',
-        'main-integration-tests',
+        "main-build-e2e-publish",
+        "main-integration-tests",
     ]
     return pipeline(
-        name='main-trigger-downstream',
-        edition='oss',
-        trigger=trigger,
-        services=[],
-        steps=steps,
-        depends_on=deps,
-        environment=environment,
+        name = "main-trigger-downstream",
+        edition = "oss",
+        trigger = trigger,
+        services = [],
+        steps = steps,
+        depends_on = deps,
+        environment = environment,
     )
diff --git a/scripts/drone/pipelines/verify_drone.star b/scripts/drone/pipelines/verify_drone.star
index 4a2f3c91d45..83fb2458c82 100644
--- a/scripts/drone/pipelines/verify_drone.star
+++ b/scripts/drone/pipelines/verify_drone.star
@@ -1,19 +1,21 @@
+"""
+This module returns the pipeline used for verifying Drone configuration.
+"""
+
 load(
-    'scripts/drone/steps/lib.star',
-    'identify_runner_step',
-    'download_grabpl_step',
-    'lint_drone_step',
-    'compile_build_cmd',
+    "scripts/drone/steps/lib.star",
+    "compile_build_cmd",
+    "download_grabpl_step",
+    "identify_runner_step",
+    "lint_drone_step",
 )
-
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
 )
 
-
 def verify_drone(trigger, ver_mode):
-    environment = {'EDITION': 'oss'}
+    environment = {"EDITION": "oss"}
     steps = [
         identify_runner_step(),
         download_grabpl_step(),
@@ -21,10 +23,10 @@ def verify_drone(trigger, ver_mode):
         lint_drone_step(),
     ]
     return pipeline(
-        name='{}-verify-drone'.format(ver_mode),
-        edition="oss",
-        trigger=trigger,
-        services=[],
-        steps=steps,
-        environment=environment,
+        name = "{}-verify-drone".format(ver_mode),
+        edition = "oss",
+        trigger = trigger,
+        services = [],
+        steps = steps,
+        environment = environment,
     )
diff --git a/scripts/drone/pipelines/verify_starlark.star b/scripts/drone/pipelines/verify_starlark.star
new file mode 100644
index 00000000000..2970e598f12
--- /dev/null
+++ b/scripts/drone/pipelines/verify_starlark.star
@@ -0,0 +1,32 @@
+"""
+This module returns a Drone pipeline that verifies all Starlark files are linted.
+"""
+
+load(
+    "scripts/drone/steps/lib.star",
+    "compile_build_cmd",
+    "download_grabpl_step",
+    "identify_runner_step",
+    "lint_starlark_step",
+)
+load(
+    "scripts/drone/utils/utils.star",
+    "pipeline",
+)
+
+def verify_starlark(trigger, ver_mode):
+    environment = {"EDITION": "oss"}
+    steps = [
+        identify_runner_step(),
+        download_grabpl_step(),
+        compile_build_cmd(),
+        lint_starlark_step(),
+    ]
+    return pipeline(
+        name = "{}-verify-starlark".format(ver_mode),
+        edition = "oss",
+        trigger = trigger,
+        services = [],
+        steps = steps,
+        environment = environment,
+    )
diff --git a/scripts/drone/pipelines/windows.star b/scripts/drone/pipelines/windows.star
index e3af9b99f2d..b726edc2463 100644
--- a/scripts/drone/pipelines/windows.star
+++ b/scripts/drone/pipelines/windows.star
@@ -1,28 +1,41 @@
+"""
+This module returns the pipeline used for building Grafana on Windows.
+"""
+
 load(
-    'scripts/drone/steps/lib.star',
-    'get_windows_steps',
+    "scripts/drone/utils/utils.star",
+    "pipeline",
 )
-
 load(
-    'scripts/drone/utils/utils.star',
-    'pipeline',
+    "scripts/drone/steps/lib.star",
+    "get_windows_steps",
 )
 
-
 def windows(trigger, edition, ver_mode):
-    environment = {'EDITION': edition}
+    """Generates the pipeline used for building Grafana on Windows.
+
+    Args:
+      trigger: a Drone trigger for the pipeline.
+      edition: controls whether enterprise code is included in the pipeline steps.
+      ver_mode: controls whether a pre-release or actual release pipeline is generated.
+        Also indirectly controls which version of enterprise code is used.
+
+    Returns:
+      Drone pipeline.
+    """
+    environment = {"EDITION": edition}
 
     return pipeline(
-        name='main-windows',
-        edition=edition,
-        trigger=dict(trigger, repo=['grafana/grafana']),
-        steps=get_windows_steps(edition, ver_mode),
-        depends_on=[
-            'main-test-frontend',
-            'main-test-backend',
-            'main-build-e2e-publish',
-            'main-integration-tests',
+        name = "main-windows",
+        edition = edition,
+        trigger = dict(trigger, repo = ["grafana/grafana"]),
+        steps = get_windows_steps(edition, ver_mode),
+        depends_on = [
+            "main-test-frontend",
+            "main-test-backend",
+            "main-build-e2e-publish",
+            "main-integration-tests",
         ],
-        platform='windows',
-        environment=environment,
+        platform = "windows",
+        environment = environment,
     )
diff --git a/scripts/drone/services/services.star b/scripts/drone/services/services.star
index b0d745b0b7a..9d7d04a2ded 100644
--- a/scripts/drone/services/services.star
+++ b/scripts/drone/services/services.star
@@ -1,64 +1,66 @@
+"""
+This module has functions for Drone services to be used in pipelines.
+"""
+
 def integration_test_services_volumes():
     return [
-        {'name': 'postgres', 'temp': {'medium': 'memory'}},
-        {'name': 'mysql', 'temp': {'medium': 'memory'}},
+        {"name": "postgres", "temp": {"medium": "memory"}},
+        {"name": "mysql", "temp": {"medium": "memory"}},
     ]
 
-
 def integration_test_services(edition):
     services = [
         {
-            'name': 'postgres',
-            'image': 'postgres:12.3-alpine',
-            'environment': {
-                'POSTGRES_USER': 'grafanatest',
-                'POSTGRES_PASSWORD': 'grafanatest',
-                'POSTGRES_DB': 'grafanatest',
-                'PGDATA': '/var/lib/postgresql/data/pgdata',
+            "name": "postgres",
+            "image": "postgres:12.3-alpine",
+            "environment": {
+                "POSTGRES_USER": "grafanatest",
+                "POSTGRES_PASSWORD": "grafanatest",
+                "POSTGRES_DB": "grafanatest",
+                "PGDATA": "/var/lib/postgresql/data/pgdata",
             },
-            'volumes': [
-                {'name': 'postgres', 'path': '/var/lib/postgresql/data/pgdata'}
+            "volumes": [
+                {"name": "postgres", "path": "/var/lib/postgresql/data/pgdata"},
             ],
         },
         {
-            'name': 'mysql',
-            'image': 'mysql:5.7.39',
-            'environment': {
-                'MYSQL_ROOT_PASSWORD': 'rootpass',
-                'MYSQL_DATABASE': 'grafana_tests',
-                'MYSQL_USER': 'grafana',
-                'MYSQL_PASSWORD': 'password',
+            "name": "mysql",
+            "image": "mysql:5.7.39",
+            "environment": {
+                "MYSQL_ROOT_PASSWORD": "rootpass",
+                "MYSQL_DATABASE": "grafana_tests",
+                "MYSQL_USER": "grafana",
+                "MYSQL_PASSWORD": "password",
             },
-            'volumes': [{'name': 'mysql', 'path': '/var/lib/mysql'}],
+            "volumes": [{"name": "mysql", "path": "/var/lib/mysql"}],
         },
     ]
 
-    if edition in ('enterprise', 'enterprise2'):
+    if edition in ("enterprise", "enterprise2"):
         services.extend(
             [
                 {
-                    'name': 'redis',
-                    'image': 'redis:6.2.1-alpine',
-                    'environment': {},
+                    "name": "redis",
+                    "image": "redis:6.2.1-alpine",
+                    "environment": {},
                 },
                 {
-                    'name': 'memcached',
-                    'image': 'memcached:1.6.9-alpine',
-                    'environment': {},
+                    "name": "memcached",
+                    "image": "memcached:1.6.9-alpine",
+                    "environment": {},
                 },
-            ]
+            ],
         )
 
     return services
 
-
 def ldap_service():
     return {
-        'name': 'ldap',
-        'image': 'osixia/openldap:1.4.0',
-        'environment': {
-            'LDAP_ADMIN_PASSWORD': 'grafana',
-            'LDAP_DOMAIN': 'grafana.org',
-            'SLAPD_ADDITIONAL_MODULES': 'memberof',
+        "name": "ldap",
+        "image": "osixia/openldap:1.4.0",
+        "environment": {
+            "LDAP_ADMIN_PASSWORD": "grafana",
+            "LDAP_DOMAIN": "grafana.org",
+            "SLAPD_ADDITIONAL_MODULES": "memberof",
         },
     }
diff --git a/scripts/drone/steps/lib.star b/scripts/drone/steps/lib.star
index 2bc37806f14..8ce9b098468 100644
--- a/scripts/drone/steps/lib.star
+++ b/scripts/drone/steps/lib.star
@@ -1,389 +1,451 @@
+"""
+This module is a library of Drone steps and other pipeline components.
+"""
+
 load(
-    'scripts/drone/vault.star',
-    'from_secret',
-    'prerelease_bucket',
-    'pull_secret',
+    "scripts/drone/vault.star",
+    "from_secret",
+    "prerelease_bucket",
 )
 
-grabpl_version = 'v3.0.20'
-build_image = 'grafana/build-container:1.6.7'
-publish_image = 'grafana/grafana-ci-deploy:1.3.3'
-deploy_docker_image = 'us.gcr.io/kubernetes-dev/drone/plugins/deploy-image'
-alpine_image = 'alpine:3.15.6'
-curl_image = 'byrnedo/alpine-curl:0.1.8'
-windows_image = 'mcr.microsoft.com/windows:1809'
-wix_image = 'grafana/ci-wix:0.1.1'
-go_image = 'golang:1.19.4'
+grabpl_version = "v3.0.20"
+build_image = "grafana/build-container:v1.7.1"
+publish_image = "grafana/grafana-ci-deploy:1.3.3"
+deploy_docker_image = "us.gcr.io/kubernetes-dev/drone/plugins/deploy-image"
+alpine_image = "alpine:3.15.6"
+curl_image = "byrnedo/alpine-curl:0.1.8"
+windows_image = "mcr.microsoft.com/windows:1809"
+wix_image = "grafana/ci-wix:0.1.1"
+go_image = "golang:1.19.4"
 
 trigger_oss = {
-    'repo': [
-        'grafana/grafana',
-    ]
+    "repo": [
+        "grafana/grafana",
+    ],
 }
 
-
 def slack_step(channel, template, secret):
     return {
-        'name': 'slack',
-        'image': 'plugins/slack',
-        'settings': {
-            'webhook': from_secret(secret),
-            'channel': channel,
-            'template': template,
+        "name": "slack",
+        "image": "plugins/slack",
+        "settings": {
+            "webhook": from_secret(secret),
+            "channel": channel,
+            "template": template,
         },
     }
 
-
 def yarn_install_step():
     return {
-        'name': 'yarn-install',
-        'image': build_image,
-        'commands': [
-            'yarn install --immutable',
+        "name": "yarn-install",
+        "image": build_image,
+        "commands": [
+            "yarn install --immutable",
         ],
-        'depends_on': [],
+        "depends_on": [],
     }
 
-
 def wire_install_step():
     return {
-        'name': 'wire-install',
-        'image': build_image,
-        'commands': [
-            'make gen-go',
+        "name": "wire-install",
+        "image": build_image,
+        "commands": [
+            "make gen-go",
         ],
-        'depends_on': [
-            'verify-gen-cue',
+        "depends_on": [
+            "verify-gen-cue",
         ],
     }
 
-
-def identify_runner_step(platform='linux'):
-    if platform == 'linux':
+def identify_runner_step(platform = "linux"):
+    if platform == "linux":
         return {
-            'name': 'identify-runner',
-            'image': alpine_image,
-            'commands': [
-                'echo $DRONE_RUNNER_NAME',
+            "name": "identify-runner",
+            "image": alpine_image,
+            "commands": [
+                "echo $DRONE_RUNNER_NAME",
             ],
         }
     else:
         return {
-            'name': 'identify-runner',
-            'image': windows_image,
-            'commands': [
-                'echo $env:DRONE_RUNNER_NAME',
+            "name": "identify-runner",
+            "image": windows_image,
+            "commands": [
+                "echo $env:DRONE_RUNNER_NAME",
             ],
         }
 
+def clone_enterprise_step(committish = "${DRONE_COMMIT}"):
+    """Clone the enterprise source into the ./grafana-enterprise directory.
 
-def clone_enterprise_step(committish='${DRONE_COMMIT}'):
+    Args:
+      committish: controls which revision of grafana-enterprise is cloned.
+
+    Returns:
+      Drone step.
+    """
     return {
-        'name': 'clone-enterprise',
-        'image': build_image,
-        'environment': {
-            'GITHUB_TOKEN': from_secret('github_token'),
+        "name": "clone-enterprise",
+        "image": build_image,
+        "environment": {
+            "GITHUB_TOKEN": from_secret("github_token"),
         },
-        'commands': [
+        "commands": [
             'git clone "https://$${GITHUB_TOKEN}@github.com/grafana/grafana-enterprise.git"',
-            'cd grafana-enterprise',
-            'git checkout {}'.format(committish),
+            "cd grafana-enterprise",
+            "git checkout {}".format(committish),
         ],
     }
 
-
 def init_enterprise_step(ver_mode):
-    source_commit = ''
-    if ver_mode == 'release':
-        source_commit = ' ${DRONE_TAG}'
+    """Adds the enterprise deployment configuration into the source directory.
+
+    Args:
+      ver_mode: controls what revision of the OSS source to use.
+        If ver_mode is 'release', the step uses the tagged revision.
+        Otherwise, the DRONE_SOURCE_BRANCH is used.
+
+    Returns:
+      Drone step.
+    """
+    source_commit = ""
+    if ver_mode == "release":
+        source_commit = " ${DRONE_TAG}"
         environment = {
-            'GITHUB_TOKEN': from_secret('github_token'),
+            "GITHUB_TOKEN": from_secret("github_token"),
         }
         token = "--github-token $${GITHUB_TOKEN}"
-    elif ver_mode == 'release-branch':
+    elif ver_mode == "release-branch":
         environment = {
-            'GITHUB_TOKEN': from_secret('github_token'),
+            "GITHUB_TOKEN": from_secret("github_token"),
         }
         token = "--github-token $${GITHUB_TOKEN}"
     else:
         environment = {}
         token = ""
     return {
-        'name': 'init-enterprise',
-        'image': build_image,
-        'depends_on': [
-            'clone-enterprise',
+        "name": "init-enterprise",
+        "image": build_image,
+        "depends_on": [
+            "clone-enterprise",
         ],
-        'environment': environment,
-        'commands': [
-            'mv bin/grabpl /tmp/',
-            'rmdir bin',
-            'mv grafana-enterprise /tmp/',
-            '/tmp/grabpl init-enterprise {} /tmp/grafana-enterprise{}'.format(
-                token, source_commit
+        "environment": environment,
+        "commands": [
+            "mv bin/grabpl /tmp/",
+            "rmdir bin",
+            "mv grafana-enterprise /tmp/",
+            "/tmp/grabpl init-enterprise {} /tmp/grafana-enterprise{}".format(
+                token,
+                source_commit,
             ).rstrip(),
-            'mv /tmp/grafana-enterprise/deployment_tools_config.json deployment_tools_config.json',
-            'mkdir bin',
-            'mv /tmp/grabpl bin/',
+            "mv /tmp/grafana-enterprise/deployment_tools_config.json deployment_tools_config.json",
+            "mkdir bin",
+            "mv /tmp/grabpl bin/",
         ],
     }
 
-
-def download_grabpl_step(platform="linux"):
-    if platform == 'windows':
+def download_grabpl_step(platform = "linux"):
+    if platform == "windows":
         return {
-            'name': 'grabpl',
-            'image': wix_image,
-            'commands': [
+            "name": "grabpl",
+            "image": wix_image,
+            "commands": [
                 '$$ProgressPreference = "SilentlyContinue"',
-                'Invoke-WebRequest https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/{}/windows/grabpl.exe -OutFile grabpl.exe'.format(
-                    grabpl_version
+                "Invoke-WebRequest https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/{}/windows/grabpl.exe -OutFile grabpl.exe".format(
+                    grabpl_version,
                 ),
             ],
         }
 
     return {
-        'name': 'grabpl',
-        'image': curl_image,
-        'commands': [
-            'mkdir -p bin',
-            'curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/{}/grabpl'.format(
-                grabpl_version
+        "name": "grabpl",
+        "image": curl_image,
+        "commands": [
+            "mkdir -p bin",
+            "curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/{}/grabpl".format(
+                grabpl_version,
             ),
-            'chmod +x bin/grabpl',
+            "chmod +x bin/grabpl",
         ],
     }
 
-
 def lint_drone_step():
     return {
-        'name': 'lint-drone',
-        'image': curl_image,
-        'commands': [
-            './bin/build verify-drone',
+        "name": "lint-drone",
+        "image": curl_image,
+        "commands": [
+            "./bin/build verify-drone",
         ],
-        'depends_on': [
-            'compile-build-cmd',
+        "depends_on": [
+            "compile-build-cmd",
         ],
     }
 
+def lint_starlark_step():
+    return {
+        "name": "lint-starlark",
+        "image": build_image,
+        "commands": [
+            "./bin/build verify-starlark .",
+        ],
+        "depends_on": [
+            "compile-build-cmd",
+        ],
+    }
 
 def enterprise_downstream_step(ver_mode):
-    repo = 'grafana/grafana-enterprise@'
-    if ver_mode == 'pr':
-        repo += '${DRONE_SOURCE_BRANCH}'
+    """Triggers a downstream pipeline in the grafana-enterprise repository.
+
+    Args:
+      ver_mode: indirectly controls the revision used for downstream pipelines.
+        It also used to allow the step to fail for pull requests without blocking merging.
+
+    Returns:
+      Drone step.
+    """
+    repo = "grafana/grafana-enterprise@"
+    if ver_mode == "pr":
+        repo += "${DRONE_SOURCE_BRANCH}"
     else:
-        repo += 'main'
+        repo += "main"
 
     step = {
-        'name': 'trigger-enterprise-downstream',
-        'image': 'grafana/drone-downstream',
-        'settings': {
-            'server': 'https://drone.grafana.net',
-            'token': from_secret('drone_token'),
-            'repositories': [
+        "name": "trigger-enterprise-downstream",
+        "image": "grafana/drone-downstream",
+        "settings": {
+            "server": "https://drone.grafana.net",
+            "token": from_secret("drone_token"),
+            "repositories": [
                 repo,
             ],
-            'params': [
-                'SOURCE_BUILD_NUMBER=${DRONE_COMMIT}',
-                'SOURCE_COMMIT=${DRONE_COMMIT}',
+            "params": [
+                "SOURCE_BUILD_NUMBER=${DRONE_COMMIT}",
+                "SOURCE_COMMIT=${DRONE_COMMIT}",
             ],
         },
     }
 
-    if ver_mode == 'pr':
-        step.update({'failure': 'ignore'})
-        step['settings']['params'].append('OSS_PULL_REQUEST=${DRONE_PULL_REQUEST}')
+    if ver_mode == "pr":
+        step.update({"failure": "ignore"})
+        step["settings"]["params"].append("OSS_PULL_REQUEST=${DRONE_PULL_REQUEST}")
 
     return step
 
-
 def lint_backend_step():
     return {
-        'name': 'lint-backend',
+        "name": "lint-backend",
         # TODO: build_image or go_image?
-        'image': go_image,
-        'environment': {
+        "image": go_image,
+        "environment": {
             # We need CGO because of go-sqlite3
-            'CGO_ENABLED': '1',
+            "CGO_ENABLED": "1",
         },
-        'depends_on': [
-            'wire-install',
+        "depends_on": [
+            "wire-install",
         ],
-        'commands': [
-            'apt-get update && apt-get install make',
+        "commands": [
+            "apt-get update && apt-get install make",
             # Don't use Make since it will re-download the linters
-            'make lint-go',
+            "make lint-go",
         ],
     }
 
-
 def benchmark_ldap_step():
     return {
-        'name': 'benchmark-ldap',
-        'image': build_image,
-        'environment': {
-            'LDAP_HOSTNAME': 'ldap',
+        "name": "benchmark-ldap",
+        "image": build_image,
+        "environment": {
+            "LDAP_HOSTNAME": "ldap",
         },
-        'commands': [
-            'dockerize -wait tcp://ldap:389 -timeout 120s',
+        "commands": [
+            "dockerize -wait tcp://ldap:389 -timeout 120s",
             'go test -benchmem -run=^$ ./pkg/extensions/ldapsync -bench "^(Benchmark50Users)$"',
         ],
     }
 
-
 def build_storybook_step(ver_mode):
     return {
-        'name': 'build-storybook',
-        'image': build_image,
-        'depends_on': [
+        "name": "build-storybook",
+        "image": build_image,
+        "depends_on": [
             # Best to ensure that this step doesn't mess with what's getting built and packaged
-            'build-frontend',
-            'build-frontend-packages',
+            "build-frontend",
+            "build-frontend-packages",
         ],
-        'environment': {
-            'NODE_OPTIONS': '--max_old_space_size=4096',
+        "environment": {
+            "NODE_OPTIONS": "--max_old_space_size=4096",
         },
-        'commands': [
-            'yarn storybook:build',
-            './bin/build verify-storybook',
+        "commands": [
+            "yarn storybook:build",
+            "./bin/build verify-storybook",
         ],
-        'when': get_trigger_storybook(ver_mode),
+        "when": get_trigger_storybook(ver_mode),
     }
 
+def store_storybook_step(ver_mode, trigger = None):
+    """Publishes the Grafana UI components storybook.
 
-def store_storybook_step(ver_mode, trigger=None):
+    Args:
+      ver_mode: controls whether a release or canary version is published.
+      trigger: a Drone trigger for the step.
+        Defaults to None.
+
+    Returns:
+      Drone step.
+    """
     commands = []
-    if ver_mode == 'release':
+    if ver_mode == "release":
         commands.extend(
             [
-                './bin/build store-storybook --deployment latest',
-                './bin/build store-storybook --deployment ${DRONE_TAG}',
-            ]
+                "./bin/build store-storybook --deployment latest",
+                "./bin/build store-storybook --deployment ${DRONE_TAG}",
+            ],
         )
 
     else:
         # main pipelines should deploy storybook to grafana-storybook/canary public bucket
         commands = [
-            './bin/build store-storybook --deployment canary',
+            "./bin/build store-storybook --deployment canary",
         ]
 
     step = {
-        'name': 'store-storybook',
-        'image': publish_image,
-        'depends_on': [
-            'build-storybook',
-        ]
-        + end_to_end_tests_deps(),
-        'environment': {
-            'GCP_KEY': from_secret('gcp_key'),
-            'PRERELEASE_BUCKET': from_secret(prerelease_bucket),
+        "name": "store-storybook",
+        "image": publish_image,
+        "depends_on": [
+                          "build-storybook",
+                      ] +
+                      end_to_end_tests_deps(),
+        "environment": {
+            "GCP_KEY": from_secret("gcp_key"),
+            "PRERELEASE_BUCKET": from_secret(prerelease_bucket),
         },
-        'commands': commands,
-        'when': get_trigger_storybook(ver_mode),
+        "commands": commands,
+        "when": get_trigger_storybook(ver_mode),
     }
     if trigger and ver_mode in ("release-branch", "main"):
         # no dict merge operation available, https://github.com/harness/drone-cli/pull/220
         when_cond = {
-            'repo': [
-                'grafana/grafana',
+            "repo": [
+                "grafana/grafana",
             ],
-            'paths': {
-                'include': [
-                    'packages/grafana-ui/**',
+            "paths": {
+                "include": [
+                    "packages/grafana-ui/**",
                 ],
             },
         }
-        step = dict(step, when=when_cond)
+        step = dict(step, when = when_cond)
     return step
 
-
 def e2e_tests_artifacts():
     return {
-        'name': 'e2e-tests-artifacts-upload',
-        'image': 'google/cloud-sdk:406.0.0',
-        'depends_on': [
-            'end-to-end-tests-dashboards-suite',
-            'end-to-end-tests-panels-suite',
-            'end-to-end-tests-smoke-tests-suite',
-            'end-to-end-tests-various-suite',
+        "name": "e2e-tests-artifacts-upload",
+        "image": "google/cloud-sdk:406.0.0",
+        "depends_on": [
+            "end-to-end-tests-dashboards-suite",
+            "end-to-end-tests-panels-suite",
+            "end-to-end-tests-smoke-tests-suite",
+            "end-to-end-tests-various-suite",
         ],
-        'failure': 'ignore',
-        'when': {
-            'status': [
-                'success',
-                'failure',
-            ]
+        "failure": "ignore",
+        "when": {
+            "status": [
+                "success",
+                "failure",
+            ],
         },
-        'environment': {
-            'GCP_GRAFANA_UPLOAD_ARTIFACTS_KEY': from_secret('gcp_upload_artifacts_key'),
-            'E2E_TEST_ARTIFACTS_BUCKET': 'releng-pipeline-artifacts-dev',
-            'GITHUB_TOKEN': from_secret('github_token'),
+        "environment": {
+            "GCP_GRAFANA_UPLOAD_ARTIFACTS_KEY": from_secret("gcp_upload_artifacts_key"),
+            "E2E_TEST_ARTIFACTS_BUCKET": "releng-pipeline-artifacts-dev",
+            "GITHUB_TOKEN": from_secret("github_token"),
         },
-        'commands': [
-            'apt-get update',
-            'apt-get install -yq zip',
-            'printenv GCP_GRAFANA_UPLOAD_ARTIFACTS_KEY > /tmp/gcpkey_upload_artifacts.json',
-            'gcloud auth activate-service-account --key-file=/tmp/gcpkey_upload_artifacts.json',
+        "commands": [
+            "apt-get update",
+            "apt-get install -yq zip",
+            "printenv GCP_GRAFANA_UPLOAD_ARTIFACTS_KEY > /tmp/gcpkey_upload_artifacts.json",
+            "gcloud auth activate-service-account --key-file=/tmp/gcpkey_upload_artifacts.json",
             # we want to only include files in e2e folder that end with .spec.ts.mp4
             'find ./e2e -type f -name "*spec.ts.mp4" | zip e2e/videos.zip -@',
-            'gsutil cp e2e/videos.zip gs://$${E2E_TEST_ARTIFACTS_BUCKET}/${DRONE_BUILD_NUMBER}/artifacts/videos/videos.zip',
-            'export E2E_ARTIFACTS_VIDEO_ZIP=https://storage.googleapis.com/$${E2E_TEST_ARTIFACTS_BUCKET}/${DRONE_BUILD_NUMBER}/artifacts/videos/videos.zip',
+            "gsutil cp e2e/videos.zip gs://$${E2E_TEST_ARTIFACTS_BUCKET}/${DRONE_BUILD_NUMBER}/artifacts/videos/videos.zip",
+            "export E2E_ARTIFACTS_VIDEO_ZIP=https://storage.googleapis.com/$${E2E_TEST_ARTIFACTS_BUCKET}/${DRONE_BUILD_NUMBER}/artifacts/videos/videos.zip",
             'echo "E2E Test artifacts uploaded to: $${E2E_ARTIFACTS_VIDEO_ZIP}"',
-            'curl -X POST https://api.github.com/repos/${DRONE_REPO}/statuses/${DRONE_COMMIT_SHA} -H "Authorization: token $${GITHUB_TOKEN}" -d '
-            + '"{\\"state\\":\\"success\\",\\"target_url\\":\\"$${E2E_ARTIFACTS_VIDEO_ZIP}\\", \\"description\\": \\"Click on the details to download e2e recording videos\\", \\"context\\": \\"e2e_artifacts\\"}"',
+            'curl -X POST https://api.github.com/repos/${DRONE_REPO}/statuses/${DRONE_COMMIT_SHA} -H "Authorization: token $${GITHUB_TOKEN}" -d ' +
+            '"{\\"state\\":\\"success\\",\\"target_url\\":\\"$${E2E_ARTIFACTS_VIDEO_ZIP}\\", \\"description\\": \\"Click on the details to download e2e recording videos\\", \\"context\\": \\"e2e_artifacts\\"}"',
         ],
     }
 
+def upload_cdn_step(edition, ver_mode, trigger = None):
+    """Uploads CDN assets using the Grafana build tool.
 
-def upload_cdn_step(edition, ver_mode, trigger=None):
+    Args:
+      edition: controls the output directory for the CDN assets.
+      ver_mode: only uses the step trigger when ver_mode == 'release-branch' or 'main'
+      trigger: a Drone trigger for the step.
+        Defaults to None.
+
+    Returns:
+      Drone step.
+    """
     deps = []
-    if edition in 'enterprise2':
+    if edition in "enterprise2":
         deps.extend(
             [
-                'package' + enterprise2_suffix(edition),
-            ]
+                "package" + enterprise2_suffix(edition),
+            ],
         )
     else:
         deps.extend(
             [
-                'grafana-server',
-            ]
+                "grafana-server",
+            ],
         )
 
     step = {
-        'name': 'upload-cdn-assets' + enterprise2_suffix(edition),
-        'image': publish_image,
-        'depends_on': deps,
-        'environment': {
-            'GCP_KEY': from_secret('gcp_key'),
-            'PRERELEASE_BUCKET': from_secret(prerelease_bucket),
+        "name": "upload-cdn-assets" + enterprise2_suffix(edition),
+        "image": publish_image,
+        "depends_on": deps,
+        "environment": {
+            "GCP_KEY": from_secret("gcp_key"),
+            "PRERELEASE_BUCKET": from_secret(prerelease_bucket),
         },
-        'commands': [
-            './bin/build upload-cdn --edition {}'.format(edition),
+        "commands": [
+            "./bin/build upload-cdn --edition {}".format(edition),
         ],
     }
     if trigger and ver_mode in ("release-branch", "main"):
-        step = dict(step, when=trigger)
+        step = dict(step, when = trigger)
     return step
 
-
-def build_backend_step(edition, ver_mode, variants=None):
-    variants_str = ''
+def build_backend_step(edition, ver_mode, variants = None):
+    """Build the backend code using the Grafana build tool.
+
+    Args:
+      edition: controls which edition of the backend is built.
+      ver_mode: if ver_mode != 'release', pass the DRONE_BUILD_NUMBER environment
+        variable as the value for the --build-id option.
+        TODO: is this option actually used by the build-backend subcommand?
+      variants: a list of variants be passed to the build-backend subcommand
+        using the --variants option.
+        Defaults to None.
+
+    Returns:
+      Drone step.
+    """
+    variants_str = ""
     if variants:
-        variants_str = ' --variants {}'.format(','.join(variants))
+        variants_str = " --variants {}".format(",".join(variants))
 
     # TODO: Convert number of jobs to percentage
-    if ver_mode == 'release':
+    if ver_mode == "release":
         cmds = [
-            './bin/build build-backend --jobs 8 --edition {} ${{DRONE_TAG}}'.format(
+            "./bin/build build-backend --jobs 8 --edition {} ${{DRONE_TAG}}".format(
                 edition,
             ),
         ]
     else:
-        build_no = '${DRONE_BUILD_NUMBER}'
+        build_no = "${DRONE_BUILD_NUMBER}"
         cmds = [
-            './bin/build build-backend --jobs 8 --edition {} --build-id {}{}'.format(
+            "./bin/build build-backend --jobs 8 --edition {} --build-id {}{}".format(
                 edition,
                 build_no,
                 variants_str,
@@ -391,938 +453,1084 @@ def build_backend_step(edition, ver_mode, variants=None):
         ]
 
     return {
-        'name': 'build-backend' + enterprise2_suffix(edition),
-        'image': build_image,
-        'depends_on': [
-            'wire-install',
-            'compile-build-cmd',
+        "name": "build-backend" + enterprise2_suffix(edition),
+        "image": build_image,
+        "depends_on": [
+            "wire-install",
+            "compile-build-cmd",
         ],
-        'commands': cmds,
+        "commands": cmds,
     }
 
-
 def build_frontend_step(edition, ver_mode):
-    build_no = '${DRONE_BUILD_NUMBER}'
+    """Build the frontend code using the Grafana build tool.
+
+    Args:
+      edition: controls which edition of the frontend is built.
+      ver_mode: if ver_mode != 'release', use the DRONE_BUILD_NUMBER environment
+        variable as a build identifier.
+
+    Returns:
+      Drone step.
+    """
+    build_no = "${DRONE_BUILD_NUMBER}"
 
     # TODO: Use percentage for num jobs
-    if ver_mode == 'release':
+    if ver_mode == "release":
         cmds = [
-            './bin/build build-frontend --jobs 8 '
-            + '--edition {} ${{DRONE_TAG}}'.format(edition),
+            "./bin/build build-frontend --jobs 8 " +
+            "--edition {} ${{DRONE_TAG}}".format(edition),
         ]
     else:
         cmds = [
-            './bin/build build-frontend --jobs 8 --edition {} '.format(edition)
-            + '--build-id {}'.format(build_no),
+            "./bin/build build-frontend --jobs 8 --edition {} ".format(edition) +
+            "--build-id {}".format(build_no),
         ]
 
     return {
-        'name': 'build-frontend',
-        'image': build_image,
-        'environment': {
-            'NODE_OPTIONS': '--max_old_space_size=8192',
+        "name": "build-frontend",
+        "image": build_image,
+        "environment": {
+            "NODE_OPTIONS": "--max_old_space_size=8192",
         },
-        'depends_on': [
-            'compile-build-cmd',
-            'yarn-install',
+        "depends_on": [
+            "compile-build-cmd",
+            "yarn-install",
         ],
-        'commands': cmds,
+        "commands": cmds,
     }
 
-
 def build_frontend_package_step(edition, ver_mode):
-    build_no = '${DRONE_BUILD_NUMBER}'
+    """Build the frontend packages using the Grafana build tool.
+
+    Args:
+      edition: controls which edition of the frontend is built.
+      ver_mode: if ver_mode != 'release', use the DRONE_BUILD_NUMBER environment
+        variable as a build identifier.
+
+    Returns:
+      Drone step.
+    """
+    build_no = "${DRONE_BUILD_NUMBER}"
 
     # TODO: Use percentage for num jobs
-    if ver_mode == 'release':
+    if ver_mode == "release":
         cmds = [
-            './bin/build build-frontend-packages --jobs 8 '
-            + '--edition {} ${{DRONE_TAG}}'.format(edition),
+            "./bin/build build-frontend-packages --jobs 8 " +
+            "--edition {} ${{DRONE_TAG}}".format(edition),
         ]
     else:
         cmds = [
-            './bin/build build-frontend-packages --jobs 8 --edition {} '.format(edition)
-            + '--build-id {}'.format(build_no),
+            "./bin/build build-frontend-packages --jobs 8 --edition {} ".format(edition) +
+            "--build-id {}".format(build_no),
         ]
 
     return {
-        'name': 'build-frontend-packages',
-        'image': build_image,
-        'environment': {
-            'NODE_OPTIONS': '--max_old_space_size=8192',
+        "name": "build-frontend-packages",
+        "image": build_image,
+        "environment": {
+            "NODE_OPTIONS": "--max_old_space_size=8192",
         },
-        'depends_on': [
-            'compile-build-cmd',
-            'yarn-install',
+        "depends_on": [
+            "compile-build-cmd",
+            "yarn-install",
         ],
-        'commands': cmds,
+        "commands": cmds,
     }
 
-
 def build_plugins_step(edition, ver_mode):
-    if ver_mode != 'pr':
+    if ver_mode != "pr":
         env = {
-            'GRAFANA_API_KEY': from_secret('grafana_api_key'),
+            "GRAFANA_API_KEY": from_secret("grafana_api_key"),
         }
     else:
         env = None
     return {
-        'name': 'build-plugins',
-        'image': build_image,
-        'environment': env,
-        'depends_on': [
-            'compile-build-cmd',
-            'yarn-install',
+        "name": "build-plugins",
+        "image": build_image,
+        "environment": env,
+        "depends_on": [
+            "compile-build-cmd",
+            "yarn-install",
         ],
-        'commands': [
+        "commands": [
             # TODO: Use percentage for num jobs
-            './bin/build  build-plugins --jobs 8 --edition {}'.format(edition),
+            "./bin/build  build-plugins --jobs 8 --edition {}".format(edition),
         ],
     }
 
-
 def test_backend_step():
     return {
-        'name': 'test-backend',
-        'image': build_image,
-        'depends_on': [
-            'wire-install',
+        "name": "test-backend",
+        "image": build_image,
+        "depends_on": [
+            "wire-install",
         ],
-        'commands': [
-            'go test -short -covermode=atomic -timeout=5m ./pkg/...',
+        "commands": [
+            "go test -short -covermode=atomic -timeout=5m ./pkg/...",
         ],
     }
 
-
 def test_backend_integration_step():
     return {
-        'name': 'test-backend-integration',
-        'image': build_image,
-        'depends_on': [
-            'wire-install',
+        "name": "test-backend-integration",
+        "image": build_image,
+        "depends_on": [
+            "wire-install",
         ],
-        'commands': [
-            'go test -run Integration -covermode=atomic -timeout=5m ./pkg/...',
+        "commands": [
+            "go test -run Integration -covermode=atomic -timeout=5m ./pkg/...",
         ],
     }
 
+def betterer_frontend_step(edition = "oss"):
+    """Run betterer on frontend code.
+
+    Args:
+      edition: controls whether enterprise code is also included in the source.
+        Defaults to 'oss'.
 
-def betterer_frontend_step(edition="oss"):
+    Returns:
+      Drone step.
+    """
     deps = []
     if edition == "enterprise":
-        deps.extend(['init-enterprise'])
-    deps.extend(['yarn-install'])
+        deps.extend(["init-enterprise"])
+    deps.extend(["yarn-install"])
     return {
-        'name': 'betterer-frontend',
-        'image': build_image,
-        'depends_on': deps,
-        'commands': [
-            'yarn betterer ci',
+        "name": "betterer-frontend",
+        "image": build_image,
+        "depends_on": deps,
+        "commands": [
+            "yarn betterer ci",
         ],
     }
 
+def test_frontend_step(edition = "oss"):
+    """Runs tests on frontend code.
 
-def test_frontend_step(edition="oss"):
+    Args:
+      edition: controls whether enterprise code is also included in the source.
+        Defaults to 'oss'.
+
+    Returns:
+      Drone step.
+    """
     deps = []
     if edition == "enterprise":
-        deps.extend(['init-enterprise'])
-    deps.extend(['yarn-install'])
+        deps.extend(["init-enterprise"])
+    deps.extend(["yarn-install"])
     return {
-        'name': 'test-frontend',
-        'image': build_image,
-        'environment': {
-            'TEST_MAX_WORKERS': '50%',
+        "name": "test-frontend",
+        "image": build_image,
+        "environment": {
+            "TEST_MAX_WORKERS": "50%",
         },
-        'depends_on': deps,
-        'commands': [
-            'yarn run ci:test-frontend',
+        "depends_on": deps,
+        "commands": [
+            "yarn run ci:test-frontend",
         ],
     }
 
-
 def lint_frontend_step():
     return {
-        'name': 'lint-frontend',
-        'image': build_image,
-        'environment': {
-            'TEST_MAX_WORKERS': '50%',
+        "name": "lint-frontend",
+        "image": build_image,
+        "environment": {
+            "TEST_MAX_WORKERS": "50%",
         },
-        'depends_on': [
-            'yarn-install',
+        "depends_on": [
+            "yarn-install",
         ],
-        'commands': [
-            'yarn run prettier:check',
-            'yarn run lint',
-            'yarn run i18n:compile',  # TODO: right place for this?
-            'yarn run typecheck',
+        "commands": [
+            "yarn run prettier:check",
+            "yarn run lint",
+            "yarn run i18n:compile",  # TODO: right place for this?
+            "yarn run typecheck",
         ],
     }
 
+def test_a11y_frontend_step(ver_mode, port = 3001):
+    """Runs automated accessiblity tests against the frontend.
 
-def test_a11y_frontend_step(ver_mode, port=3001):
+    Args:
+      ver_mode: controls whether the step is blocking or just reporting.
+        If ver_mode == 'pr', the step causes the pipeline to fail.
+      port: which port to grafana-server is expected to be listening on.
+        Defaults to 3001.
+
+    Returns:
+      Drone step.
+    """
     commands = [
-        'yarn wait-on http://$HOST:$PORT',
+        "yarn wait-on http://$HOST:$PORT",
     ]
-    failure = 'ignore'
-    if ver_mode == 'pr':
+    failure = "ignore"
+    if ver_mode == "pr":
         commands.extend(
             [
-                'pa11y-ci --config .pa11yci-pr.conf.js',
-            ]
+                "pa11y-ci --config .pa11yci-pr.conf.js",
+            ],
         )
-        failure = 'always'
+        failure = "always"
     else:
         commands.extend(
             [
-                'pa11y-ci --config .pa11yci.conf.js --json > pa11y-ci-results.json',
-            ]
+                "pa11y-ci --config .pa11yci.conf.js --json > pa11y-ci-results.json",
+            ],
         )
 
     return {
-        'name': 'test-a11y-frontend',
+        "name": "test-a11y-frontend",
         # TODO which image should be used?
-        'image': 'grafana/docker-puppeteer:1.1.0',
-        'depends_on': [
-            'grafana-server',
+        "image": "grafana/docker-puppeteer:1.1.0",
+        "depends_on": [
+            "grafana-server",
         ],
-        'environment': {
-            'GRAFANA_MISC_STATS_API_KEY': from_secret('grafana_misc_stats_api_key'),
-            'HOST': 'grafana-server',
-            'PORT': port,
+        "environment": {
+            "GRAFANA_MISC_STATS_API_KEY": from_secret("grafana_misc_stats_api_key"),
+            "HOST": "grafana-server",
+            "PORT": port,
         },
-        'failure': failure,
-        'commands': commands,
+        "failure": failure,
+        "commands": commands,
     }
 
+def frontend_metrics_step(trigger = None):
+    """Reports frontend metrics to Grafana Cloud.
 
-def frontend_metrics_step(trigger=None):
+    Args:
+      trigger: a Drone trigger for the step.
+        Defaults to None.
+
+    Returns:
+      Drone step.
+    """
     step = {
-        'name': 'publish-frontend-metrics',
-        'image': build_image,
-        'depends_on': [
-            'test-a11y-frontend',
+        "name": "publish-frontend-metrics",
+        "image": build_image,
+        "depends_on": [
+            "test-a11y-frontend",
         ],
-        'environment': {
-            'GRAFANA_MISC_STATS_API_KEY': from_secret('grafana_misc_stats_api_key'),
+        "environment": {
+            "GRAFANA_MISC_STATS_API_KEY": from_secret("grafana_misc_stats_api_key"),
         },
-        'failure': 'ignore',
-        'commands': [
-            './scripts/ci-frontend-metrics.sh | ./bin/build publish-metrics $${GRAFANA_MISC_STATS_API_KEY}',
+        "failure": "ignore",
+        "commands": [
+            "./scripts/ci-frontend-metrics.sh | ./bin/build publish-metrics $${GRAFANA_MISC_STATS_API_KEY}",
         ],
     }
     if trigger:
-        step = dict(step, when=trigger)
+        step = dict(step, when = trigger)
     return step
 
-
 def codespell_step():
     return {
-        'name': 'codespell',
-        'image': build_image,
-        'commands': [
+        "name": "codespell",
+        "image": build_image,
+        "commands": [
             # Important: all words have to be in lowercase, and separated by "\n".
             'echo -e "unknwon\nreferer\nerrorstring\neror\niam\nwan" > words_to_ignore.txt',
-            'codespell -I words_to_ignore.txt docs/',
-            'rm words_to_ignore.txt',
+            "codespell -I words_to_ignore.txt docs/",
+            "rm words_to_ignore.txt",
         ],
     }
 
-
-def package_step(edition, ver_mode, variants=None):
+def package_step(edition, ver_mode, variants = None):
+    """Packages Grafana with the Grafana build tool.
+
+    Args:
+      edition: controls which edition of Grafana is packaged.
+      ver_mode: controls whether the packages are signed for a release.
+        If ver_mode != 'release', use the DRONE_BUILD_NUMBER environment
+        variable as a build identifier.
+      variants: a list of variants be passed to the package subcommand
+        using the --variants option.
+        Defaults to None.
+
+    Returns:
+      Drone step.
+    """
     deps = [
-        'build-plugins',
-        'build-backend' + enterprise2_suffix(edition),
-        'build-frontend',
-        'build-frontend-packages',
+        "build-plugins",
+        "build-backend" + enterprise2_suffix(edition),
+        "build-frontend",
+        "build-frontend-packages",
     ]
 
-    variants_str = ''
+    variants_str = ""
     if variants:
-        variants_str = ' --variants {}'.format(','.join(variants))
+        variants_str = " --variants {}".format(",".join(variants))
 
-    if ver_mode in ('main', 'release', 'release-branch'):
-        sign_args = ' --sign'
+    if ver_mode in ("main", "release", "release-branch"):
+        sign_args = " --sign"
         env = {
-            'GRAFANA_API_KEY': from_secret('grafana_api_key'),
-            'GPG_PRIV_KEY': from_secret('packages_gpg_private_key'),
-            'GPG_PUB_KEY': from_secret('packages_gpg_public_key'),
-            'GPG_KEY_PASSWORD': from_secret('packages_gpg_passphrase'),
+            "GRAFANA_API_KEY": from_secret("grafana_api_key"),
+            "GPG_PRIV_KEY": from_secret("packages_gpg_private_key"),
+            "GPG_PUB_KEY": from_secret("packages_gpg_public_key"),
+            "GPG_KEY_PASSWORD": from_secret("packages_gpg_passphrase"),
         }
-        test_args = ''
+        test_args = ""
     else:
-        sign_args = ''
+        sign_args = ""
         env = None
+
         # TODO: env vars no longer needed by build if not signing
-        test_args = '. scripts/build/gpg-test-vars.sh && '
+        test_args = ". scripts/build/gpg-test-vars.sh && "
 
     # TODO: Use percentage for jobs
-    if ver_mode == 'release':
+    if ver_mode == "release":
         cmds = [
-            '{}./bin/build package --jobs 8 --edition {} '.format(test_args, edition)
-            + '{} ${{DRONE_TAG}}'.format(sign_args),
+            "{}./bin/build package --jobs 8 --edition {} ".format(test_args, edition) +
+            "{} ${{DRONE_TAG}}".format(sign_args),
         ]
     else:
-        build_no = '${DRONE_BUILD_NUMBER}'
+        build_no = "${DRONE_BUILD_NUMBER}"
         cmds = [
-            '{}./bin/build package --jobs 8 --edition {} '.format(test_args, edition)
-            + '--build-id {}{}{}'.format(build_no, variants_str, sign_args),
+            "{}./bin/build package --jobs 8 --edition {} ".format(test_args, edition) +
+            "--build-id {}{}{}".format(build_no, variants_str, sign_args),
         ]
 
     return {
-        'name': 'package' + enterprise2_suffix(edition),
-        'image': build_image,
-        'depends_on': deps,
-        'environment': env,
-        'commands': cmds,
+        "name": "package" + enterprise2_suffix(edition),
+        "image": build_image,
+        "depends_on": deps,
+        "environment": env,
+        "commands": cmds,
     }
 
+def grafana_server_step(edition, port = 3001):
+    """Runs the grafana-server binary as a service.
+
+    Args:
+      edition: controls which edition of grafana-server to run.
+      port: port to listen on.
+        Defaults to 3001.
 
-def grafana_server_step(edition, port=3001):
-    environment = {'PORT': port, 'ARCH': 'linux-amd64'}
-    if edition == 'enterprise':
-        environment['RUNDIR'] = 'scripts/grafana-server/tmp-grafana-enterprise'
+    Returns:
+      Drone step.
+    """
+    environment = {"PORT": port, "ARCH": "linux-amd64"}
+    if edition == "enterprise":
+        environment["RUNDIR"] = "scripts/grafana-server/tmp-grafana-enterprise"
 
     return {
-        'name': 'grafana-server',
-        'image': build_image,
-        'detach': True,
-        'depends_on': [
-            'build-plugins',
-            'build-backend',
-            'build-frontend',
-            'build-frontend-packages',
+        "name": "grafana-server",
+        "image": build_image,
+        "detach": True,
+        "depends_on": [
+            "build-plugins",
+            "build-backend",
+            "build-frontend",
+            "build-frontend-packages",
         ],
-        'environment': environment,
-        'commands': [
-            './scripts/grafana-server/start-server',
+        "environment": environment,
+        "commands": [
+            "./scripts/grafana-server/start-server",
         ],
     }
 
-
-def e2e_tests_step(suite, port=3001, tries=None):
-    cmd = './bin/build e2e-tests --port {} --suite {}'.format(port, suite)
+def e2e_tests_step(suite, port = 3001, tries = None):
+    cmd = "./bin/build e2e-tests --port {} --suite {}".format(port, suite)
     if tries:
-        cmd += ' --tries {}'.format(tries)
+        cmd += " --tries {}".format(tries)
     return {
-        'name': 'end-to-end-tests-{}'.format(suite),
-        'image': 'cypress/included:9.5.1-node16.14.0-slim-chrome99-ff97',
-        'depends_on': [
-            'grafana-server',
+        "name": "end-to-end-tests-{}".format(suite),
+        "image": "cypress/included:9.5.1-node16.14.0-slim-chrome99-ff97",
+        "depends_on": [
+            "grafana-server",
         ],
-        'environment': {
-            'HOST': 'grafana-server',
+        "environment": {
+            "HOST": "grafana-server",
         },
-        'commands': [
-            'apt-get install -y netcat',
+        "commands": [
+            "apt-get install -y netcat",
             cmd,
         ],
     }
 
+def cloud_plugins_e2e_tests_step(suite, cloud, trigger = None):
+    """Run cloud plugins end-to-end tests.
+
+    Args:
+      suite: affects the pipeline name.
+        TODO: check if this actually affects step behavior.
+      cloud: used to determine cloud provider specific tests.
+      trigger: a Drone trigger for the step.
+        Defaults to None.
 
-def cloud_plugins_e2e_tests_step(suite, cloud, port=3001, video="false", trigger=None):
+    Returns:
+      Drone step.
+    """
     environment = {}
     when = {}
     if trigger:
         when = trigger
-    if cloud == 'azure':
+    if cloud == "azure":
         environment = {
-            'CYPRESS_CI': 'true',
-            'HOST': 'grafana-server',
-            'GITHUB_TOKEN': from_secret('github_token_pr'),
-            'AZURE_SP_APP_ID': from_secret('azure_sp_app_id'),
-            'AZURE_SP_PASSWORD': from_secret('azure_sp_app_pw'),
-            'AZURE_TENANT': from_secret('azure_tenant'),
+            "CYPRESS_CI": "true",
+            "HOST": "grafana-server",
+            "GITHUB_TOKEN": from_secret("github_token_pr"),
+            "AZURE_SP_APP_ID": from_secret("azure_sp_app_id"),
+            "AZURE_SP_PASSWORD": from_secret("azure_sp_app_pw"),
+            "AZURE_TENANT": from_secret("azure_tenant"),
         }
         when = dict(
             when,
-            paths={
-                'include': [
-                    'pkg/tsdb/azuremonitor/**',
-                    'public/app/plugins/datasource/grafana-azure-monitor-datasource/**',
-                    'e2e/cloud-plugins-suite/azure-monitor.spec.ts',
-                ]
+            paths = {
+                "include": [
+                    "pkg/tsdb/azuremonitor/**",
+                    "public/app/plugins/datasource/grafana-azure-monitor-datasource/**",
+                    "e2e/cloud-plugins-suite/azure-monitor.spec.ts",
+                ],
             },
         )
     branch = "${DRONE_SOURCE_BRANCH}".replace("/", "-")
     step = {
-        'name': 'end-to-end-tests-{}-{}'.format(suite, cloud),
-        'image': 'us-docker.pkg.dev/grafanalabs-dev/cloud-data-sources/e2e:latest',
-        'depends_on': [
-            'grafana-server',
+        "name": "end-to-end-tests-{}-{}".format(suite, cloud),
+        "image": "us-docker.pkg.dev/grafanalabs-dev/cloud-data-sources/e2e:latest",
+        "depends_on": [
+            "grafana-server",
         ],
-        'environment': environment,
-        'commands': ['cd /', './cpp-e2e/scripts/ci-run.sh {} {}'.format(cloud, branch)],
+        "environment": environment,
+        "commands": ["cd /", "./cpp-e2e/scripts/ci-run.sh {} {}".format(cloud, branch)],
     }
-    step = dict(step, when=when)
+    step = dict(step, when = when)
     return step
 
-
 def build_docs_website_step():
     return {
-        'name': 'build-docs-website',
+        "name": "build-docs-website",
         # Use latest revision here, since we want to catch if it breaks
-        'image': 'grafana/docs-base:latest',
-        'commands': [
-            'mkdir -p /hugo/content/docs/grafana',
-            'cp -r docs/sources/* /hugo/content/docs/grafana/latest/',
-            'cd /hugo && make prod',
+        "image": "grafana/docs-base:latest",
+        "commands": [
+            "mkdir -p /hugo/content/docs/grafana",
+            "cp -r docs/sources/* /hugo/content/docs/grafana/latest/",
+            "cd /hugo && make prod",
         ],
     }
 
-
-def copy_packages_for_docker_step(edition=None):
+def copy_packages_for_docker_step(edition = None):
     return {
-        'name': 'copy-packages-for-docker',
-        'image': build_image,
-        'depends_on': [
-            'package' + enterprise2_suffix(edition),
+        "name": "copy-packages-for-docker",
+        "image": build_image,
+        "depends_on": [
+            "package" + enterprise2_suffix(edition),
         ],
-        'commands': [
-            'ls dist/*.tar.gz*',
-            'cp dist/*.tar.gz* packaging/docker/',
+        "commands": [
+            "ls dist/*.tar.gz*",
+            "cp dist/*.tar.gz* packaging/docker/",
         ],
     }
 
-
-def build_docker_images_step(
-    edition, ver_mode, archs=None, ubuntu=False, publish=False
-):
-    cmd = './bin/build build-docker --edition {}'.format(edition)
+def build_docker_images_step(edition, archs = None, ubuntu = False, publish = False):
+    """Build Docker images using the Grafana build tool.
+
+    Args:
+      edition: controls which repository the image is published to.
+      archs: a list of architectures to build the image for.
+        Defaults to None.
+      ubuntu: controls whether the final image is built from an Ubuntu base image.
+        Defaults to False.
+      publish: controls whether the built image is saved to a pre-release repository.
+        Defaults to False.
+
+    Returns:
+      Drone step.
+    """
+    cmd = "./bin/build build-docker --edition {}".format(edition)
     if publish:
-        cmd += ' --shouldSave'
+        cmd += " --shouldSave"
 
-    ubuntu_sfx = ''
+    ubuntu_sfx = ""
     if ubuntu:
-        ubuntu_sfx = '-ubuntu'
-        cmd += ' --ubuntu'
+        ubuntu_sfx = "-ubuntu"
+        cmd += " --ubuntu"
 
     if archs:
-        cmd += ' -archs {}'.format(','.join(archs))
+        cmd += " -archs {}".format(",".join(archs))
 
     environment = {
-        'GCP_KEY': from_secret('gcp_key'),
+        "GCP_KEY": from_secret("gcp_key"),
     }
 
-    if edition == 'enterprise2':
+    if edition == "enterprise2":
         environment.update(
-            {'DOCKER_ENTERPRISE2_REPO': from_secret('docker_enterprise2_repo')}
+            {"DOCKER_ENTERPRISE2_REPO": from_secret("docker_enterprise2_repo")},
         )
 
     return {
-        'name': 'build-docker-images' + ubuntu_sfx,
-        'image': 'google/cloud-sdk',
-        'depends_on': [
-            'copy-packages-for-docker',
-            'compile-build-cmd',
+        "name": "build-docker-images" + ubuntu_sfx,
+        "image": "google/cloud-sdk",
+        "depends_on": [
+            "copy-packages-for-docker",
+            "compile-build-cmd",
         ],
-        'commands': [cmd],
-        'volumes': [{'name': 'docker', 'path': '/var/run/docker.sock'}],
-        'environment': environment,
+        "commands": [cmd],
+        "volumes": [{"name": "docker", "path": "/var/run/docker.sock"}],
+        "environment": environment,
     }
 
-
 def fetch_images_step(edition):
     return {
-        'name': 'fetch-images-{}'.format(edition),
-        'image': 'google/cloud-sdk',
-        'environment': {
-            'GCP_KEY': from_secret('gcp_key'),
-            'DOCKER_USER': from_secret('docker_username'),
-            'DOCKER_PASSWORD': from_secret('docker_password'),
-            'DOCKER_ENTERPRISE2_REPO': from_secret('docker_enterprise2_repo'),
+        "name": "fetch-images-{}".format(edition),
+        "image": "google/cloud-sdk",
+        "environment": {
+            "GCP_KEY": from_secret("gcp_key"),
+            "DOCKER_USER": from_secret("docker_username"),
+            "DOCKER_PASSWORD": from_secret("docker_password"),
+            "DOCKER_ENTERPRISE2_REPO": from_secret("docker_enterprise2_repo"),
         },
-        'commands': ['./bin/build artifacts docker fetch --edition {}'.format(edition)],
-        'depends_on': ['compile-build-cmd'],
-        'volumes': [{'name': 'docker', 'path': '/var/run/docker.sock'}],
+        "commands": ["./bin/build artifacts docker fetch --edition {}".format(edition)],
+        "depends_on": ["compile-build-cmd"],
+        "volumes": [{"name": "docker", "path": "/var/run/docker.sock"}],
     }
 
-
-def publish_images_step(edition, ver_mode, mode, docker_repo, trigger=None):
+def publish_images_step(edition, ver_mode, mode, docker_repo, trigger = None):
+    """Generates a step for publishing public Docker images with grabpl.
+
+    Args:
+      edition: controls which version of an image is fetched in the case of a release.
+        It also controls which publishing implementation is used.
+      ver_mode: controls whether the image needs to be built or retrieved from a previous build.
+        If ver_mode == 'release', the previously built image is fetched instead of being built again.
+      mode: uses to control the publishing of security images when mode == 'security'.
+      docker_repo: the Docker image name.
+        It is combined with the 'grafana/' library prefix.
+      trigger: a Drone trigger for the pipeline.
+        Defaults to None.
+
+    Returns:
+      Drone step.
+    """
     name = docker_repo
-    docker_repo = 'grafana/{}'.format(docker_repo)
-    if mode == 'security':
-        mode = '--{} '.format(mode)
+    docker_repo = "grafana/{}".format(docker_repo)
+    if mode == "security":
+        mode = "--{} ".format(mode)
     else:
-        mode = ''
+        mode = ""
 
     environment = {
-        'GCP_KEY': from_secret('gcp_key'),
-        'DOCKER_USER': from_secret('docker_username'),
-        'DOCKER_PASSWORD': from_secret('docker_password'),
+        "GCP_KEY": from_secret("gcp_key"),
+        "DOCKER_USER": from_secret("docker_username"),
+        "DOCKER_PASSWORD": from_secret("docker_password"),
     }
 
-    cmd = './bin/grabpl artifacts docker publish {}--dockerhub-repo {}'.format(
-        mode, docker_repo
+    cmd = "./bin/grabpl artifacts docker publish {}--dockerhub-repo {}".format(
+        mode,
+        docker_repo,
     )
 
-    deps = ['build-docker-images', 'build-docker-images-ubuntu']
-    if ver_mode == 'release':
-        deps = ['fetch-images-{}'.format(edition)]
-        cmd += ' --version-tag ${DRONE_TAG}'
+    deps = ["build-docker-images", "build-docker-images-ubuntu"]
+    if ver_mode == "release":
+        deps = ["fetch-images-{}".format(edition)]
+        cmd += " --version-tag ${DRONE_TAG}"
 
-    if edition == 'enterprise2':
+    if edition == "enterprise2":
         name = edition
-        docker_repo = '$${DOCKER_ENTERPRISE2_REPO}'
+        docker_repo = "$${DOCKER_ENTERPRISE2_REPO}"
         environment.update(
             {
-                'GCP_KEY': from_secret('gcp_key_hg'),
-                'DOCKER_ENTERPRISE2_REPO': from_secret('docker_enterprise2_repo'),
-            }
+                "GCP_KEY": from_secret("gcp_key_hg"),
+                "DOCKER_ENTERPRISE2_REPO": from_secret("docker_enterprise2_repo"),
+            },
         )
-        cmd = './bin/build artifacts docker publish-enterprise2 --dockerhub-repo {}'.format(
-            docker_repo
+        cmd = "./bin/build artifacts docker publish-enterprise2 --dockerhub-repo {}".format(
+            docker_repo,
         )
 
     step = {
-        'name': 'publish-images-{}'.format(name),
-        'image': 'google/cloud-sdk',
-        'environment': environment,
-        'commands': [cmd],
-        'depends_on': deps,
-        'volumes': [{'name': 'docker', 'path': '/var/run/docker.sock'}],
+        "name": "publish-images-{}".format(name),
+        "image": "google/cloud-sdk",
+        "environment": environment,
+        "commands": [cmd],
+        "depends_on": deps,
+        "volumes": [{"name": "docker", "path": "/var/run/docker.sock"}],
     }
     if trigger and ver_mode in ("release-branch", "main"):
-        step = dict(step, when=trigger)
+        step = dict(step, when = trigger)
 
     return step
 
-
 def postgres_integration_tests_step():
     cmds = [
-        'apt-get update',
-        'apt-get install -yq postgresql-client',
-        'dockerize -wait tcp://postgres:5432 -timeout 120s',
-        'psql -p 5432 -h postgres -U grafanatest -d grafanatest -f '
-        + 'devenv/docker/blocks/postgres_tests/setup.sql',
+        "apt-get update",
+        "apt-get install -yq postgresql-client",
+        "dockerize -wait tcp://postgres:5432 -timeout 120s",
+        "psql -p 5432 -h postgres -U grafanatest -d grafanatest -f " +
+        "devenv/docker/blocks/postgres_tests/setup.sql",
         # Make sure that we don't use cached results for another database
-        'go clean -testcache',
+        "go clean -testcache",
         "go list './pkg/...' | xargs -I {} sh -c 'go test -run Integration -covermode=atomic -timeout=5m {}'",
     ]
     return {
-        'name': 'postgres-integration-tests',
-        'image': build_image,
-        'depends_on': ['wire-install'],
-        'environment': {
-            'PGPASSWORD': 'grafanatest',
-            'GRAFANA_TEST_DB': 'postgres',
-            'POSTGRES_HOST': 'postgres',
+        "name": "postgres-integration-tests",
+        "image": build_image,
+        "depends_on": ["wire-install"],
+        "environment": {
+            "PGPASSWORD": "grafanatest",
+            "GRAFANA_TEST_DB": "postgres",
+            "POSTGRES_HOST": "postgres",
         },
-        'commands': cmds,
+        "commands": cmds,
     }
 
-
 def mysql_integration_tests_step():
     cmds = [
-        'apt-get update',
-        'apt-get install -yq default-mysql-client',
-        'dockerize -wait tcp://mysql:3306 -timeout 120s',
-        'cat devenv/docker/blocks/mysql_tests/setup.sql | mysql -h mysql -P 3306 -u root -prootpass',
+        "apt-get update",
+        "apt-get install -yq default-mysql-client",
+        "dockerize -wait tcp://mysql:3306 -timeout 120s",
+        "cat devenv/docker/blocks/mysql_tests/setup.sql | mysql -h mysql -P 3306 -u root -prootpass",
         # Make sure that we don't use cached results for another database
-        'go clean -testcache',
+        "go clean -testcache",
         "go list './pkg/...' | xargs -I {} sh -c 'go test -run Integration -covermode=atomic -timeout=5m {}'",
     ]
     return {
-        'name': 'mysql-integration-tests',
-        'image': build_image,
-        'depends_on': ['wire-install'],
-        'environment': {
-            'GRAFANA_TEST_DB': 'mysql',
-            'MYSQL_HOST': 'mysql',
+        "name": "mysql-integration-tests",
+        "image": build_image,
+        "depends_on": ["wire-install"],
+        "environment": {
+            "GRAFANA_TEST_DB": "mysql",
+            "MYSQL_HOST": "mysql",
         },
-        'commands': cmds,
+        "commands": cmds,
     }
 
-
 def redis_integration_tests_step():
     return {
-        'name': 'redis-integration-tests',
-        'image': build_image,
-        'depends_on': ['wire-install'],
-        'environment': {
-            'REDIS_URL': 'redis://redis:6379/0',
+        "name": "redis-integration-tests",
+        "image": build_image,
+        "depends_on": ["wire-install"],
+        "environment": {
+            "REDIS_URL": "redis://redis:6379/0",
         },
-        'commands': [
-            'dockerize -wait tcp://redis:6379/0 -timeout 120s',
-            'go clean -testcache',
-            "go list './pkg/...' | xargs -I {} sh -c 'go test -run Integration -covermode=atomic -timeout=5m {}'",
+        "commands": [
+            "dockerize -wait tcp://redis:6379/0 -timeout 120s",
+            "./bin/grabpl integration-tests",
         ],
     }
 
-
 def memcached_integration_tests_step():
     return {
-        'name': 'memcached-integration-tests',
-        'image': build_image,
-        'depends_on': ['wire-install'],
-        'environment': {
-            'MEMCACHED_HOSTS': 'memcached:11211',
+        "name": "memcached-integration-tests",
+        "image": build_image,
+        "depends_on": ["wire-install"],
+        "environment": {
+            "MEMCACHED_HOSTS": "memcached:11211",
         },
-        'commands': [
-            'dockerize -wait tcp://memcached:11211 -timeout 120s',
-            'go clean -testcache',
+        "commands": [
+            "dockerize -wait tcp://memcached:11211 -timeout 120s",
+            "go clean -testcache",
             "go list './pkg/...' | xargs -I {} sh -c 'go test -run Integration -covermode=atomic -timeout=5m {}'",
         ],
     }
 
+def release_canary_npm_packages_step(trigger = None):
+    """Releases canary NPM packages.
+
+    Args:
+      trigger: a Drone trigger for the step.
+        Defaults to None.
 
-def release_canary_npm_packages_step(trigger=None):
+    Returns:
+      Drone step.
+    """
     step = {
-        'name': 'release-canary-npm-packages',
-        'image': build_image,
-        'depends_on': end_to_end_tests_deps(),
-        'environment': {
-            'NPM_TOKEN': from_secret('npm_token'),
+        "name": "release-canary-npm-packages",
+        "image": build_image,
+        "depends_on": end_to_end_tests_deps(),
+        "environment": {
+            "NPM_TOKEN": from_secret("npm_token"),
         },
-        'commands': [
-            './scripts/circle-release-canary-packages.sh',
+        "commands": [
+            "./scripts/circle-release-canary-packages.sh",
         ],
     }
     if trigger:
-        step = dict(step, when=trigger)
+        step = dict(step, when = trigger)
     return step
 
-
 def enterprise2_suffix(edition):
-    if edition == 'enterprise2':
-        return '-{}'.format(edition)
-    return ''
-
-
-def upload_packages_step(edition, ver_mode, trigger=None):
+    if edition == "enterprise2":
+        return "-{}".format(edition)
+    return ""
+
+def upload_packages_step(edition, ver_mode, trigger = None):
+    """Upload packages to object storage.
+
+    Args:
+      edition: controls which edition of Grafana packages to upload.
+      ver_mode: when ver_mode == 'main', inhibit upload of enterprise
+        edition packages when executed.
+      trigger: a Drone trigger for the step.
+        Defaults to None.
+
+    Returns:
+      Drone step.
+    """
     step = {
-        'name': 'upload-packages' + enterprise2_suffix(edition),
-        'image': publish_image,
-        'depends_on': end_to_end_tests_deps(),
-        'environment': {
-            'GCP_KEY': from_secret('gcp_key'),
-            'PRERELEASE_BUCKET': from_secret('prerelease_bucket'),
+        "name": "upload-packages" + enterprise2_suffix(edition),
+        "image": publish_image,
+        "depends_on": end_to_end_tests_deps(),
+        "environment": {
+            "GCP_KEY": from_secret("gcp_key"),
+            "PRERELEASE_BUCKET": from_secret("prerelease_bucket"),
         },
-        'commands': [
-            './bin/build upload-packages --edition {}'.format(edition),
+        "commands": [
+            "./bin/build upload-packages --edition {}".format(edition),
         ],
     }
     if trigger and ver_mode in ("release-branch", "main"):
-        step = dict(step, when=trigger)
+        step = dict(step, when = trigger)
     return step
 
-
 def publish_grafanacom_step(edition, ver_mode):
-    if ver_mode == 'release':
-        cmd = './bin/build publish grafana-com --edition {} ${{DRONE_TAG}}'.format(
+    """Publishes Grafana packages to grafana.com.
+
+    Args:
+      edition: controls which edition of Grafana to publish to.
+      ver_mode: if ver_mode == 'main', pass the DRONE_BUILD_NUMBER environment
+        variable as the value for the --build-id option.
+        TODO: is this actually used by the grafanacom subcommand? I think it might
+        just use the environment varaiable directly.
+
+    Returns:
+      Drone step.
+    """
+    if ver_mode == "release":
+        cmd = "./bin/build publish grafana-com --edition {} ${{DRONE_TAG}}".format(
             edition,
         )
-    elif ver_mode == 'main':
-        build_no = '${DRONE_BUILD_NUMBER}'
-        cmd = './bin/build publish grafana-com --edition {} --build-id {}'.format(
+    elif ver_mode == "main":
+        build_no = "${DRONE_BUILD_NUMBER}"
+        cmd = "./bin/build publish grafana-com --edition {} --build-id {}".format(
             edition,
             build_no,
         )
     else:
-        fail('Unexpected version mode {}'.format(ver_mode))
+        fail("Unexpected version mode {}".format(ver_mode))
 
     return {
-        'name': 'publish-grafanacom-{}'.format(edition),
-        'image': publish_image,
-        'depends_on': [
-            'publish-linux-packages-deb',
-            'publish-linux-packages-rpm',
+        "name": "publish-grafanacom-{}".format(edition),
+        "image": publish_image,
+        "depends_on": [
+            "publish-linux-packages-deb",
+            "publish-linux-packages-rpm",
         ],
-        'environment': {
-            'GRAFANA_COM_API_KEY': from_secret('grafana_api_key'),
-            'GCP_KEY': from_secret('gcp_key'),
+        "environment": {
+            "GRAFANA_COM_API_KEY": from_secret("grafana_api_key"),
+            "GCP_KEY": from_secret("gcp_key"),
         },
-        'commands': [
+        "commands": [
             cmd,
         ],
     }
 
-
-def publish_linux_packages_step(edition, package_manager='deb'):
+def publish_linux_packages_step(edition, package_manager = "deb"):
     return {
-        'name': 'publish-linux-packages-{}'.format(package_manager),
+        "name": "publish-linux-packages-{}".format(package_manager),
         # See https://github.com/grafana/deployment_tools/blob/master/docker/package-publish/README.md for docs on that image
-        'image': 'us.gcr.io/kubernetes-dev/package-publish:latest',
-        'depends_on': ['grabpl'],
-        'privileged': True,
-        'settings': {
-            'access_key_id': from_secret('packages_access_key_id'),
-            'secret_access_key': from_secret('packages_secret_access_key'),
-            'service_account_json': from_secret('packages_service_account'),
-            'target_bucket': 'grafana-packages',
-            'deb_distribution': 'auto',
-            'gpg_passphrase': from_secret('packages_gpg_passphrase'),
-            'gpg_public_key': from_secret('packages_gpg_public_key'),
-            'gpg_private_key': from_secret('packages_gpg_private_key'),
-            'package_path': 'gs://grafana-prerelease/artifacts/downloads/*${{DRONE_TAG}}/{}/**.{}'.format(
-                edition, package_manager
+        "image": "us.gcr.io/kubernetes-dev/package-publish:latest",
+        "depends_on": ["grabpl"],
+        "privileged": True,
+        "settings": {
+            "access_key_id": from_secret("packages_access_key_id"),
+            "secret_access_key": from_secret("packages_secret_access_key"),
+            "service_account_json": from_secret("packages_service_account"),
+            "target_bucket": "grafana-packages",
+            "deb_distribution": "auto",
+            "gpg_passphrase": from_secret("packages_gpg_passphrase"),
+            "gpg_public_key": from_secret("packages_gpg_public_key"),
+            "gpg_private_key": from_secret("packages_gpg_private_key"),
+            "package_path": "gs://grafana-prerelease/artifacts/downloads/*${{DRONE_TAG}}/{}/**.{}".format(
+                edition,
+                package_manager,
             ),
         },
     }
 
-
 def get_windows_steps(edition, ver_mode):
+    """Generate the list of Windows steps.
+
+    Args:
+      edition: used to differentiate steps for different Grafana editions.
+      ver_mode: used to differentiate steps for different version modes.
+
+    Returns:
+      List of Drone steps.
+    """
     steps = [
-        identify_runner_step('windows'),
+        identify_runner_step("windows"),
     ]
 
-    if edition in ('enterprise', 'enterprise2'):
-        if ver_mode == 'release':
-            committish = '${DRONE_TAG}'
-        elif ver_mode == 'release-branch':
-            committish = '$$env:DRONE_BRANCH'
+    if edition in ("enterprise", "enterprise2"):
+        if ver_mode == "release":
+            committish = "${DRONE_TAG}"
+        elif ver_mode == "release-branch":
+            committish = "$$env:DRONE_BRANCH"
         else:
-            committish = '$$env:DRONE_COMMIT'
+            committish = "$$env:DRONE_COMMIT"
 
         # For enterprise, we have to clone both OSS and enterprise and merge the latter into the former
         download_grabpl_cmds = [
             '$$ProgressPreference = "SilentlyContinue"',
-            'Invoke-WebRequest https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/{}/windows/grabpl.exe -OutFile grabpl.exe'.format(
-                grabpl_version
+            "Invoke-WebRequest https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/{}/windows/grabpl.exe -OutFile grabpl.exe".format(
+                grabpl_version,
             ),
         ]
 
         clone_cmds = [
             'git clone "https://$$env:GITHUB_TOKEN@github.com/grafana/grafana-enterprise.git"',
-            'cd grafana-enterprise',
-            'git checkout {}'.format(committish),
+            "cd grafana-enterprise",
+            "git checkout {}".format(committish),
         ]
 
         init_cmds = [
             # Need to move grafana-enterprise out of the way, so directory is empty and can be cloned into
-            'cp -r grafana-enterprise C:\\App\\grafana-enterprise',
-            'rm -r -force grafana-enterprise',
-            'cp grabpl.exe C:\\App\\grabpl.exe',
-            'rm -force grabpl.exe',
-            'C:\\App\\grabpl.exe init-enterprise --github-token $$env:GITHUB_TOKEN C:\\App\\grafana-enterprise',
-            'cp C:\\App\\grabpl.exe grabpl.exe',
+            "cp -r grafana-enterprise C:\\App\\grafana-enterprise",
+            "rm -r -force grafana-enterprise",
+            "cp grabpl.exe C:\\App\\grabpl.exe",
+            "rm -force grabpl.exe",
+            "C:\\App\\grabpl.exe init-enterprise --github-token $$env:GITHUB_TOKEN C:\\App\\grafana-enterprise",
+            "cp C:\\App\\grabpl.exe grabpl.exe",
         ]
 
         steps.extend(
             [
                 {
-                    'name': 'clone',
-                    'image': wix_image,
-                    'environment': {
-                        'GITHUB_TOKEN': from_secret('github_token'),
+                    "name": "clone",
+                    "image": wix_image,
+                    "environment": {
+                        "GITHUB_TOKEN": from_secret("github_token"),
                     },
-                    'commands': download_grabpl_cmds + clone_cmds,
+                    "commands": download_grabpl_cmds + clone_cmds,
                 },
                 {
-                    'name': 'windows-init',
-                    'image': wix_image,
-                    'commands': init_cmds,
-                    'depends_on': ['clone'],
-                    'environment': {'GITHUB_TOKEN': from_secret('github_token')},
+                    "name": "windows-init",
+                    "image": wix_image,
+                    "commands": init_cmds,
+                    "depends_on": ["clone"],
+                    "environment": {"GITHUB_TOKEN": from_secret("github_token")},
                 },
-            ]
+            ],
         )
     else:
         init_cmds = [
             '$$ProgressPreference = "SilentlyContinue"',
-            'Invoke-WebRequest https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/{}/windows/grabpl.exe -OutFile grabpl.exe'.format(
-                grabpl_version
+            "Invoke-WebRequest https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/{}/windows/grabpl.exe -OutFile grabpl.exe".format(
+                grabpl_version,
             ),
         ]
 
         steps.extend(
             [
                 {
-                    'name': 'windows-init',
-                    'image': wix_image,
-                    'commands': init_cmds,
+                    "name": "windows-init",
+                    "image": wix_image,
+                    "commands": init_cmds,
                 },
-            ]
+            ],
         )
 
     if (
-        ver_mode == 'main' and (edition not in ('enterprise', 'enterprise2'))
+        ver_mode == "main" and (edition not in ("enterprise", "enterprise2"))
     ) or ver_mode in (
-        'release',
-        'release-branch',
+        "release",
+        "release-branch",
     ):
-        bucket = '%PRERELEASE_BUCKET%/artifacts/downloads'
-        if ver_mode == 'release':
-            ver_part = '${DRONE_TAG}'
-            dir = 'release'
+        bucket = "%PRERELEASE_BUCKET%/artifacts/downloads"
+        if ver_mode == "release":
+            ver_part = "${DRONE_TAG}"
+            dir = "release"
         else:
-            dir = 'main'
-            bucket = 'grafana-downloads'
-            build_no = 'DRONE_BUILD_NUMBER'
-            ver_part = '--build-id $$env:{}'.format(build_no)
+            dir = "main"
+            bucket = "grafana-downloads"
+            build_no = "DRONE_BUILD_NUMBER"
+            ver_part = "--build-id $$env:{}".format(build_no)
         installer_commands = [
-            '$$gcpKey = $$env:GCP_KEY',
-            '[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($$gcpKey)) > gcpkey.json',
+            "$$gcpKey = $$env:GCP_KEY",
+            "[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($$gcpKey)) > gcpkey.json",
             # gcloud fails to read the file unless converted with dos2unix
-            'dos2unix gcpkey.json',
-            'gcloud auth activate-service-account --key-file=gcpkey.json',
-            'rm gcpkey.json',
-            'cp C:\\App\\nssm-2.24.zip .',
+            "dos2unix gcpkey.json",
+            "gcloud auth activate-service-account --key-file=gcpkey.json",
+            "rm gcpkey.json",
+            "cp C:\\App\\nssm-2.24.zip .",
         ]
         if (
-            ver_mode == 'main' and (edition not in ('enterprise', 'enterprise2'))
-        ) or ver_mode in ('release',):
+            ver_mode == "main" and (edition not in ("enterprise", "enterprise2"))
+        ) or ver_mode in ("release",):
             installer_commands.extend(
                 [
-                    '.\\grabpl.exe windows-installer --edition {} {}'.format(
-                        edition, ver_part
+                    ".\\grabpl.exe windows-installer --edition {} {}".format(
+                        edition,
+                        ver_part,
                     ),
                     '$$fname = ((Get-Childitem grafana*.msi -name) -split "`n")[0]',
-                ]
+                ],
             )
-            if ver_mode == 'main':
+            if ver_mode == "main":
                 installer_commands.extend(
                     [
-                        'gsutil cp $$fname gs://{}/{}/{}/'.format(bucket, edition, dir),
+                        "gsutil cp $$fname gs://{}/{}/{}/".format(bucket, edition, dir),
                         'gsutil cp "$$fname.sha256" gs://{}/{}/{}/'.format(
-                            bucket, edition, dir
+                            bucket,
+                            edition,
+                            dir,
                         ),
-                    ]
+                    ],
                 )
             else:
                 installer_commands.extend(
                     [
-                        'gsutil cp $$fname gs://{}/{}/{}/{}/'.format(
-                            bucket, ver_part, edition, dir
+                        "gsutil cp $$fname gs://{}/{}/{}/{}/".format(
+                            bucket,
+                            ver_part,
+                            edition,
+                            dir,
                         ),
                         'gsutil cp "$$fname.sha256" gs://{}/{}/{}/{}/'.format(
-                            bucket, ver_part, edition, dir
+                            bucket,
+                            ver_part,
+                            edition,
+                            dir,
                         ),
-                    ]
+                    ],
                 )
         steps.append(
             {
-                'name': 'build-windows-installer',
-                'image': wix_image,
-                'depends_on': [
-                    'windows-init',
+                "name": "build-windows-installer",
+                "image": wix_image,
+                "depends_on": [
+                    "windows-init",
                 ],
-                'environment': {
-                    'GCP_KEY': from_secret('gcp_key'),
-                    'PRERELEASE_BUCKET': from_secret(prerelease_bucket),
-                    'GITHUB_TOKEN': from_secret('github_token'),
+                "environment": {
+                    "GCP_KEY": from_secret("gcp_key"),
+                    "PRERELEASE_BUCKET": from_secret(prerelease_bucket),
+                    "GITHUB_TOKEN": from_secret("github_token"),
                 },
-                'commands': installer_commands,
-            }
+                "commands": installer_commands,
+            },
         )
 
     return steps
 
-
 def verify_gen_cue_step():
     return {
-        'name': 'verify-gen-cue',
-        'image': build_image,
-        'depends_on': [],
-        'commands': [
-            '# It is required that code generated from Thema/CUE be committed and in sync with its inputs.',
-            '# The following command will fail if running code generators produces any diff in output.',
-            'CODEGEN_VERIFY=1 make gen-cue',
+        "name": "verify-gen-cue",
+        "image": build_image,
+        "depends_on": [],
+        "commands": [
+            "# It is required that code generated from Thema/CUE be committed and in sync with its inputs.",
+            "# The following command will fail if running code generators produces any diff in output.",
+            "CODEGEN_VERIFY=1 make gen-cue",
         ],
     }
 
-
 def verify_gen_jsonnet_step():
     return {
-        'name': 'verify-gen-jsonnet',
-        'image': build_image,
-        'depends_on': [],
-        'commands': [
-            '# It is required that generated jsonnet is committed and in sync with its inputs.',
-            '# The following command will fail if running code generators produces any diff in output.',
-            'CODEGEN_VERIFY=1 make gen-jsonnet',
+        "name": "verify-gen-jsonnet",
+        "image": build_image,
+        "depends_on": [],
+        "commands": [
+            "# It is required that generated jsonnet is committed and in sync with its inputs.",
+            "# The following command will fail if running code generators produces any diff in output.",
+            "CODEGEN_VERIFY=1 make gen-jsonnet",
         ],
     }
 
-
 def trigger_test_release():
     return {
-        'name': 'trigger-test-release',
-        'image': build_image,
-        'environment': {
-            'GITHUB_TOKEN': from_secret('github_token_pr'),
-            'DOWNSTREAM_REPO': from_secret('downstream'),
-            'TEST_TAG': 'v0.0.0-test',
+        "name": "trigger-test-release",
+        "image": build_image,
+        "environment": {
+            "GITHUB_TOKEN": from_secret("github_token_pr"),
+            "DOWNSTREAM_REPO": from_secret("downstream"),
+            "TEST_TAG": "v0.0.0-test",
         },
-        'commands': [
+        "commands": [
             'git clone "https://$${GITHUB_TOKEN}@github.com/grafana/grafana-enterprise.git" --depth=1',
-            'cd grafana-enterprise',
+            "cd grafana-enterprise",
             'git fetch origin "refs/tags/*:refs/tags/*" --quiet',
-            'if git show-ref --tags $${TEST_TAG} --quiet; then git tag -d $${TEST_TAG} && git push --delete origin $${TEST_TAG}; fi',
-            'git tag $${TEST_TAG} && git push origin $${TEST_TAG}',
-            'cd -',
+            "if git show-ref --tags $${TEST_TAG} --quiet; then git tag -d $${TEST_TAG} && git push --delete origin $${TEST_TAG}; fi",
+            "git tag $${TEST_TAG} && git push origin $${TEST_TAG}",
+            "cd -",
             'git fetch https://$${GITHUB_TOKEN}@github.com/grafana/grafana.git "refs/tags/*:refs/tags/*" --quiet && git fetch --quiet',
-            'if git show-ref --tags $${TEST_TAG} --quiet; then git tag -d $${TEST_TAG} && git push --delete https://$${GITHUB_TOKEN}@github.com/grafana/grafana.git $${TEST_TAG}; fi',
-            'git tag $${TEST_TAG} && git push https://$${GITHUB_TOKEN}@github.com/grafana/grafana.git $${TEST_TAG}',
+            "if git show-ref --tags $${TEST_TAG} --quiet; then git tag -d $${TEST_TAG} && git push --delete https://$${GITHUB_TOKEN}@github.com/grafana/grafana.git $${TEST_TAG}; fi",
+            "git tag $${TEST_TAG} && git push https://$${GITHUB_TOKEN}@github.com/grafana/grafana.git $${TEST_TAG}",
         ],
-        'failure': 'ignore',
-        'when': {
-            'paths': {
-                'include': [
-                    '.drone.yml',
-                    'pkg/build/**',
-                ]
+        "failure": "ignore",
+        "when": {
+            "paths": {
+                "include": [
+                    ".drone.yml",
+                    "pkg/build/**",
+                ],
             },
-            'repo': [
-                'grafana/grafana',
+            "repo": [
+                "grafana/grafana",
             ],
         },
     }
 
-
 def artifacts_page_step():
     return {
-        'name': 'artifacts-page',
-        'image': build_image,
-        'depends_on': [
-            'grabpl',
+        "name": "artifacts-page",
+        "image": build_image,
+        "depends_on": [
+            "grabpl",
         ],
-        'environment': {
-            'GCP_KEY': from_secret('gcp_key'),
+        "environment": {
+            "GCP_KEY": from_secret("gcp_key"),
         },
-        'commands': [
-            './bin/grabpl artifacts-page',
+        "commands": [
+            "./bin/grabpl artifacts-page",
         ],
     }
 
-
 def end_to_end_tests_deps():
     return [
-        'end-to-end-tests-dashboards-suite',
-        'end-to-end-tests-panels-suite',
-        'end-to-end-tests-smoke-tests-suite',
-        'end-to-end-tests-various-suite',
+        "end-to-end-tests-dashboards-suite",
+        "end-to-end-tests-panels-suite",
+        "end-to-end-tests-smoke-tests-suite",
+        "end-to-end-tests-various-suite",
     ]
 
-
-def compile_build_cmd(edition='oss'):
+def compile_build_cmd(edition = "oss"):
     dependencies = []
-    if edition in ('enterprise', 'enterprise2'):
+    if edition in ("enterprise", "enterprise2"):
         dependencies = [
-            'init-enterprise',
+            "init-enterprise",
         ]
     return {
-        'name': 'compile-build-cmd',
-        'image': go_image,
-        'commands': [
+        "name": "compile-build-cmd",
+        "image": go_image,
+        "commands": [
             "go build -o ./bin/build -ldflags '-extldflags -static' ./pkg/build/cmd",
         ],
-        'depends_on': dependencies,
-        'environment': {
-            'CGO_ENABLED': 0,
+        "depends_on": dependencies,
+        "environment": {
+            "CGO_ENABLED": 0,
         },
     }
 
-
 def get_trigger_storybook(ver_mode):
-    trigger_storybook = ''
-    if ver_mode == 'release':
-        trigger_storybook = {'event': ['tag']}
+    """Generate a Drone trigger for UI changes that affect the Grafana UI storybook.
+
+    Args:
+      ver_mode: affects whether the trigger is event tags or changed files.
+
+    Returns:
+      Drone trigger.
+    """
+    trigger_storybook = ""
+    if ver_mode == "release":
+        trigger_storybook = {"event": ["tag"]}
     else:
         trigger_storybook = {
-            'paths': {
-                'include': [
-                    'packages/grafana-ui/**',
+            "paths": {
+                "include": [
+                    "packages/grafana-ui/**",
                 ],
-            }
+            },
         }
     return trigger_storybook
diff --git a/scripts/drone/utils/utils.star b/scripts/drone/utils/utils.star
index 4178dae8a99..e3c79beee89 100644
--- a/scripts/drone/utils/utils.star
+++ b/scripts/drone/utils/utils.star
@@ -1,112 +1,136 @@
-load(
-    'scripts/drone/steps/lib.star',
-    'download_grabpl_step',
-    'slack_step',
-)
+"""
+This module contains utility functions for generating Drone pipelines.
+"""
 
 load(
-    'scripts/drone/vault.star',
-    'from_secret',
-    'pull_secret',
+    "scripts/drone/steps/lib.star",
+    "slack_step",
 )
+load("scripts/drone/vault.star", "pull_secret")
 
-failure_template = 'Build {{build.number}} failed for commit: <https://github.com/{{repo.owner}}/{{repo.name}}/commit/{{build.commit}}|{{ truncate build.commit 8 }}>: {{build.link}}\nBranch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}>\nAuthor: {{build.author}}'
-drone_change_template = '`.drone.yml` and `starlark` files have been changed on the OSS repo, by: {{build.author}}. \nBranch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}>\nCommit hash: <https://github.com/{{repo.owner}}/{{repo.name}}/commit/{{build.commit}}|{{ truncate build.commit 8 }}>'
-
+failure_template = "Build {{build.number}} failed for commit: <https://github.com/{{repo.owner}}/{{repo.name}}/commit/{{build.commit}}|{{ truncate build.commit 8 }}>: {{build.link}}\nBranch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}>\nAuthor: {{build.author}}"
+drone_change_template = "`.drone.yml` and `starlark` files have been changed on the OSS repo, by: {{build.author}}. \nBranch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}>\nCommit hash: <https://github.com/{{repo.owner}}/{{repo.name}}/commit/{{build.commit}}|{{ truncate build.commit 8 }}>"
 
 def pipeline(
-    name,
-    edition,
-    trigger,
-    steps,
-    services=[],
-    platform='linux',
-    depends_on=[],
-    environment=None,
-    volumes=[],
-):
-    if platform != 'windows':
+        name,
+        edition,
+        trigger,
+        steps,
+        services = [],
+        platform = "linux",
+        depends_on = [],
+        environment = None,
+        volumes = []):
+    """Generate a Drone Docker pipeline with commonly used values.
+
+    In addition to the parameters provided, it configures:
+      - the use of an image pull secret
+      - a retry count for cloning
+      - a volume 'docker' that can be used to access the Docker socket
+
+    Args:
+      name: controls the pipeline name.
+      edition: used to differentiate the pipeline for enterprise builds.
+      trigger: a Drone trigger for the pipeline.
+      steps: the Drone steps for the pipeline.
+      services: auxilliary services used during the pipeline.
+        Defaults to [].
+      platform: abstracts platform specific configuration primarily for different Drone behavior on Windows.
+        Defaults to 'linux'.
+      depends_on: list of pipelines that must have succeeded before this pipeline can start.
+        Defaults to [].
+      environment: environment variables passed through to pipeline steps.
+        Defaults to None.
+      volumes: additional volumes available to be mounted by pipeline steps.
+        Defaults to [].
+
+    Returns:
+      Drone pipeline
+    """
+    if platform != "windows":
         platform_conf = {
-            'platform': {'os': 'linux', 'arch': 'amd64'},
+            "platform": {"os": "linux", "arch": "amd64"},
             # A shared cache is used on the host
             # To avoid issues with parallel builds, we run this repo on single build agents
-            'node': {'type': 'no-parallel'},
+            "node": {"type": "no-parallel"},
         }
     else:
         platform_conf = {
-            'platform': {
-                'os': 'windows',
-                'arch': 'amd64',
-                'version': '1809',
-            }
+            "platform": {
+                "os": "windows",
+                "arch": "amd64",
+                "version": "1809",
+            },
         }
 
     pipeline = {
-        'kind': 'pipeline',
-        'type': 'docker',
-        'name': name,
-        'trigger': trigger,
-        'services': services,
-        'steps': steps,
-        'clone': {
-            'retries': 3,
+        "kind": "pipeline",
+        "type": "docker",
+        "name": name,
+        "trigger": trigger,
+        "services": services,
+        "steps": steps,
+        "clone": {
+            "retries": 3,
         },
-        'volumes': [
+        "volumes": [
             {
-                'name': 'docker',
-                'host': {
-                    'path': '/var/run/docker.sock',
+                "name": "docker",
+                "host": {
+                    "path": "/var/run/docker.sock",
                 },
-            }
+            },
         ],
-        'depends_on': depends_on,
-        'image_pull_secrets': [pull_secret],
+        "depends_on": depends_on,
+        "image_pull_secrets": [pull_secret],
     }
     if environment:
         pipeline.update(
             {
-                'environment': environment,
-            }
+                "environment": environment,
+            },
         )
 
-    pipeline['volumes'].extend(volumes)
+    pipeline["volumes"].extend(volumes)
     pipeline.update(platform_conf)
 
-    if edition in ('enterprise', 'enterprise2'):
+    if edition in ("enterprise", "enterprise2"):
         # We have a custom clone step for enterprise
-        pipeline['clone'] = {
-            'disable': True,
+        pipeline["clone"] = {
+            "disable": True,
         }
 
     return pipeline
 
-
 def notify_pipeline(
-    name, slack_channel, trigger, depends_on=[], template=None, secret=None
-):
+        name,
+        slack_channel,
+        trigger,
+        depends_on = [],
+        template = None,
+        secret = None):
     trigger = dict(trigger)
     return {
-        'kind': 'pipeline',
-        'type': 'docker',
-        'platform': {
-            'os': 'linux',
-            'arch': 'amd64',
+        "kind": "pipeline",
+        "type": "docker",
+        "platform": {
+            "os": "linux",
+            "arch": "amd64",
         },
-        'name': name,
-        'trigger': trigger,
-        'steps': [
+        "name": name,
+        "trigger": trigger,
+        "steps": [
             slack_step(slack_channel, template, secret),
         ],
-        'clone': {
-            'retries': 3,
+        "clone": {
+            "retries": 3,
         },
-        'depends_on': depends_on,
+        "depends_on": depends_on,
     }
 
-
 # TODO: this overrides any existing dependencies because we're following the existing logic
 # it should append to any existing dependencies
-def with_deps(steps, deps=[]):
+def with_deps(steps, deps = []):
     for step in steps:
-        step['depends_on'] = deps
+        step["depends_on"] = deps
     return steps
diff --git a/scripts/drone/vault.star b/scripts/drone/vault.star
index c2f228c7a54..09a6bae3009 100644
--- a/scripts/drone/vault.star
+++ b/scripts/drone/vault.star
@@ -1,97 +1,97 @@
-pull_secret = 'dockerconfigjson'
-drone_token = 'drone_token'
-prerelease_bucket = 'prerelease_bucket'
-gcp_upload_artifacts_key = 'gcp_upload_artifacts_key'
-azure_sp_app_id = 'azure_sp_app_id'
-azure_sp_app_pw = 'azure_sp_app_pw'
-azure_tenant = 'azure_tenant'
-
+"""
+This module returns functions for generating Drone secrets fetched from Vault.
+"""
+pull_secret = "dockerconfigjson"
+drone_token = "drone_token"
+prerelease_bucket = "prerelease_bucket"
+gcp_upload_artifacts_key = "gcp_upload_artifacts_key"
+azure_sp_app_id = "azure_sp_app_id"
+azure_sp_app_pw = "azure_sp_app_pw"
+azure_tenant = "azure_tenant"
 
 def from_secret(secret):
-    return {'from_secret': secret}
-
+    return {"from_secret": secret}
 
 def vault_secret(name, path, key):
     return {
-        'kind': 'secret',
-        'name': name,
-        'get': {
-            'path': path,
-            'name': key,
+        "kind": "secret",
+        "name": name,
+        "get": {
+            "path": path,
+            "name": key,
         },
     }
 
-
 def secrets():
     return [
-        vault_secret(pull_secret, 'secret/data/common/gcr', '.dockerconfigjson'),
-        vault_secret('github_token', 'infra/data/ci/github/grafanabot', 'pat'),
-        vault_secret(drone_token, 'infra/data/ci/drone', 'machine-user-token'),
-        vault_secret(prerelease_bucket, 'infra/data/ci/grafana/prerelease', 'bucket'),
+        vault_secret(pull_secret, "secret/data/common/gcr", ".dockerconfigjson"),
+        vault_secret("github_token", "infra/data/ci/github/grafanabot", "pat"),
+        vault_secret(drone_token, "infra/data/ci/drone", "machine-user-token"),
+        vault_secret(prerelease_bucket, "infra/data/ci/grafana/prerelease", "bucket"),
         vault_secret(
             gcp_upload_artifacts_key,
-            'infra/data/ci/grafana/releng/artifacts-uploader-service-account',
-            'credentials.json',
+            "infra/data/ci/grafana/releng/artifacts-uploader-service-account",
+            "credentials.json",
         ),
         vault_secret(
             azure_sp_app_id,
-            'infra/data/ci/datasources/cpp-azure-resourcemanager-credentials',
-            'application_id',
+            "infra/data/ci/datasources/cpp-azure-resourcemanager-credentials",
+            "application_id",
         ),
         vault_secret(
             azure_sp_app_pw,
-            'infra/data/ci/datasources/cpp-azure-resourcemanager-credentials',
-            'application_secret',
+            "infra/data/ci/datasources/cpp-azure-resourcemanager-credentials",
+            "application_secret",
         ),
         vault_secret(
             azure_tenant,
-            'infra/data/ci/datasources/cpp-azure-resourcemanager-credentials',
-            'tenant_id',
+            "infra/data/ci/datasources/cpp-azure-resourcemanager-credentials",
+            "tenant_id",
         ),
         # Package publishing
         vault_secret(
-            'packages_gpg_public_key',
-            'infra/data/ci/packages-publish/gpg',
-            'public-key-b64',
+            "packages_gpg_public_key",
+            "infra/data/ci/packages-publish/gpg",
+            "public-key-b64",
         ),
         vault_secret(
-            'packages_gpg_private_key',
-            'infra/data/ci/packages-publish/gpg',
-            'private-key-b64',
+            "packages_gpg_private_key",
+            "infra/data/ci/packages-publish/gpg",
+            "private-key-b64",
         ),
         vault_secret(
-            'packages_gpg_passphrase',
-            'infra/data/ci/packages-publish/gpg',
-            'passphrase',
+            "packages_gpg_passphrase",
+            "infra/data/ci/packages-publish/gpg",
+            "passphrase",
         ),
         vault_secret(
-            'packages_service_account',
-            'infra/data/ci/packages-publish/service-account',
-            'credentials.json',
+            "packages_service_account",
+            "infra/data/ci/packages-publish/service-account",
+            "credentials.json",
         ),
         vault_secret(
-            'packages_access_key_id',
-            'infra/data/ci/packages-publish/bucket-credentials',
-            'AccessID',
+            "packages_access_key_id",
+            "infra/data/ci/packages-publish/bucket-credentials",
+            "AccessID",
         ),
         vault_secret(
-            'packages_secret_access_key',
-            'infra/data/ci/packages-publish/bucket-credentials',
-            'Secret',
+            "packages_secret_access_key",
+            "infra/data/ci/packages-publish/bucket-credentials",
+            "Secret",
         ),
         vault_secret(
-            'aws_region',
-            'secret/data/common/aws-marketplace',
-            'aws_region',
+            "aws_region",
+            "secret/data/common/aws-marketplace",
+            "aws_region",
         ),
         vault_secret(
-            'aws_access_key_id',
-            'secret/data/common/aws-marketplace',
-            'aws_access_key_id',
+            "aws_access_key_id",
+            "secret/data/common/aws-marketplace",
+            "aws_access_key_id",
         ),
         vault_secret(
-            'aws_secret_access_key',
-            'secret/data/common/aws-marketplace',
-            'aws_secret_access_key',
+            "aws_secret_access_key",
+            "secret/data/common/aws-marketplace",
+            "aws_secret_access_key",
         ),
     ]
diff --git a/scripts/drone/version.star b/scripts/drone/version.star
index dfdc2da5323..f56a8274000 100644
--- a/scripts/drone/version.star
+++ b/scripts/drone/version.star
@@ -1,17 +1,20 @@
+"""
+This module returns the pipeline used for version branches.
+"""
+
 load(
-    'scripts/drone/events/release.star',
-    'oss_pipelines',
-    'enterprise_pipelines',
-    'enterprise2_pipelines',
+    "scripts/drone/events/release.star",
+    "enterprise2_pipelines",
+    "enterprise_pipelines",
+    "oss_pipelines",
 )
 
-ver_mode = 'release-branch'
-trigger = {'ref': ['refs/heads/v[0-9]*']}
-
+ver_mode = "release-branch"
+trigger = {"ref": ["refs/heads/v[0-9]*"]}
 
 def version_branch_pipelines():
     return (
-        oss_pipelines(ver_mode=ver_mode, trigger=trigger)
-        + enterprise_pipelines(ver_mode=ver_mode, trigger=trigger)
-        + enterprise2_pipelines(ver_mode=ver_mode, trigger=trigger)
+        oss_pipelines(ver_mode = ver_mode, trigger = trigger) +
+        enterprise_pipelines(ver_mode = ver_mode, trigger = trigger) +
+        enterprise2_pipelines(ver_mode = ver_mode, trigger = trigger)
     )
