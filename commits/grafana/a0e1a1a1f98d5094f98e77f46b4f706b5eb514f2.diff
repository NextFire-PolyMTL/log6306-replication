commit a0e1a1a1f98d5094f98e77f46b4f706b5eb514f2 (from 67c58fa5e40e78da554afbe257ba73da426f1dab)
Merge: 67c58fa5e40 fda8a08e0b1
Author: Marcus Efraimsson <marcus.efraimsson@gmail.com>
Date:   Fri Sep 28 15:17:30 2018 +0200

    Merge remote-tracking branch 'origin/master' into reminder_refactoring

diff --git a/.circleci/config.yml b/.circleci/config.yml
index e631e0a8d33..2225e0a16cf 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -83,13 +83,14 @@ jobs:
       - checkout
       - run: 'go get -u github.com/alecthomas/gometalinter'
       - run: 'go get -u github.com/tsenart/deadcode'
+      - run: 'go get -u github.com/jgautheron/goconst/cmd/goconst'
       - run: 'go get -u github.com/gordonklaus/ineffassign'
       - run: 'go get -u github.com/opennota/check/cmd/structcheck'
       - run: 'go get -u github.com/mdempsky/unconvert'
       - run: 'go get -u github.com/opennota/check/cmd/varcheck'
       - run:
           name: run linters
-          command: 'gometalinter --enable-gc --vendor --deadline 10m --disable-all --enable=deadcode --enable=ineffassign --enable=structcheck --enable=unconvert --enable=varcheck ./...'
+          command: 'gometalinter --enable-gc --vendor --deadline 10m --disable-all --enable=deadcode --enable=goconst --enable=ineffassign --enable=structcheck --enable=unconvert --enable=varcheck ./...'
       - run:
           name: run go vet
           command: 'go vet ./pkg/...'
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 39479054af3..e0fd5caf819 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -6,12 +6,15 @@
 
 ### Minor
 
+* **Provisioning**: Dashboard Provisioning now support symlinks that changes target [#12534](https://github.com/grafana/grafana/issues/12534), thx [@auhlig](https://github.com/auhlig)
 * **OAuth**: Allow oauth email attribute name to be configurable [#12986](https://github.com/grafana/grafana/issues/12986), thx [@bobmshannon](https://github.com/bobmshannon)
 * **Tags**: Default sort order for GetDashboardTags [#11681](https://github.com/grafana/grafana/pull/11681), thx [@Jonnymcc](https://github.com/Jonnymcc)
 * **Prometheus**: Label completion queries respect dashboard time range  [#12251](https://github.com/grafana/grafana/pull/12251), thx [@mtanda](https://github.com/mtanda)
 * **Prometheus**: Allow to display annotations based on Prometheus series value [#10159](https://github.com/grafana/grafana/issues/10159), thx [@mtanda](https://github.com/mtanda)
 * **Prometheus**: Adhoc-filtering for Prometheus dashboards [#13212](https://github.com/grafana/grafana/issues/13212)
 * **Singlestat**: Fix gauge display accuracy for percents [#13270](https://github.com/grafana/grafana/issues/13270), thx [@tianon](https://github.com/tianon)
+* **Dashboard**: Prevent auto refresh from starting when loading dashboard with absolute time range [#12030](https://github.com/grafana/grafana/issues/12030)
+* **Templating**: New templating variable type `Text box` that allows free text input [#3173](https://github.com/grafana/grafana/issues/3173)
 
 # 5.3.0 (unreleased)
 
diff --git a/build.go b/build.go
index 9502f52be11..69fbf3bada8 100644
--- a/build.go
+++ b/build.go
@@ -22,6 +22,11 @@ import (
 	"time"
 )
 
+const (
+	windows = "windows"
+	linux   = "linux"
+)
+
 var (
 	//versionRe = regexp.MustCompile(`-[0-9]{1,3}-g[0-9a-f]{5,10}`)
 	goarch  string
@@ -110,13 +115,13 @@ func main() {
 		case "package":
 			grunt(gruntBuildArg("build")...)
 			grunt(gruntBuildArg("package")...)
-			if goos == "linux" {
+			if goos == linux {
 				createLinuxPackages()
 			}
 
 		case "package-only":
 			grunt(gruntBuildArg("package")...)
-			if goos == "linux" {
+			if goos == linux {
 				createLinuxPackages()
 			}
 
@@ -378,7 +383,7 @@ func ensureGoPath() {
 }
 
 func grunt(params ...string) {
-	if runtime.GOOS == "windows" {
+	if runtime.GOOS == windows {
 		runPrint(`.\node_modules\.bin\grunt`, params...)
 	} else {
 		runPrint("./node_modules/.bin/grunt", params...)
@@ -420,7 +425,7 @@ func build(binaryName, pkg string, tags []string) {
 		binary = fmt.Sprintf("./bin/%s", binaryName)
 	}
 
-	if goos == "windows" {
+	if goos == windows {
 		binary += ".exe"
 	}
 
@@ -484,11 +489,11 @@ func clean() {
 
 func setBuildEnv() {
 	os.Setenv("GOOS", goos)
-	if goos == "windows" {
+	if goos == windows {
 		// require windows >=7
 		os.Setenv("CGO_CFLAGS", "-D_WIN32_WINNT=0x0601")
 	}
-	if goarch != "amd64" || goos != "linux" {
+	if goarch != "amd64" || goos != linux {
 		// needed for all other archs
 		cgo = true
 	}
diff --git a/devenv/docker/ha_test/.gitignore b/devenv/docker/ha_test/.gitignore
new file mode 100644
index 00000000000..0f4e139e204
--- /dev/null
+++ b/devenv/docker/ha_test/.gitignore
@@ -0,0 +1 @@
+grafana/provisioning/dashboards/alerts/alert-*
\ No newline at end of file
diff --git a/devenv/docker/ha_test/README.md b/devenv/docker/ha_test/README.md
new file mode 100644
index 00000000000..bc93727ceae
--- /dev/null
+++ b/devenv/docker/ha_test/README.md
@@ -0,0 +1,137 @@
+# Grafana High Availability (HA) test setup
+
+A set of docker compose services which together creates a Grafana HA test setup with capability of easily
+scaling up/down number of Grafana instances.
+
+Included services
+
+* Grafana
+* Mysql - Grafana configuration database and session storage
+* Prometheus - Monitoring of Grafana and used as datasource of provisioned alert rules
+* Nginx - Reverse proxy for Grafana and Prometheus. Enables browsing Grafana/Prometheus UI using a hostname
+
+## Prerequisites
+
+### Build grafana docker container
+
+Build a Grafana docker container from current branch and commit and tag it as grafana/grafana:dev.
+
+```bash
+$ cd <grafana repo>
+$ make build-docker-full
+```
+
+### Virtual host names
+
+#### Alternative 1 - Use dnsmasq
+
+```bash
+$ sudo apt-get install dnsmasq
+$ echo 'address=/loc/127.0.0.1' | sudo tee /etc/dnsmasq.d/dnsmasq-loc.conf > /dev/null
+$ sudo /etc/init.d/dnsmasq restart
+$ ping whatever.loc
+PING whatever.loc (127.0.0.1) 56(84) bytes of data.
+64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.076 ms
+--- whatever.loc ping statistics ---
+1 packet transmitted, 1 received, 0% packet loss, time 1998ms
+```
+
+#### Alternative 2 - Manually update /etc/hosts
+
+Update your `/etc/hosts` to be able to access Grafana and/or Prometheus UI using a hostname.
+
+```bash
+$ cat /etc/hosts
+127.0.0.1       grafana.loc
+127.0.0.1       prometheus.loc
+```
+
+## Start services
+
+```bash
+$ docker-compose up -d
+```
+
+Browse
+* http://grafana.loc/
+* http://prometheus.loc/
+
+Check for any errors
+
+```bash
+$ docker-compose logs | grep error
+```
+
+### Scale Grafana instances up/down
+
+Scale number of Grafana instances to `<instances>`
+
+```bash
+$ docker-compose up --scale grafana=<instances> -d
+# for example 3 instances
+$ docker-compose up --scale grafana=3 -d
+```
+
+## Test alerting
+
+### Create notification channels
+
+Creates default notification channels, if not already exists
+
+```bash
+$ ./alerts.sh setup
+```
+
+### Slack notifications
+
+Disable
+
+```bash
+$ ./alerts.sh slack -d
+```
+
+Enable and configure url
+
+```bash
+$ ./alerts.sh slack -u https://hooks.slack.com/services/...
+```
+
+Enable, configure url and enable reminders
+
+```bash
+$ ./alerts.sh slack -u https://hooks.slack.com/services/... -r -e 10m
+```
+
+### Provision alert dashboards with alert rules
+
+Provision 1 dashboard/alert rule (default)
+
+```bash
+$ ./alerts.sh provision
+```
+
+Provision 10 dashboards/alert rules
+
+```bash
+$ ./alerts.sh provision -a 10
+```
+
+Provision 10 dashboards/alert rules and change condition to `gt > 100`
+
+```bash
+$ ./alerts.sh provision -a 10 -c 100
+```
+
+### Pause/unpause all alert rules
+
+Pause
+
+```bash
+$ ./alerts.sh pause
+```
+
+Unpause
+
+```bash
+$ ./alerts.sh unpause
+```
diff --git a/devenv/docker/ha_test/alerts.sh b/devenv/docker/ha_test/alerts.sh
new file mode 100755
index 00000000000..a05a4581739
--- /dev/null
+++ b/devenv/docker/ha_test/alerts.sh
@@ -0,0 +1,156 @@
+#!/bin/bash
+
+requiresJsonnet() {
+		if ! type "jsonnet" > /dev/null; then
+				echo "you need you install jsonnet to run this script"
+				echo "follow the instructions on https://github.com/google/jsonnet"
+				exit 1
+		fi
+}
+
+setup() {
+	STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://admin:admin@grafana.loc/api/alert-notifications/1)
+  if [ $STATUS -eq 200 ]; then
+    echo "Email already exists, skipping..."
+  else
+		curl -H "Content-Type: application/json" \
+		-d '{
+			"name": "Email",
+			"type":  "email",
+			"isDefault": false,
+			"sendReminder": false,
+			"uploadImage": true,
+			"settings": {
+				"addresses": "user@test.com"
+			}
+		}' \
+		http://admin:admin@grafana.loc/api/alert-notifications
+  fi
+
+	STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://admin:admin@grafana.loc/api/alert-notifications/2)
+  if [ $STATUS -eq 200 ]; then
+    echo "Slack already exists, skipping..."
+  else
+		curl -H "Content-Type: application/json" \
+		-d '{
+			"name": "Slack",
+			"type":  "slack",
+			"isDefault": false,
+			"sendReminder": false,
+			"uploadImage": true
+		}' \
+		http://admin:admin@grafana.loc/api/alert-notifications
+  fi
+}
+
+slack() {
+	enabled=true
+	url=''
+	remind=false
+	remindEvery='10m'
+
+	while getopts ":e:u:dr" o; do
+    case "${o}" in
+				e)
+            remindEvery=${OPTARG}
+            ;;
+				u)
+            url=${OPTARG}
+            ;;
+				d)
+            enabled=false
+            ;;
+				r)
+            remind=true
+            ;;
+    esac
+	done
+	shift $((OPTIND-1))
+
+	curl -X PUT \
+		-H "Content-Type: application/json" \
+		-d '{
+			"id": 2,
+			"name": "Slack",
+			"type":  "slack",
+			"isDefault": '$enabled',
+			"sendReminder": '$remind',
+			"frequency": "'$remindEvery'",
+			"uploadImage": true,
+			"settings": {
+				"url": "'$url'"
+			}
+		}' \
+		http://admin:admin@grafana.loc/api/alert-notifications/2
+}
+
+provision() {
+	alerts=1
+	condition=65
+	while getopts ":a:c:" o; do
+    case "${o}" in
+        a)
+            alerts=${OPTARG}
+            ;;
+				c)
+            condition=${OPTARG}
+            ;;
+    esac
+	done
+	shift $((OPTIND-1))
+
+	requiresJsonnet
+
+	rm -rf grafana/provisioning/dashboards/alerts/alert-*.json
+	jsonnet -m grafana/provisioning/dashboards/alerts grafana/provisioning/alerts.jsonnet --ext-code alerts=$alerts --ext-code condition=$condition
+}
+
+pause() {
+	curl -H "Content-Type: application/json" \
+  -d '{"paused":true}' \
+  http://admin:admin@grafana.loc/api/admin/pause-all-alerts
+}
+
+unpause() {
+	curl -H "Content-Type: application/json" \
+  -d '{"paused":false}' \
+  http://admin:admin@grafana.loc/api/admin/pause-all-alerts
+}
+
+usage() {
+	echo -e "Usage: ./alerts.sh COMMAND [OPTIONS]\n"
+	echo -e "Commands"
+	echo -e "  setup\t\t creates default alert notification channels"
+	echo -e "  slack\t\t configure slack notification channel"
+	echo -e "    [-d]\t\t\t disable notifier, default enabled"
+	echo -e "    [-u]\t\t\t url"
+	echo -e "    [-r]\t\t\t send reminders"
+	echo -e "    [-e <remind every>]\t\t default 10m\n"
+	echo -e "  provision\t provision alerts"
+	echo -e "    [-a <alert rule count>]\t default 1"
+	echo -e "    [-c <condition value>]\t default 65\n"
+	echo -e "  pause\t\t pause all alerts"
+	echo -e "  unpause\t unpause all alerts"
+}
+
+main() {
+	local cmd=$1
+
+	if [[ $cmd == "setup" ]]; then
+		setup
+	elif [[ $cmd == "slack" ]]; then
+		slack "${@:2}"
+	elif [[ $cmd == "provision" ]]; then
+		provision "${@:2}"
+	elif [[ $cmd == "pause" ]]; then
+		pause
+	elif [[ $cmd == "unpause" ]]; then
+		unpause
+	fi
+
+  if [[ -z "$cmd" ]]; then
+		usage
+	fi
+}
+
+main "$@"
diff --git a/devenv/docker/ha_test/docker-compose.yaml b/devenv/docker/ha_test/docker-compose.yaml
new file mode 100644
index 00000000000..78f98ab8dc5
--- /dev/null
+++ b/devenv/docker/ha_test/docker-compose.yaml
@@ -0,0 +1,57 @@
+version: "2.1"
+
+services:
+  nginx-proxy:
+    image: jwilder/nginx-proxy
+    ports:
+      - "80:80"
+    volumes:
+      - /var/run/docker.sock:/tmp/docker.sock:ro
+
+  mysql:
+    image: mysql
+    environment:
+      MYSQL_ROOT_PASSWORD: rootpass
+      MYSQL_DATABASE: grafana
+      MYSQL_USER: grafana
+      MYSQL_PASSWORD: password
+    healthcheck:
+      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
+      timeout: 10s
+      retries: 10
+
+  grafana:
+    image: grafana/grafana:dev
+    volumes:
+      - ./grafana/provisioning/:/etc/grafana/provisioning/
+    environment:
+      - VIRTUAL_HOST=grafana.loc
+      - GF_SERVER_ROOT_URL=http://grafana.loc
+      - GF_DATABASE_TYPE=mysql
+      - GF_DATABASE_HOST=mysql:3306
+      - GF_DATABASE_NAME=grafana
+      - GF_DATABASE_USER=grafana
+      - GF_DATABASE_PASSWORD=password
+      - GF_SESSION_PROVIDER=mysql
+      - GF_SESSION_PROVIDER_CONFIG=grafana:password@tcp(mysql:3306)/grafana?allowNativePasswords=true
+    ports:
+      - 3000
+    depends_on:
+      mysql:
+        condition: service_healthy
+
+  prometheus:
+    image: prom/prometheus:v2.4.2
+    volumes:
+      - ./prometheus/:/etc/prometheus/
+    environment:
+      - VIRTUAL_HOST=prometheus.loc
+    ports:
+      - 9090
+
+  # mysqld-exporter:
+  #   image: prom/mysqld-exporter
+  #   environment:
+  #     - DATA_SOURCE_NAME=grafana:password@(mysql:3306)/
+  #   ports:
+  #     - 9104
\ No newline at end of file
diff --git a/devenv/docker/ha_test/grafana/provisioning/alerts.jsonnet b/devenv/docker/ha_test/grafana/provisioning/alerts.jsonnet
new file mode 100644
index 00000000000..86ded7e79d6
--- /dev/null
+++ b/devenv/docker/ha_test/grafana/provisioning/alerts.jsonnet
@@ -0,0 +1,202 @@
+local numAlerts = std.extVar('alerts');
+local condition = std.extVar('condition');
+local arr = std.range(1, numAlerts);
+
+local alertDashboardTemplate = {
+  "editable": true,
+  "gnetId": null,
+  "graphTooltip": 0,
+  "id": null,
+  "links": [],
+  "panels": [
+    {
+      "alert": {
+        "conditions": [
+          {
+            "evaluator": {
+              "params": [
+                65
+              ],
+              "type": "gt"
+            },
+            "operator": {
+              "type": "and"
+            },
+            "query": {
+              "params": [
+                "A",
+                "5m",
+                "now"
+              ]
+            },
+            "reducer": {
+              "params": [],
+              "type": "avg"
+            },
+            "type": "query"
+          }
+        ],
+        "executionErrorState": "alerting",
+        "frequency": "10s",
+        "handler": 1,
+        "name": "bulk alerting",
+        "noDataState": "no_data",
+        "notifications": [
+          {
+            "id": 2
+          }
+        ]
+      },
+      "aliasColors": {},
+      "bars": false,
+      "dashLength": 10,
+      "dashes": false,
+      "datasource": "Prometheus",
+      "fill": 1,
+      "gridPos": {
+        "h": 9,
+        "w": 12,
+        "x": 0,
+        "y": 0
+      },
+      "id": 2,
+      "legend": {
+        "avg": false,
+        "current": false,
+        "max": false,
+        "min": false,
+        "show": true,
+        "total": false,
+        "values": false
+      },
+      "lines": true,
+      "linewidth": 1,
+      "nullPointMode": "null",
+      "percentage": false,
+      "pointradius": 5,
+      "points": false,
+      "renderer": "flot",
+      "seriesOverrides": [],
+      "spaceLength": 10,
+      "stack": false,
+      "steppedLine": false,
+      "targets": [
+        {
+          "$$hashKey": "object:117",
+          "expr": "go_goroutines",
+          "format": "time_series",
+          "intervalFactor": 1,
+          "refId": "A"
+        }
+      ],
+      "thresholds": [
+        {
+          "colorMode": "critical",
+          "fill": true,
+          "line": true,
+          "op": "gt",
+          "value": 50
+        }
+      ],
+      "timeFrom": null,
+      "timeShift": null,
+      "title": "Panel Title",
+      "tooltip": {
+        "shared": true,
+        "sort": 0,
+        "value_type": "individual"
+      },
+      "type": "graph",
+      "xaxis": {
+        "buckets": null,
+        "mode": "time",
+        "name": null,
+        "show": true,
+        "values": []
+      },
+      "yaxes": [
+        {
+          "format": "short",
+          "label": null,
+          "logBase": 1,
+          "max": null,
+          "min": null,
+          "show": true
+        },
+        {
+          "format": "short",
+          "label": null,
+          "logBase": 1,
+          "max": null,
+          "min": null,
+          "show": true
+        }
+      ]
+    }
+  ],
+  "schemaVersion": 16,
+  "style": "dark",
+  "tags": [],
+  "templating": {
+    "list": []
+  },
+  "time": {
+    "from": "now-6h",
+    "to": "now"
+  },
+  "timepicker": {
+    "refresh_intervals": [
+      "5s",
+      "10s",
+      "30s",
+      "1m",
+      "5m",
+      "15m",
+      "30m",
+      "1h",
+      "2h",
+      "1d"
+    ],
+    "time_options": [
+      "5m",
+      "15m",
+      "1h",
+      "6h",
+      "12h",
+      "24h",
+      "2d",
+      "7d",
+      "30d"
+    ]
+  },
+  "timezone": "",
+  "title": "New dashboard",
+  "uid": null,
+  "version": 0
+};
+
+
+{
+  ['alert-' + std.toString(x) + '.json']:
+    alertDashboardTemplate + {
+      panels: [
+        alertDashboardTemplate.panels[0] +
+        {
+          alert+: {
+            name: 'Alert rule ' + x,
+            conditions: [
+              alertDashboardTemplate.panels[0].alert.conditions[0] +
+              {
+                evaluator+: {
+                  params: [condition]
+                }
+              },
+            ],
+          },
+        },
+      ],
+      uid: 'alert-' + x,
+      title: 'Alert ' + x
+    },
+      for x in arr
+}
\ No newline at end of file
diff --git a/devenv/docker/ha_test/grafana/provisioning/dashboards/alerts.yaml b/devenv/docker/ha_test/grafana/provisioning/dashboards/alerts.yaml
new file mode 100644
index 00000000000..60b6cd4bb04
--- /dev/null
+++ b/devenv/docker/ha_test/grafana/provisioning/dashboards/alerts.yaml
@@ -0,0 +1,8 @@
+apiVersion: 1
+
+providers:
+ - name: 'Alerts'
+   folder: 'Alerts'
+   type: file
+   options:
+     path: /etc/grafana/provisioning/dashboards/alerts
diff --git a/devenv/docker/ha_test/grafana/provisioning/dashboards/alerts/overview.json b/devenv/docker/ha_test/grafana/provisioning/dashboards/alerts/overview.json
new file mode 100644
index 00000000000..53e33c37b1f
--- /dev/null
+++ b/devenv/docker/ha_test/grafana/provisioning/dashboards/alerts/overview.json
@@ -0,0 +1,172 @@
+{
+  "annotations": {
+    "list": [
+      {
+        "builtIn": 1,
+        "datasource": "-- Grafana --",
+        "enable": true,
+        "hide": true,
+        "iconColor": "rgba(0, 211, 255, 1)",
+        "name": "Annotations & Alerts",
+        "type": "dashboard"
+      }
+    ]
+  },
+  "editable": true,
+  "gnetId": null,
+  "graphTooltip": 0,
+  "links": [],
+  "panels": [
+    {
+      "aliasColors": {
+        "Active alerts": "#bf1b00"
+      },
+      "bars": false,
+      "dashLength": 10,
+      "dashes": false,
+      "datasource": "Prometheus",
+      "fill": 1,
+      "gridPos": {
+        "h": 12,
+        "w": 24,
+        "x": 0,
+        "y": 0
+      },
+      "id": 2,
+      "interval": "",
+      "legend": {
+        "alignAsTable": true,
+        "avg": false,
+        "current": true,
+        "max": false,
+        "min": false,
+        "rightSide": true,
+        "show": true,
+        "total": false,
+        "values": true
+      },
+      "lines": true,
+      "linewidth": 2,
+      "links": [],
+      "nullPointMode": "null",
+      "percentage": false,
+      "pointradius": 5,
+      "points": false,
+      "renderer": "flot",
+      "seriesOverrides": [
+        {
+          "alias": "Active grafana instances",
+          "dashes": true,
+          "fill": 0
+        }
+      ],
+      "spaceLength": 10,
+      "stack": false,
+      "steppedLine": false,
+      "targets": [
+        {
+          "expr": "sum(increase(grafana_alerting_notification_sent_total[1m])) by(job)",
+          "format": "time_series",
+          "instant": false,
+          "interval": "1m",
+          "intervalFactor": 1,
+          "legendFormat": "Notifications sent",
+          "refId": "A"
+        },
+        {
+          "expr": "min(grafana_alerting_active_alerts) without(instance)",
+          "format": "time_series",
+          "interval": "1m",
+          "intervalFactor": 1,
+          "legendFormat": "Active alerts",
+          "refId": "B"
+        },
+        {
+          "expr": "count(up{job=\"grafana\"})",
+          "format": "time_series",
+          "intervalFactor": 1,
+          "legendFormat": "Active grafana instances",
+          "refId": "C"
+        }
+      ],
+      "thresholds": [],
+      "timeFrom": null,
+      "timeShift": null,
+      "title": "Notifications sent vs active alerts",
+      "tooltip": {
+        "shared": true,
+        "sort": 0,
+        "value_type": "individual"
+      },
+      "type": "graph",
+      "xaxis": {
+        "buckets": null,
+        "mode": "time",
+        "name": null,
+        "show": true,
+        "values": []
+      },
+      "yaxes": [
+        {
+          "format": "short",
+          "label": null,
+          "logBase": 1,
+          "max": null,
+          "min": "0",
+          "show": true
+        },
+        {
+          "format": "short",
+          "label": null,
+          "logBase": 1,
+          "max": null,
+          "min": null,
+          "show": true
+        }
+      ],
+      "yaxis": {
+        "align": false,
+        "alignLevel": 3
+      }
+    }
+  ],
+  "schemaVersion": 16,
+  "style": "dark",
+  "tags": [],
+  "templating": {
+    "list": []
+  },
+  "time": {
+    "from": "now-1h",
+    "to": "now"
+  },
+  "timepicker": {
+    "refresh_intervals": [
+      "5s",
+      "10s",
+      "30s",
+      "1m",
+      "5m",
+      "15m",
+      "30m",
+      "1h",
+      "2h",
+      "1d"
+    ],
+    "time_options": [
+      "5m",
+      "15m",
+      "1h",
+      "6h",
+      "12h",
+      "24h",
+      "2d",
+      "7d",
+      "30d"
+    ]
+  },
+  "timezone": "",
+  "title": "Overview",
+  "uid": "xHy7-hAik",
+  "version": 6
+}
\ No newline at end of file
diff --git a/devenv/docker/ha_test/grafana/provisioning/datasources/datasources.yaml b/devenv/docker/ha_test/grafana/provisioning/datasources/datasources.yaml
new file mode 100644
index 00000000000..8d59793be16
--- /dev/null
+++ b/devenv/docker/ha_test/grafana/provisioning/datasources/datasources.yaml
@@ -0,0 +1,11 @@
+apiVersion: 1
+
+datasources:
+  - name: Prometheus
+    type: prometheus
+    access: proxy
+    url: http://prometheus:9090
+    jsonData:
+      timeInterval: 10s
+      queryTimeout: 30s
+      httpMethod: POST
\ No newline at end of file
diff --git a/devenv/docker/ha_test/prometheus/prometheus.yml b/devenv/docker/ha_test/prometheus/prometheus.yml
new file mode 100644
index 00000000000..ea97ba8ba05
--- /dev/null
+++ b/devenv/docker/ha_test/prometheus/prometheus.yml
@@ -0,0 +1,39 @@
+# my global config
+global:
+  scrape_interval:     10s # By default, scrape targets every 15 seconds.
+  evaluation_interval: 10s # By default, scrape targets every 15 seconds.
+  # scrape_timeout is set to the global default (10s).
+
+# Load and evaluate rules in this file every 'evaluation_interval' seconds.
+#rule_files:
+# - "alert.rules"
+# - "first.rules"
+# - "second.rules"
+
+# alerting:
+#   alertmanagers:
+#   - scheme: http
+#     static_configs:
+#     - targets:
+#       - "127.0.0.1:9093"
+
+scrape_configs:
+  - job_name: 'prometheus'
+    static_configs:
+      - targets: ['localhost:9090']
+
+  - job_name: 'grafana'
+    dns_sd_configs:
+      - names:
+        - 'grafana'
+        type: 'A'
+        port: 3000
+        refresh_interval: 10s
+
+  # - job_name: 'mysql'
+  #   dns_sd_configs:
+  #     - names:
+  #       - 'mysqld-exporter'
+  #       type: 'A'
+  #       port: 9104
+  #       refresh_interval: 10s
\ No newline at end of file
diff --git a/pkg/api/dashboard.go b/pkg/api/dashboard.go
index c2ab6dd9a1a..d65598f6e5e 100644
--- a/pkg/api/dashboard.go
+++ b/pkg/api/dashboard.go
@@ -22,6 +22,10 @@ import (
 	"github.com/grafana/grafana/pkg/util"
 )
 
+const (
+	anonString = "Anonymous"
+)
+
 func isDashboardStarredByUser(c *m.ReqContext, dashID int64) (bool, error) {
 	if !c.IsSignedIn {
 		return false, nil
@@ -64,7 +68,7 @@ func GetDashboard(c *m.ReqContext) Response {
 	}
 
 	// Finding creator and last updater of the dashboard
-	updater, creator := "Anonymous", "Anonymous"
+	updater, creator := anonString, anonString
 	if dash.UpdatedBy > 0 {
 		updater = getUserLogin(dash.UpdatedBy)
 	}
@@ -128,7 +132,7 @@ func getUserLogin(userID int64) string {
 	query := m.GetUserByIdQuery{Id: userID}
 	err := bus.Dispatch(&query)
 	if err != nil {
-		return "Anonymous"
+		return anonString
 	}
 	return query.Result.Login
 }
@@ -403,7 +407,7 @@ func GetDashboardVersion(c *m.ReqContext) Response {
 		return Error(500, fmt.Sprintf("Dashboard version %d not found for dashboardId %d", query.Version, dashID), err)
 	}
 
-	creator := "Anonymous"
+	creator := anonString
 	if query.Result.CreatedBy > 0 {
 		creator = getUserLogin(query.Result.CreatedBy)
 	}
diff --git a/pkg/api/folder.go b/pkg/api/folder.go
index f0cdff24d20..0e08343b556 100644
--- a/pkg/api/folder.go
+++ b/pkg/api/folder.go
@@ -95,7 +95,7 @@ func toFolderDto(g guardian.DashboardGuardian, folder *m.Folder) dtos.Folder {
 	canAdmin, _ := g.CanAdmin()
 
 	// Finding creator and last updater of the folder
-	updater, creator := "Anonymous", "Anonymous"
+	updater, creator := anonString, anonString
 	if folder.CreatedBy > 0 {
 		creator = getUserLogin(folder.CreatedBy)
 	}
diff --git a/pkg/api/index.go b/pkg/api/index.go
index b8101a01fc8..1b73acd8829 100644
--- a/pkg/api/index.go
+++ b/pkg/api/index.go
@@ -11,6 +11,12 @@ import (
 	"github.com/grafana/grafana/pkg/setting"
 )
 
+const (
+	// Themes
+	lightName = "light"
+	darkName  = "dark"
+)
+
 func setIndexViewData(c *m.ReqContext) (*dtos.IndexViewData, error) {
 	settings, err := getFrontendSettingsMap(c)
 	if err != nil {
@@ -60,7 +66,7 @@ func setIndexViewData(c *m.ReqContext) (*dtos.IndexViewData, error) {
 			OrgRole:                    c.OrgRole,
 			GravatarUrl:                dtos.GetGravatarUrl(c.Email),
 			IsGrafanaAdmin:             c.IsGrafanaAdmin,
-			LightTheme:                 prefs.Theme == "light",
+			LightTheme:                 prefs.Theme == lightName,
 			Timezone:                   prefs.Timezone,
 			Locale:                     locale,
 			HelpFlags1:                 c.HelpFlags1,
@@ -88,12 +94,12 @@ func setIndexViewData(c *m.ReqContext) (*dtos.IndexViewData, error) {
 	}
 
 	themeURLParam := c.Query("theme")
-	if themeURLParam == "light" {
+	if themeURLParam == lightName {
 		data.User.LightTheme = true
-		data.Theme = "light"
-	} else if themeURLParam == "dark" {
+		data.Theme = lightName
+	} else if themeURLParam == darkName {
 		data.User.LightTheme = false
-		data.Theme = "dark"
+		data.Theme = darkName
 	}
 
 	if hasEditPermissionInFoldersQuery.Result {
diff --git a/pkg/components/imguploader/s3uploader.go b/pkg/components/imguploader/s3uploader.go
index a1e4aed0f47..9c8af21e39e 100644
--- a/pkg/components/imguploader/s3uploader.go
+++ b/pkg/components/imguploader/s3uploader.go
@@ -2,12 +2,15 @@ package imguploader
 
 import (
 	"context"
+	"fmt"
 	"os"
 	"time"
 
 	"github.com/aws/aws-sdk-go/aws"
 	"github.com/aws/aws-sdk-go/aws/credentials"
 	"github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds"
+	"github.com/aws/aws-sdk-go/aws/credentials/endpointcreds"
+	"github.com/aws/aws-sdk-go/aws/defaults"
 	"github.com/aws/aws-sdk-go/aws/ec2metadata"
 	"github.com/aws/aws-sdk-go/aws/endpoints"
 	"github.com/aws/aws-sdk-go/aws/session"
@@ -50,7 +53,7 @@ func (u *S3Uploader) Upload(ctx context.Context, imageDiskPath string) (string,
 				SecretAccessKey: u.secretKey,
 			}},
 			&credentials.EnvProvider{},
-			&ec2rolecreds.EC2RoleProvider{Client: ec2metadata.New(sess), ExpiryWindow: 5 * time.Minute},
+			remoteCredProvider(sess),
 		})
 	cfg := &aws.Config{
 		Region:      aws.String(u.region),
@@ -85,3 +88,27 @@ func (u *S3Uploader) Upload(ctx context.Context, imageDiskPath string) (string,
 	}
 	return image_url, nil
 }
+
+func remoteCredProvider(sess *session.Session) credentials.Provider {
+	ecsCredURI := os.Getenv("AWS_CONTAINER_CREDENTIALS_RELATIVE_URI")
+
+	if len(ecsCredURI) > 0 {
+		return ecsCredProvider(sess, ecsCredURI)
+	}
+	return ec2RoleProvider(sess)
+}
+
+func ecsCredProvider(sess *session.Session, uri string) credentials.Provider {
+	const host = `169.254.170.2`
+
+	d := defaults.Get()
+	return endpointcreds.NewProviderClient(
+		*d.Config,
+		d.Handlers,
+		fmt.Sprintf("http://%s%s", host, uri),
+		func(p *endpointcreds.Provider) { p.ExpiryWindow = 5 * time.Minute })
+}
+
+func ec2RoleProvider(sess *session.Session) credentials.Provider {
+	return &ec2rolecreds.EC2RoleProvider{Client: ec2metadata.New(sess), ExpiryWindow: 5 * time.Minute}
+}
diff --git a/pkg/components/null/float.go b/pkg/components/null/float.go
index 4f783f2c584..9082c831084 100644
--- a/pkg/components/null/float.go
+++ b/pkg/components/null/float.go
@@ -8,6 +8,10 @@ import (
 	"strconv"
 )
 
+const (
+	nullString = "null"
+)
+
 // Float is a nullable float64.
 // It does not consider zero values to be null.
 // It will decode to null, not zero, if null.
@@ -68,7 +72,7 @@ func (f *Float) UnmarshalJSON(data []byte) error {
 // It will return an error if the input is not an integer, blank, or "null".
 func (f *Float) UnmarshalText(text []byte) error {
 	str := string(text)
-	if str == "" || str == "null" {
+	if str == "" || str == nullString {
 		f.Valid = false
 		return nil
 	}
@@ -82,7 +86,7 @@ func (f *Float) UnmarshalText(text []byte) error {
 // It will encode null if this Float is null.
 func (f Float) MarshalJSON() ([]byte, error) {
 	if !f.Valid {
-		return []byte("null"), nil
+		return []byte(nullString), nil
 	}
 	return []byte(strconv.FormatFloat(f.Float64, 'f', -1, 64)), nil
 }
@@ -100,7 +104,7 @@ func (f Float) MarshalText() ([]byte, error) {
 // It will encode a blank string if this Float is null.
 func (f Float) String() string {
 	if !f.Valid {
-		return "null"
+		return nullString
 	}
 
 	return fmt.Sprintf("%1.3f", f.Float64)
@@ -109,7 +113,7 @@ func (f Float) String() string {
 // FullString returns float as string in full precision
 func (f Float) FullString() string {
 	if !f.Valid {
-		return "null"
+		return nullString
 	}
 
 	return fmt.Sprintf("%f", f.Float64)
diff --git a/pkg/services/alerting/notifiers/base.go b/pkg/services/alerting/notifiers/base.go
index fa24f925817..e1fc2969154 100644
--- a/pkg/services/alerting/notifiers/base.go
+++ b/pkg/services/alerting/notifiers/base.go
@@ -10,6 +10,10 @@ import (
 	"github.com/grafana/grafana/pkg/services/alerting"
 )
 
+const (
+	triggMetrString = "Triggered metrics:\n\n"
+)
+
 type NotifierBase struct {
 	Name         string
 	Type         string
diff --git a/pkg/services/alerting/notifiers/kafka.go b/pkg/services/alerting/notifiers/kafka.go
index d8d19fc5dae..a8a424c87a7 100644
--- a/pkg/services/alerting/notifiers/kafka.go
+++ b/pkg/services/alerting/notifiers/kafka.go
@@ -61,7 +61,7 @@ func (this *KafkaNotifier) Notify(evalContext *alerting.EvalContext) error {
 
 	state := evalContext.Rule.State
 
-	customData := "Triggered metrics:\n\n"
+	customData := triggMetrString
 	for _, evt := range evalContext.EvalMatches {
 		customData = customData + fmt.Sprintf("%s: %v\n", evt.Metric, evt.Value)
 	}
diff --git a/pkg/services/alerting/notifiers/opsgenie.go b/pkg/services/alerting/notifiers/opsgenie.go
index 84148a0d99c..629968b5102 100644
--- a/pkg/services/alerting/notifiers/opsgenie.go
+++ b/pkg/services/alerting/notifiers/opsgenie.go
@@ -95,7 +95,7 @@ func (this *OpsGenieNotifier) createAlert(evalContext *alerting.EvalContext) err
 		return err
 	}
 
-	customData := "Triggered metrics:\n\n"
+	customData := triggMetrString
 	for _, evt := range evalContext.EvalMatches {
 		customData = customData + fmt.Sprintf("%s: %v\n", evt.Metric, evt.Value)
 	}
diff --git a/pkg/services/alerting/notifiers/pagerduty.go b/pkg/services/alerting/notifiers/pagerduty.go
index bf85466388f..9f6ce3c2dc8 100644
--- a/pkg/services/alerting/notifiers/pagerduty.go
+++ b/pkg/services/alerting/notifiers/pagerduty.go
@@ -76,7 +76,7 @@ func (this *PagerdutyNotifier) Notify(evalContext *alerting.EvalContext) error {
 	if evalContext.Rule.State == m.AlertStateOK {
 		eventType = "resolve"
 	}
-	customData := "Triggered metrics:\n\n"
+	customData := triggMetrString
 	for _, evt := range evalContext.EvalMatches {
 		customData = customData + fmt.Sprintf("%s: %v\n", evt.Metric, evt.Value)
 	}
diff --git a/pkg/services/provisioning/dashboards/file_reader.go b/pkg/services/provisioning/dashboards/file_reader.go
index ef27ba97235..c7d400929dc 100644
--- a/pkg/services/provisioning/dashboards/file_reader.go
+++ b/pkg/services/provisioning/dashboards/file_reader.go
@@ -43,26 +43,6 @@ func NewDashboardFileReader(cfg *DashboardsAsConfig, log log.Logger) (*fileReade
 		log.Warn("[Deprecated] The folder property is deprecated. Please use path instead.")
 	}
 
-	if _, err := os.Stat(path); os.IsNotExist(err) {
-		log.Error("Cannot read directory", "error", err)
-	}
-
-	copy := path
-	path, err := filepath.Abs(path)
-	if err != nil {
-		log.Error("Could not create absolute path ", "path", path)
-	}
-
-	path, err = filepath.EvalSymlinks(path)
-	if err != nil {
-		log.Error("Failed to read content of symlinked path: %s", path)
-	}
-
-	if path == "" {
-		path = copy
-		log.Info("falling back to original path due to EvalSymlink/Abs failure")
-	}
-
 	return &fileReader{
 		Cfg:              cfg,
 		Path:             path,
@@ -99,7 +79,8 @@ func (fr *fileReader) ReadAndListen(ctx context.Context) error {
 }
 
 func (fr *fileReader) startWalkingDisk() error {
-	if _, err := os.Stat(fr.Path); err != nil {
+	resolvedPath := fr.resolvePath(fr.Path)
+	if _, err := os.Stat(resolvedPath); err != nil {
 		if os.IsNotExist(err) {
 			return err
 		}
@@ -116,7 +97,7 @@ func (fr *fileReader) startWalkingDisk() error {
 	}
 
 	filesFoundOnDisk := map[string]os.FileInfo{}
-	err = filepath.Walk(fr.Path, createWalkFn(filesFoundOnDisk))
+	err = filepath.Walk(resolvedPath, createWalkFn(filesFoundOnDisk))
 	if err != nil {
 		return err
 	}
@@ -344,6 +325,29 @@ func (fr *fileReader) readDashboardFromFile(path string, lastModified time.Time,
 	}, nil
 }
 
+func (fr *fileReader) resolvePath(path string) string {
+	if _, err := os.Stat(path); os.IsNotExist(err) {
+		fr.log.Error("Cannot read directory", "error", err)
+	}
+
+	copy := path
+	path, err := filepath.Abs(path)
+	if err != nil {
+		fr.log.Error("Could not create absolute path ", "path", path)
+	}
+
+	path, err = filepath.EvalSymlinks(path)
+	if err != nil {
+		fr.log.Error("Failed to read content of symlinked path: %s", path)
+	}
+
+	if path == "" {
+		path = copy
+		fr.log.Info("falling back to original path due to EvalSymlink/Abs failure")
+	}
+	return path
+}
+
 type provisioningMetadata struct {
 	uid   string
 	title string
diff --git a/pkg/services/provisioning/dashboards/file_reader_linux_test.go b/pkg/services/provisioning/dashboards/file_reader_linux_test.go
index 9d4cdae8609..77f488ebcfb 100644
--- a/pkg/services/provisioning/dashboards/file_reader_linux_test.go
+++ b/pkg/services/provisioning/dashboards/file_reader_linux_test.go
@@ -30,10 +30,11 @@ func TestProvsionedSymlinkedFolder(t *testing.T) {
 	want, err := filepath.Abs(containingId)
 
 	if err != nil {
-		t.Errorf("expected err to be nill")
+		t.Errorf("expected err to be nil")
 	}
 
-	if reader.Path != want {
-		t.Errorf("got %s want %s", reader.Path, want)
+	resolvedPath := reader.resolvePath(reader.Path)
+	if resolvedPath != want {
+		t.Errorf("got %s want %s", resolvedPath, want)
 	}
 }
diff --git a/pkg/services/provisioning/dashboards/file_reader_test.go b/pkg/services/provisioning/dashboards/file_reader_test.go
index bdc1e95aafe..fe849816553 100644
--- a/pkg/services/provisioning/dashboards/file_reader_test.go
+++ b/pkg/services/provisioning/dashboards/file_reader_test.go
@@ -67,7 +67,8 @@ func TestCreatingNewDashboardFileReader(t *testing.T) {
 			reader, err := NewDashboardFileReader(cfg, log.New("test-logger"))
 			So(err, ShouldBeNil)
 
-			So(filepath.IsAbs(reader.Path), ShouldBeTrue)
+			resolvedPath := reader.resolvePath(reader.Path)
+			So(filepath.IsAbs(resolvedPath), ShouldBeTrue)
 		})
 	})
 }
diff --git a/pkg/social/social.go b/pkg/social/social.go
index 721070ab789..8918507f3b9 100644
--- a/pkg/social/social.go
+++ b/pkg/social/social.go
@@ -46,10 +46,14 @@ func (e *Error) Error() string {
 	return e.s
 }
 
+const (
+	grafanaCom = "grafana_com"
+)
+
 var (
 	SocialBaseUrl = "/login/"
 	SocialMap     = make(map[string]SocialConnector)
-	allOauthes    = []string{"github", "gitlab", "google", "generic_oauth", "grafananet", "grafana_com"}
+	allOauthes    = []string{"github", "gitlab", "google", "generic_oauth", "grafananet", grafanaCom}
 )
 
 func NewOAuthService() {
@@ -82,7 +86,7 @@ func NewOAuthService() {
 		}
 
 		if name == "grafananet" {
-			name = "grafana_com"
+			name = grafanaCom
 		}
 
 		setting.OAuthService.OAuthInfos[name] = info
@@ -159,7 +163,7 @@ func NewOAuthService() {
 			}
 		}
 
-		if name == "grafana_com" {
+		if name == grafanaCom {
 			config = oauth2.Config{
 				ClientID:     info.ClientId,
 				ClientSecret: info.ClientSecret,
@@ -171,7 +175,7 @@ func NewOAuthService() {
 				Scopes:      info.Scopes,
 			}
 
-			SocialMap["grafana_com"] = &SocialGrafanaCom{
+			SocialMap[grafanaCom] = &SocialGrafanaCom{
 				SocialBase: &SocialBase{
 					Config: &config,
 					log:    logger,
@@ -194,7 +198,7 @@ var GetOAuthProviders = func(cfg *setting.Cfg) map[string]bool {
 
 	for _, name := range allOauthes {
 		if name == "grafananet" {
-			name = "grafana_com"
+			name = grafanaCom
 		}
 
 		sec := cfg.Raw.Section("auth." + name)
diff --git a/pkg/tsdb/cloudwatch/metric_find_query.go b/pkg/tsdb/cloudwatch/metric_find_query.go
index e1e131d9f3a..ee9d9583c4e 100644
--- a/pkg/tsdb/cloudwatch/metric_find_query.go
+++ b/pkg/tsdb/cloudwatch/metric_find_query.go
@@ -235,7 +235,7 @@ func parseMultiSelectValue(input string) []string {
 func (e *CloudWatchExecutor) handleGetRegions(ctx context.Context, parameters *simplejson.Json, queryContext *tsdb.TsdbQuery) ([]suggestData, error) {
 	regions := []string{
 		"ap-northeast-1", "ap-northeast-2", "ap-southeast-1", "ap-southeast-2", "ap-south-1", "ca-central-1", "cn-north-1", "cn-northwest-1",
-		"eu-central-1", "eu-west-1", "eu-west-2", "eu-west-3", "sa-east-1", "us-east-1", "us-east-2", "us-gov-west-1", "us-west-1", "us-west-2",
+		"eu-central-1", "eu-west-1", "eu-west-2", "eu-west-3", "sa-east-1", "us-east-1", "us-east-2", "us-gov-west-1", "us-west-1", "us-west-2", "us-isob-east-1", "us-iso-east-1",
 	}
 
 	result := make([]suggestData, 0)
diff --git a/pkg/tsdb/elasticsearch/response_parser.go b/pkg/tsdb/elasticsearch/response_parser.go
index 0090754840a..0837c3dd9d5 100644
--- a/pkg/tsdb/elasticsearch/response_parser.go
+++ b/pkg/tsdb/elasticsearch/response_parser.go
@@ -13,6 +13,19 @@ import (
 	"github.com/grafana/grafana/pkg/tsdb/elasticsearch/client"
 )
 
+const (
+	// Metric types
+	countType         = "count"
+	percentilesType   = "percentiles"
+	extendedStatsType = "extended_stats"
+	// Bucket types
+	dateHistType    = "date_histogram"
+	histogramType   = "histogram"
+	filtersType     = "filters"
+	termsType       = "terms"
+	geohashGridType = "geohash_grid"
+)
+
 type responseParser struct {
 	Responses []*es.SearchResponse
 	Targets   []*Query
@@ -81,7 +94,7 @@ func (rp *responseParser) processBuckets(aggs map[string]interface{}, target *Qu
 		}
 
 		if depth == maxDepth {
-			if aggDef.Type == "date_histogram" {
+			if aggDef.Type == dateHistType {
 				err = rp.processMetrics(esAgg, target, series, props)
 			} else {
 				err = rp.processAggregationDocs(esAgg, aggDef, target, table, props)
@@ -149,7 +162,7 @@ func (rp *responseParser) processMetrics(esAgg *simplejson.Json, target *Query,
 		}
 
 		switch metric.Type {
-		case "count":
+		case countType:
 			newSeries := tsdb.TimeSeries{
 				Tags: make(map[string]string),
 			}
@@ -164,10 +177,10 @@ func (rp *responseParser) processMetrics(esAgg *simplejson.Json, target *Query,
 			for k, v := range props {
 				newSeries.Tags[k] = v
 			}
-			newSeries.Tags["metric"] = "count"
+			newSeries.Tags["metric"] = countType
 			*series = append(*series, &newSeries)
 
-		case "percentiles":
+		case percentilesType:
 			buckets := esAgg.Get("buckets").MustArray()
 			if len(buckets) == 0 {
 				break
@@ -198,7 +211,7 @@ func (rp *responseParser) processMetrics(esAgg *simplejson.Json, target *Query,
 				}
 				*series = append(*series, &newSeries)
 			}
-		case "extended_stats":
+		case extendedStatsType:
 			buckets := esAgg.Get("buckets").MustArray()
 
 			metaKeys := make([]string, 0)
@@ -312,9 +325,9 @@ func (rp *responseParser) processAggregationDocs(esAgg *simplejson.Json, aggDef
 
 		for _, metric := range target.Metrics {
 			switch metric.Type {
-			case "count":
+			case countType:
 				addMetricValue(&values, rp.getMetricName(metric.Type), castToNullFloat(bucket.Get("doc_count")))
-			case "extended_stats":
+			case extendedStatsType:
 				metaKeys := make([]string, 0)
 				meta := metric.Meta.MustMap()
 				for k := range meta {
@@ -366,7 +379,7 @@ func (rp *responseParser) processAggregationDocs(esAgg *simplejson.Json, aggDef
 func (rp *responseParser) trimDatapoints(series *tsdb.TimeSeriesSlice, target *Query) {
 	var histogram *BucketAgg
 	for _, bucketAgg := range target.BucketAggs {
-		if bucketAgg.Type == "date_histogram" {
+		if bucketAgg.Type == dateHistType {
 			histogram = bucketAgg
 			break
 		}
diff --git a/pkg/tsdb/elasticsearch/time_series_query.go b/pkg/tsdb/elasticsearch/time_series_query.go
index c9bb05dd09a..fddcf3cb8b3 100644
--- a/pkg/tsdb/elasticsearch/time_series_query.go
+++ b/pkg/tsdb/elasticsearch/time_series_query.go
@@ -75,15 +75,15 @@ func (e *timeSeriesQuery) execute() (*tsdb.Response, error) {
 		// iterate backwards to create aggregations bottom-down
 		for _, bucketAgg := range q.BucketAggs {
 			switch bucketAgg.Type {
-			case "date_histogram":
+			case dateHistType:
 				aggBuilder = addDateHistogramAgg(aggBuilder, bucketAgg, from, to)
-			case "histogram":
+			case histogramType:
 				aggBuilder = addHistogramAgg(aggBuilder, bucketAgg)
-			case "filters":
+			case filtersType:
 				aggBuilder = addFiltersAgg(aggBuilder, bucketAgg)
-			case "terms":
+			case termsType:
 				aggBuilder = addTermsAgg(aggBuilder, bucketAgg, q.Metrics)
-			case "geohash_grid":
+			case geohashGridType:
 				aggBuilder = addGeoHashGridAgg(aggBuilder, bucketAgg)
 			}
 		}
diff --git a/public/app/core/components/LayoutSelector/LayoutSelector.tsx b/public/app/core/components/LayoutSelector/LayoutSelector.tsx
new file mode 100644
index 00000000000..d9e00102438
--- /dev/null
+++ b/public/app/core/components/LayoutSelector/LayoutSelector.tsx
@@ -0,0 +1,39 @@
+import React, { SFC } from 'react';
+
+export type LayoutMode = LayoutModes.Grid | LayoutModes.List;
+
+export enum LayoutModes {
+  Grid = 'grid',
+  List = 'list',
+}
+
+interface Props {
+  mode: LayoutMode;
+  onLayoutModeChanged: (mode: LayoutMode) => {};
+}
+
+const LayoutSelector: SFC<Props> = props => {
+  const { mode, onLayoutModeChanged } = props;
+  return (
+    <div className="layout-selector">
+      <button
+        onClick={() => {
+          onLayoutModeChanged(LayoutModes.List);
+        }}
+        className={mode === LayoutModes.List ? 'active' : ''}
+      >
+        <i className="fa fa-list" />
+      </button>
+      <button
+        onClick={() => {
+          onLayoutModeChanged(LayoutModes.Grid);
+        }}
+        className={mode === LayoutModes.Grid ? 'active' : ''}
+      >
+        <i className="fa fa-th" />
+      </button>
+    </div>
+  );
+};
+
+export default LayoutSelector;
diff --git a/public/app/features/dashboard/specs/time_srv.test.ts b/public/app/features/dashboard/specs/time_srv.test.ts
index 514e0b90792..db0d11f2ebe 100644
--- a/public/app/features/dashboard/specs/time_srv.test.ts
+++ b/public/app/features/dashboard/specs/time_srv.test.ts
@@ -29,6 +29,7 @@ describe('timeSrv', () => {
   beforeEach(() => {
     timeSrv = new TimeSrv(rootScope, jest.fn(), location, timer, { isGrafanaVisibile: jest.fn() });
     timeSrv.init(_dashboard);
+    _dashboard.refresh = false;
   });
 
   describe('timeRange', () => {
@@ -79,6 +80,23 @@ describe('timeSrv', () => {
       expect(time.to.valueOf()).toEqual(new Date('2014-05-20T03:10:22Z').getTime());
     });
 
+    it('should ignore refresh if time absolute', () => {
+      location = {
+        search: jest.fn(() => ({
+          from: '20140410T052010',
+          to: '20140520T031022',
+        })),
+      };
+
+      timeSrv = new TimeSrv(rootScope, jest.fn(), location, timer, { isGrafanaVisibile: jest.fn() });
+
+      // dashboard saved with refresh on
+      _dashboard.refresh = true;
+      timeSrv.init(_dashboard);
+
+      expect(timeSrv.refresh).toBe(false);
+    });
+
     it('should handle formatted dates without time', () => {
       location = {
         search: jest.fn(() => ({
diff --git a/public/app/features/dashboard/submenu/submenu.html b/public/app/features/dashboard/submenu/submenu.html
index f240a86efba..d7cee33e6c3 100644
--- a/public/app/features/dashboard/submenu/submenu.html
+++ b/public/app/features/dashboard/submenu/submenu.html
@@ -4,7 +4,8 @@
       <label class="gf-form-label template-variable" ng-hide="variable.hide === 1">
         {{variable.label || variable.name}}
       </label>
-      <value-select-dropdown ng-if="variable.type !== 'adhoc'" variable="variable" on-updated="ctrl.variableUpdated(variable)"></value-select-dropdown>
+      <value-select-dropdown ng-if="variable.type !== 'adhoc' && variable.type !== 'textbox'" variable="variable" on-updated="ctrl.variableUpdated(variable)"></value-select-dropdown>
+      <input type="text" ng-if="variable.type === 'textbox'" ng-model="variable.query" class="gf-form-input width-12"  ng-blur="variable.current.value != variable.query && variable.updateOptions() && ctrl.variableUpdated(variable);" ng-keydown="$event.keyCode === 13 && variable.current.value != variable.query && variable.updateOptions() && ctrl.variableUpdated(variable);" ></input>
     </div>
     <ad-hoc-filters ng-if="variable.type === 'adhoc'" variable="variable"></ad-hoc-filters>
   </div>
diff --git a/public/app/features/dashboard/time_srv.ts b/public/app/features/dashboard/time_srv.ts
index dd5a0ba758f..5bf23c66bab 100644
--- a/public/app/features/dashboard/time_srv.ts
+++ b/public/app/features/dashboard/time_srv.ts
@@ -85,6 +85,12 @@ export class TimeSrv {
     if (params.to) {
       this.time.to = this.parseUrlParam(params.to) || this.time.to;
     }
+    // if absolute ignore refresh option saved to dashboard
+    if (params.to && params.to.indexOf('now') === -1) {
+      this.refresh = false;
+      this.dashboard.refresh = false;
+    }
+    // but if refresh explicitly set then use that
     if (params.refresh) {
       this.refresh = params.refresh || this.refresh;
     }
diff --git a/public/app/features/explore/Explore.tsx b/public/app/features/explore/Explore.tsx
index 187d68133cd..50d894de43f 100644
--- a/public/app/features/explore/Explore.tsx
+++ b/public/app/features/explore/Explore.tsx
@@ -528,10 +528,11 @@ export class Explore extends React.Component<any, ExploreState> {
           {!datasourceMissing ? (
             <div className="navbar-buttons">
               <Select
-                className="datasource-picker"
                 clearable={false}
+                className="gf-form-input gf-form-input--form-dropdown datasource-picker"
                 onChange={this.onChangeDatasource}
                 options={datasources}
+                isOpen={true}
                 placeholder="Loading datasources..."
                 value={selectedDatasource}
               />
@@ -586,17 +587,17 @@ export class Explore extends React.Component<any, ExploreState> {
             />
             <div className="result-options">
               {supportsGraph ? (
-                <button className={`btn navbar-button ${graphButtonActive}`} onClick={this.onClickGraphButton}>
+                <button className={`btn toggle-btn ${graphButtonActive}`} onClick={this.onClickGraphButton}>
                   Graph
                 </button>
               ) : null}
               {supportsTable ? (
-                <button className={`btn navbar-button ${tableButtonActive}`} onClick={this.onClickTableButton}>
+                <button className={`btn toggle-btn ${tableButtonActive}`} onClick={this.onClickTableButton}>
                   Table
                 </button>
               ) : null}
               {supportsLogs ? (
-                <button className={`btn navbar-button ${logsButtonActive}`} onClick={this.onClickLogsButton}>
+                <button className={`btn toggle-btn ${logsButtonActive}`} onClick={this.onClickLogsButton}>
                   Logs
                 </button>
               ) : null}
diff --git a/public/app/features/org/partials/orgUsers.html b/public/app/features/org/partials/orgUsers.html
index 697879c6ac2..8f75625b506 100644
--- a/public/app/features/org/partials/orgUsers.html
+++ b/public/app/features/org/partials/orgUsers.html
@@ -2,16 +2,25 @@
 
 <div class="page-container page-body">
   <div class="page-action-bar">
-    <label class="gf-form gf-form--grow gf-form--has-input-icon">
+    <label class="gf-form gf-form--has-input-icon">
       <input type="text" class="gf-form-input width-20" ng-model="ctrl.searchQuery" ng-change="ctrl.onQueryUpdated()" placeholder="Filter by username or email" />
       <i class="gf-form-input-icon fa fa-search"></i>
     </label>
 
-    <div class="page-action-bar__spacer"></div>
+    <div ng-if="ctrl.pendingInvites.length" style="margin-left: 1rem">
+      <button class="btn toggle-btn active" ng-if="!ctrl.showInvites">
+        Users
+      </button><button class="btn toggle-btn" ng-if="!ctrl.showInvites" ng-click="ctrl.showInvites = true">
+        Pending Invites ({{ctrl.pendingInvites.length}})
+      </button>
+      <button class="btn toggle-btn" ng-if="ctrl.showInvites" ng-click="ctrl.showInvites = false">
+        Users
+      </button><button class="btn toggle-btn active" ng-if="ctrl.showInvites">
+        Pending Invites ({{ctrl.pendingInvites.length}})
+      </button>
+    </div>
 
-    <button class="btn btn-inverse" ng-show="ctrl.pendingInvites.length" ng-click="ctrl.showInvites = true">
-      Pending Invites ({{ctrl.pendingInvites.length}})
-    </button>
+    <div class="page-action-bar__spacer"></div>
 
     <a class="btn btn-success" href="org/users/invite" ng-show="ctrl.canInvite">
       <i class="fa fa-plus"></i>
diff --git a/public/app/features/plugins/PluginActionBar.test.tsx b/public/app/features/plugins/PluginActionBar.test.tsx
new file mode 100644
index 00000000000..be3f37e89fa
--- /dev/null
+++ b/public/app/features/plugins/PluginActionBar.test.tsx
@@ -0,0 +1,31 @@
+import React from 'react';
+import { shallow } from 'enzyme';
+import { PluginActionBar, Props } from './PluginActionBar';
+import { LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';
+
+const setup = (propOverrides?: object) => {
+  const props: Props = {
+    searchQuery: '',
+    layoutMode: LayoutModes.Grid,
+    setLayoutMode: jest.fn(),
+    setPluginsSearchQuery: jest.fn(),
+  };
+
+  Object.assign(props, propOverrides);
+
+  const wrapper = shallow(<PluginActionBar {...props} />);
+  const instance = wrapper.instance() as PluginActionBar;
+
+  return {
+    wrapper,
+    instance,
+  };
+};
+
+describe('Render', () => {
+  it('should render component', () => {
+    const { wrapper } = setup();
+
+    expect(wrapper).toMatchSnapshot();
+  });
+});
diff --git a/public/app/features/plugins/PluginActionBar.tsx b/public/app/features/plugins/PluginActionBar.tsx
new file mode 100644
index 00000000000..301b432ff5c
--- /dev/null
+++ b/public/app/features/plugins/PluginActionBar.tsx
@@ -0,0 +1,62 @@
+import React, { PureComponent } from 'react';
+import { connect } from 'react-redux';
+import LayoutSelector, { LayoutMode } from '../../core/components/LayoutSelector/LayoutSelector';
+import { setLayoutMode, setPluginsSearchQuery } from './state/actions';
+import { getPluginsSearchQuery, getLayoutMode } from './state/selectors';
+
+export interface Props {
+  searchQuery: string;
+  layoutMode: LayoutMode;
+  setLayoutMode: typeof setLayoutMode;
+  setPluginsSearchQuery: typeof setPluginsSearchQuery;
+}
+
+export class PluginActionBar extends PureComponent<Props> {
+  onSearchQueryChange = event => {
+    this.props.setPluginsSearchQuery(event.target.value);
+  };
+
+  render() {
+    const { searchQuery, layoutMode, setLayoutMode } = this.props;
+
+    return (
+      <div className="page-action-bar">
+        <div className="gf-form gf-form--grow">
+          <label className="gf-form--has-input-icon">
+            <input
+              type="text"
+              className="gf-form-input width-20"
+              value={searchQuery}
+              onChange={this.onSearchQueryChange}
+              placeholder="Filter by name or type"
+            />
+            <i className="gf-form-input-icon fa fa-search" />
+          </label>
+          <LayoutSelector mode={layoutMode} onLayoutModeChanged={(mode: LayoutMode) => setLayoutMode(mode)} />
+        </div>
+        <div className="page-action-bar__spacer" />
+        <a
+          className="btn btn-success"
+          href="https://grafana.com/plugins?utm_source=grafana_plugin_list"
+          target="_blank"
+        >
+          Find more plugins on Grafana.com
+        </a>
+      </div>
+    );
+  }
+}
+
+function mapStateToProps(state) {
+  return {
+    searchQuery: getPluginsSearchQuery(state.plugins),
+    layoutMode: getLayoutMode(state.plugins),
+  };
+}
+
+const mapDispatchToProps = {
+  setPluginsSearchQuery,
+  setLayoutMode,
+};
+
+export default connect(mapStateToProps, mapDispatchToProps)(PluginActionBar);
diff --git a/public/app/features/plugins/PluginList.test.tsx b/public/app/features/plugins/PluginList.test.tsx
new file mode 100644
index 00000000000..201dd69b9db
--- /dev/null
+++ b/public/app/features/plugins/PluginList.test.tsx
@@ -0,0 +1,25 @@
+import React from 'react';
+import { shallow } from 'enzyme';
+import PluginList from './PluginList';
+import { getMockPlugins } from './__mocks__/pluginMocks';
+import { LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';
+
+const setup = (propOverrides?: object) => {
+  const props = Object.assign(
+    {
+      plugins: getMockPlugins(5),
+      layoutMode: LayoutModes.Grid,
+    },
+    propOverrides
+  );
+
+  return shallow(<PluginList {...props} />);
+};
+
+describe('Render', () => {
+  it('should render component', () => {
+    const wrapper = setup();
+
+    expect(wrapper).toMatchSnapshot();
+  });
+});
diff --git a/public/app/features/plugins/PluginList.tsx b/public/app/features/plugins/PluginList.tsx
new file mode 100644
index 00000000000..0074839e754
--- /dev/null
+++ b/public/app/features/plugins/PluginList.tsx
@@ -0,0 +1,32 @@
+import React, { SFC } from 'react';
+import classNames from 'classnames/bind';
+import PluginListItem from './PluginListItem';
+import { Plugin } from 'app/types';
+import { LayoutMode, LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';
+
+interface Props {
+  plugins: Plugin[];
+  layoutMode: LayoutMode;
+}
+
+const PluginList: SFC<Props> = props => {
+  const { plugins, layoutMode } = props;
+
+  const listStyle = classNames({
+    'card-section': true,
+    'card-list-layout-grid': layoutMode === LayoutModes.Grid,
+    'card-list-layout-list': layoutMode === LayoutModes.List,
+  });
+
+  return (
+    <section className={listStyle}>
+      <ol className="card-list">
+        {plugins.map((plugin, index) => {
+          return <PluginListItem plugin={plugin} key={`${plugin.name}-${index}`} />;
+        })}
+      </ol>
+    </section>
+  );
+};
+
+export default PluginList;
diff --git a/public/app/features/plugins/PluginListItem.test.tsx b/public/app/features/plugins/PluginListItem.test.tsx
new file mode 100644
index 00000000000..175911c5e05
--- /dev/null
+++ b/public/app/features/plugins/PluginListItem.test.tsx
@@ -0,0 +1,33 @@
+import React from 'react';
+import { shallow } from 'enzyme';
+import PluginListItem from './PluginListItem';
+import { getMockPlugin } from './__mocks__/pluginMocks';
+
+const setup = (propOverrides?: object) => {
+  const props = Object.assign(
+    {
+      plugin: getMockPlugin(),
+    },
+    propOverrides
+  );
+
+  return shallow(<PluginListItem {...props} />);
+};
+
+describe('Render', () => {
+  it('should render component', () => {
+    const wrapper = setup();
+
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('should render has plugin section', () => {
+    const mockPlugin = getMockPlugin();
+    mockPlugin.hasUpdate = true;
+    const wrapper = setup({
+      plugin: mockPlugin,
+    });
+
+    expect(wrapper).toMatchSnapshot();
+  });
+});
diff --git a/public/app/features/plugins/PluginListItem.tsx b/public/app/features/plugins/PluginListItem.tsx
new file mode 100644
index 00000000000..05eac614fd5
--- /dev/null
+++ b/public/app/features/plugins/PluginListItem.tsx
@@ -0,0 +1,39 @@
+import React, { SFC } from 'react';
+import { Plugin } from 'app/types';
+
+interface Props {
+  plugin: Plugin;
+}
+
+const PluginListItem: SFC<Props> = props => {
+  const { plugin } = props;
+
+  return (
+    <li className="card-item-wrapper">
+      <a className="card-item" href={`plugins/${plugin.id}/edit`}>
+        <div className="card-item-header">
+          <div className="card-item-type">
+            <i className={`icon-gf icon-gf-${plugin.type}`} />
+            {plugin.type}
+          </div>
+          {plugin.hasUpdate && (
+            <div className="card-item-notice">
+              <span bs-tooltip="plugin.latestVersion">Update available!</span>
+            </div>
+          )}
+        </div>
+        <div className="card-item-body">
+          <figure className="card-item-figure">
+            <img src={plugin.info.logos.small} />
+          </figure>
+          <div className="card-item-details">
+            <div className="card-item-name">{plugin.name}</div>
+            <div className="card-item-sub-name">{`By ${plugin.info.author.name}`}</div>
+          </div>
+        </div>
+      </a>
+    </li>
+  );
+};
+
+export default PluginListItem;
diff --git a/public/app/features/plugins/PluginListPage.test.tsx b/public/app/features/plugins/PluginListPage.test.tsx
new file mode 100644
index 00000000000..452a89837c7
--- /dev/null
+++ b/public/app/features/plugins/PluginListPage.test.tsx
@@ -0,0 +1,32 @@
+import React from 'react';
+import { shallow } from 'enzyme';
+import { PluginListPage, Props } from './PluginListPage';
+import { NavModel, Plugin } from '../../types';
+import { LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';
+
+const setup = (propOverrides?: object) => {
+  const props: Props = {
+    navModel: {} as NavModel,
+    plugins: [] as Plugin[],
+    layoutMode: LayoutModes.Grid,
+    loadPlugins: jest.fn(),
+  };
+
+  Object.assign(props, propOverrides);
+
+  const wrapper = shallow(<PluginListPage {...props} />);
+  const instance = wrapper.instance() as PluginListPage;
+
+  return {
+    wrapper,
+    instance,
+  };
+};
+
+describe('Render', () => {
+  it('should render component', () => {
+    const { wrapper } = setup();
+
+    expect(wrapper).toMatchSnapshot();
+  });
+});
diff --git a/public/app/features/plugins/PluginListPage.tsx b/public/app/features/plugins/PluginListPage.tsx
new file mode 100644
index 00000000000..de2968b126c
--- /dev/null
+++ b/public/app/features/plugins/PluginListPage.tsx
@@ -0,0 +1,56 @@
+import React, { PureComponent } from 'react';
+import { hot } from 'react-hot-loader';
+import { connect } from 'react-redux';
+import PageHeader from '../../core/components/PageHeader/PageHeader';
+import PluginActionBar from './PluginActionBar';
+import PluginList from './PluginList';
+import { NavModel, Plugin } from '../../types';
+import { loadPlugins } from './state/actions';
+import { getNavModel } from '../../core/selectors/navModel';
+import { getLayoutMode, getPlugins } from './state/selectors';
+import { LayoutMode } from '../../core/components/LayoutSelector/LayoutSelector';
+
+export interface Props {
+  navModel: NavModel;
+  plugins: Plugin[];
+  layoutMode: LayoutMode;
+  loadPlugins: typeof loadPlugins;
+}
+
+export class PluginListPage extends PureComponent<Props> {
+  componentDidMount() {
+    this.fetchPlugins();
+  }
+
+  async fetchPlugins() {
+    await this.props.loadPlugins();
+  }
+
+  render() {
+    const { navModel, plugins, layoutMode } = this.props;
+
+    return (
+      <div>
+        <PageHeader model={navModel} />
+        <div className="page-container page-body">
+          <PluginActionBar />
+          {plugins && <PluginList plugins={plugins} layoutMode={layoutMode} />}
+        </div>
+      </div>
+    );
+  }
+}
+
+function mapStateToProps(state) {
+  return {
+    navModel: getNavModel(state.navIndex, 'plugins'),
+    plugins: getPlugins(state.plugins),
+    layoutMode: getLayoutMode(state.plugins),
+  };
+}
+
+const mapDispatchToProps = {
+  loadPlugins,
+};
+
+export default hot(module)(connect(mapStateToProps, mapDispatchToProps)(PluginListPage));
diff --git a/public/app/features/plugins/__mocks__/pluginMocks.ts b/public/app/features/plugins/__mocks__/pluginMocks.ts
new file mode 100644
index 00000000000..d8dd67d5b61
--- /dev/null
+++ b/public/app/features/plugins/__mocks__/pluginMocks.ts
@@ -0,0 +1,59 @@
+import { Plugin } from 'app/types';
+
+export const getMockPlugins = (amount: number): Plugin[] => {
+  const plugins = [];
+
+  for (let i = 0; i <= amount; i++) {
+    plugins.push({
+      defaultNavUrl: 'some/url',
+      enabled: false,
+      hasUpdate: false,
+      id: `${i}`,
+      info: {
+        author: {
+          name: 'Grafana Labs',
+          url: 'url/to/GrafanaLabs',
+        },
+        description: 'pretty decent plugin',
+        links: ['one link'],
+        logos: { small: 'small/logo', large: 'large/logo' },
+        screenshots: `screenshot/${i}`,
+        updated: '2018-09-26',
+        version: '1',
+      },
+      latestVersion: `1.${i}`,
+      name: `pretty cool plugin-${i}`,
+      pinned: false,
+      state: '',
+      type: '',
+    });
+  }
+
+  return plugins;
+};
+
+export const getMockPlugin = () => {
+  return {
+    defaultNavUrl: 'some/url',
+    enabled: false,
+    hasUpdate: false,
+    id: '1',
+    info: {
+      author: {
+        name: 'Grafana Labs',
+        url: 'url/to/GrafanaLabs',
+      },
+      description: 'pretty decent plugin',
+      links: ['one link'],
+      logos: { small: 'small/logo', large: 'large/logo' },
+      screenshots: 'screenshot/1',
+      updated: '2018-09-26',
+      version: '1',
+    },
+    latestVersion: '1',
+    name: 'pretty cool plugin 1',
+    pinned: false,
+    state: '',
+    type: '',
+  };
+};
diff --git a/public/app/features/plugins/__snapshots__/PluginActionBar.test.tsx.snap b/public/app/features/plugins/__snapshots__/PluginActionBar.test.tsx.snap
new file mode 100644
index 00000000000..30cb53cea27
--- /dev/null
+++ b/public/app/features/plugins/__snapshots__/PluginActionBar.test.tsx.snap
@@ -0,0 +1,40 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Render should render component 1`] = `
+<div
+  className="page-action-bar"
+>
+  <div
+    className="gf-form gf-form--grow"
+  >
+    <label
+      className="gf-form--has-input-icon"
+    >
+      <input
+        className="gf-form-input width-20"
+        onChange={[Function]}
+        placeholder="Filter by name or type"
+        type="text"
+        value=""
+      />
+      <i
+        className="gf-form-input-icon fa fa-search"
+      />
+    </label>
+    <LayoutSelector
+      mode="grid"
+      onLayoutModeChanged={[Function]}
+    />
+  </div>
+  <div
+    className="page-action-bar__spacer"
+  />
+  <a
+    className="btn btn-success"
+    href="https://grafana.com/plugins?utm_source=grafana_plugin_list"
+    target="_blank"
+  >
+    Find more plugins on Grafana.com
+  </a>
+</div>
+`;
diff --git a/public/app/features/plugins/__snapshots__/PluginList.test.tsx.snap b/public/app/features/plugins/__snapshots__/PluginList.test.tsx.snap
new file mode 100644
index 00000000000..176304b7b11
--- /dev/null
+++ b/public/app/features/plugins/__snapshots__/PluginList.test.tsx.snap
@@ -0,0 +1,210 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Render should render component 1`] = `
+<section
+  className="card-section card-list-layout-grid"
+>
+  <ol
+    className="card-list"
+  >
+    <PluginListItem
+      key="pretty cool plugin-0-0"
+      plugin={
+        Object {
+          "defaultNavUrl": "some/url",
+          "enabled": false,
+          "hasUpdate": false,
+          "id": "0",
+          "info": Object {
+            "author": Object {
+              "name": "Grafana Labs",
+              "url": "url/to/GrafanaLabs",
+            },
+            "description": "pretty decent plugin",
+            "links": Array [
+              "one link",
+            ],
+            "logos": Object {
+              "large": "large/logo",
+              "small": "small/logo",
+            },
+            "screenshots": "screenshot/0",
+            "updated": "2018-09-26",
+            "version": "1",
+          },
+          "latestVersion": "1.0",
+          "name": "pretty cool plugin-0",
+          "pinned": false,
+          "state": "",
+          "type": "",
+        }
+      }
+    />
+    <PluginListItem
+      key="pretty cool plugin-1-1"
+      plugin={
+        Object {
+          "defaultNavUrl": "some/url",
+          "enabled": false,
+          "hasUpdate": false,
+          "id": "1",
+          "info": Object {
+            "author": Object {
+              "name": "Grafana Labs",
+              "url": "url/to/GrafanaLabs",
+            },
+            "description": "pretty decent plugin",
+            "links": Array [
+              "one link",
+            ],
+            "logos": Object {
+              "large": "large/logo",
+              "small": "small/logo",
+            },
+            "screenshots": "screenshot/1",
+            "updated": "2018-09-26",
+            "version": "1",
+          },
+          "latestVersion": "1.1",
+          "name": "pretty cool plugin-1",
+          "pinned": false,
+          "state": "",
+          "type": "",
+        }
+      }
+    />
+    <PluginListItem
+      key="pretty cool plugin-2-2"
+      plugin={
+        Object {
+          "defaultNavUrl": "some/url",
+          "enabled": false,
+          "hasUpdate": false,
+          "id": "2",
+          "info": Object {
+            "author": Object {
+              "name": "Grafana Labs",
+              "url": "url/to/GrafanaLabs",
+            },
+            "description": "pretty decent plugin",
+            "links": Array [
+              "one link",
+            ],
+            "logos": Object {
+              "large": "large/logo",
+              "small": "small/logo",
+            },
+            "screenshots": "screenshot/2",
+            "updated": "2018-09-26",
+            "version": "1",
+          },
+          "latestVersion": "1.2",
+          "name": "pretty cool plugin-2",
+          "pinned": false,
+          "state": "",
+          "type": "",
+        }
+      }
+    />
+    <PluginListItem
+      key="pretty cool plugin-3-3"
+      plugin={
+        Object {
+          "defaultNavUrl": "some/url",
+          "enabled": false,
+          "hasUpdate": false,
+          "id": "3",
+          "info": Object {
+            "author": Object {
+              "name": "Grafana Labs",
+              "url": "url/to/GrafanaLabs",
+            },
+            "description": "pretty decent plugin",
+            "links": Array [
+              "one link",
+            ],
+            "logos": Object {
+              "large": "large/logo",
+              "small": "small/logo",
+            },
+            "screenshots": "screenshot/3",
+            "updated": "2018-09-26",
+            "version": "1",
+          },
+          "latestVersion": "1.3",
+          "name": "pretty cool plugin-3",
+          "pinned": false,
+          "state": "",
+          "type": "",
+        }
+      }
+    />
+    <PluginListItem
+      key="pretty cool plugin-4-4"
+      plugin={
+        Object {
+          "defaultNavUrl": "some/url",
+          "enabled": false,
+          "hasUpdate": false,
+          "id": "4",
+          "info": Object {
+            "author": Object {
+              "name": "Grafana Labs",
+              "url": "url/to/GrafanaLabs",
+            },
+            "description": "pretty decent plugin",
+            "links": Array [
+              "one link",
+            ],
+            "logos": Object {
+              "large": "large/logo",
+              "small": "small/logo",
+            },
+            "screenshots": "screenshot/4",
+            "updated": "2018-09-26",
+            "version": "1",
+          },
+          "latestVersion": "1.4",
+          "name": "pretty cool plugin-4",
+          "pinned": false,
+          "state": "",
+          "type": "",
+        }
+      }
+    />
+    <PluginListItem
+      key="pretty cool plugin-5-5"
+      plugin={
+        Object {
+          "defaultNavUrl": "some/url",
+          "enabled": false,
+          "hasUpdate": false,
+          "id": "5",
+          "info": Object {
+            "author": Object {
+              "name": "Grafana Labs",
+              "url": "url/to/GrafanaLabs",
+            },
+            "description": "pretty decent plugin",
+            "links": Array [
+              "one link",
+            ],
+            "logos": Object {
+              "large": "large/logo",
+              "small": "small/logo",
+            },
+            "screenshots": "screenshot/5",
+            "updated": "2018-09-26",
+            "version": "1",
+          },
+          "latestVersion": "1.5",
+          "name": "pretty cool plugin-5",
+          "pinned": false,
+          "state": "",
+          "type": "",
+        }
+      }
+    />
+  </ol>
+</section>
+`;
diff --git a/public/app/features/plugins/__snapshots__/PluginListItem.test.tsx.snap b/public/app/features/plugins/__snapshots__/PluginListItem.test.tsx.snap
new file mode 100644
index 00000000000..fc0cc68c522
--- /dev/null
+++ b/public/app/features/plugins/__snapshots__/PluginListItem.test.tsx.snap
@@ -0,0 +1,106 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Render should render component 1`] = `
+<li
+  className="card-item-wrapper"
+>
+  <a
+    className="card-item"
+    href="plugins/1/edit"
+  >
+    <div
+      className="card-item-header"
+    >
+      <div
+        className="card-item-type"
+      >
+        <i
+          className="icon-gf icon-gf-"
+        />
+      </div>
+    </div>
+    <div
+      className="card-item-body"
+    >
+      <figure
+        className="card-item-figure"
+      >
+        <img
+          src="small/logo"
+        />
+      </figure>
+      <div
+        className="card-item-details"
+      >
+        <div
+          className="card-item-name"
+        >
+          pretty cool plugin 1
+        </div>
+        <div
+          className="card-item-sub-name"
+        >
+          By Grafana Labs
+        </div>
+      </div>
+    </div>
+  </a>
+</li>
+`;
+
+exports[`Render should render has plugin section 1`] = `
+<li
+  className="card-item-wrapper"
+>
+  <a
+    className="card-item"
+    href="plugins/1/edit"
+  >
+    <div
+      className="card-item-header"
+    >
+      <div
+        className="card-item-type"
+      >
+        <i
+          className="icon-gf icon-gf-"
+        />
+      </div>
+      <div
+        className="card-item-notice"
+      >
+        <span
+          bs-tooltip="plugin.latestVersion"
+        >
+          Update available!
+        </span>
+      </div>
+    </div>
+    <div
+      className="card-item-body"
+    >
+      <figure
+        className="card-item-figure"
+      >
+        <img
+          src="small/logo"
+        />
+      </figure>
+      <div
+        className="card-item-details"
+      >
+        <div
+          className="card-item-name"
+        >
+          pretty cool plugin 1
+        </div>
+        <div
+          className="card-item-sub-name"
+        >
+          By Grafana Labs
+        </div>
+      </div>
+    </div>
+  </a>
+</li>
+`;
diff --git a/public/app/features/plugins/__snapshots__/PluginListPage.test.tsx.snap b/public/app/features/plugins/__snapshots__/PluginListPage.test.tsx.snap
new file mode 100644
index 00000000000..74b23d8850a
--- /dev/null
+++ b/public/app/features/plugins/__snapshots__/PluginListPage.test.tsx.snap
@@ -0,0 +1,18 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Render should render component 1`] = `
+<div>
+  <PageHeader
+    model={Object {}}
+  />
+  <div
+    className="page-container page-body"
+  >
+    <Connect(PluginActionBar) />
+    <PluginList
+      layoutMode="grid"
+      plugins={Array []}
+    />
+  </div>
+</div>
+`;
diff --git a/public/app/features/plugins/all.ts b/public/app/features/plugins/all.ts
index fd19ea963b6..5be7593f68d 100644
--- a/public/app/features/plugins/all.ts
+++ b/public/app/features/plugins/all.ts
@@ -1,6 +1,5 @@
 import './plugin_edit_ctrl';
 import './plugin_page_ctrl';
-import './plugin_list_ctrl';
 import './import_list/import_list';
 import './ds_edit_ctrl';
 import './ds_dashboards_ctrl';
diff --git a/public/app/features/plugins/partials/plugin_list.html b/public/app/features/plugins/partials/plugin_list.html
deleted file mode 100644
index 04b5bf9c791..00000000000
--- a/public/app/features/plugins/partials/plugin_list.html
+++ /dev/null
@@ -1,45 +0,0 @@
-<page-header model="ctrl.navModel"></page-header>
-
-<div class="page-container page-body">
-  <div class="page-action-bar">
-		<div class="gf-form gf-form--grow">
-			<label class="gf-form--has-input-icon">
-				<input type="text" class="gf-form-input width-20" ng-model="ctrl.searchQuery" ng-change="ctrl.onQueryUpdated()" placeholder="Filter by name or type" />
-				<i class="gf-form-input-icon fa fa-search"></i>
-			</label>
-			<layout-selector />
-		</div>
-		<div class="page-action-bar__spacer"></div>
-		<a class="btn btn-success" href="https://grafana.com/plugins?utm_source=grafana_plugin_list" target="_blank">
-			Find more plugins on Grafana.com
-		</a>
-	</div>
-
-	<section class="card-section" layout-mode>
-
-		<ol class="card-list" >
-			<li class="card-item-wrapper" ng-repeat="plugin in ctrl.plugins">
-				<a class="card-item" href="plugins/{{plugin.id}}/edit">
-					<div class="card-item-header">
-						<div class="card-item-type">
-							<i class="icon-gf icon-gf-{{plugin.type}}"></i>
-							{{plugin.type}}
-						</div>
-						<div class="card-item-notice" ng-show="plugin.hasUpdate">
-							<span bs-tooltip="plugin.latestVersion">Update available!</span>
-						</div>
-					</div>
-					<div class="card-item-body">
-						<figure class="card-item-figure">
-							<img ng-src="{{plugin.info.logos.small}}">
-						</figure>
-						<div class="card-item-details">
-							<div class="card-item-name">{{plugin.name}}</div>
-							<div class="card-item-sub-name">By {{plugin.info.author.name}}</div>
-						</div>
-					</div>
-				</a>
-			</li>
-		</ol>
-	</section>
-</div>
diff --git a/public/app/features/plugins/plugin_list_ctrl.ts b/public/app/features/plugins/plugin_list_ctrl.ts
deleted file mode 100644
index 315252364cc..00000000000
--- a/public/app/features/plugins/plugin_list_ctrl.ts
+++ /dev/null
@@ -1,30 +0,0 @@
-import angular from 'angular';
-import _ from 'lodash';
-
-export class PluginListCtrl {
-  plugins: any[];
-  tabIndex: number;
-  navModel: any;
-  searchQuery: string;
-  allPlugins: any[];
-
-  /** @ngInject */
-  constructor(private backendSrv: any, $location, navModelSrv) {
-    this.tabIndex = 0;
-    this.navModel = navModelSrv.getNav('cfg', 'plugins', 0);
-
-    this.backendSrv.get('api/plugins', { embedded: 0 }).then(plugins => {
-      this.plugins = plugins;
-      this.allPlugins = plugins;
-    });
-  }
-
-  onQueryUpdated() {
-    const regex = new RegExp(this.searchQuery, 'ig');
-    this.plugins = _.filter(this.allPlugins, item => {
-      return regex.test(item.name) || regex.test(item.type);
-    });
-  }
-}
-
-angular.module('grafana.controllers').controller('PluginListCtrl', PluginListCtrl);
diff --git a/public/app/features/plugins/state/actions.ts b/public/app/features/plugins/state/actions.ts
new file mode 100644
index 00000000000..24774c6061c
--- /dev/null
+++ b/public/app/features/plugins/state/actions.ts
@@ -0,0 +1,51 @@
+import { Plugin, StoreState } from 'app/types';
+import { ThunkAction } from 'redux-thunk';
+import { getBackendSrv } from '../../../core/services/backend_srv';
+import { LayoutMode } from '../../../core/components/LayoutSelector/LayoutSelector';
+
+export enum ActionTypes {
+  LoadPlugins = 'LOAD_PLUGINS',
+  SetPluginsSearchQuery = 'SET_PLUGIN_SEARCH_QUERY',
+  SetLayoutMode = 'SET_LAYOUT_MODE',
+}
+
+export interface LoadPluginsAction {
+  type: ActionTypes.LoadPlugins;
+  payload: Plugin[];
+}
+
+export interface SetPluginsSearchQueryAction {
+  type: ActionTypes.SetPluginsSearchQuery;
+  payload: string;
+}
+
+export interface SetLayoutModeAction {
+  type: ActionTypes.SetLayoutMode;
+  payload: LayoutMode;
+}
+
+export const setLayoutMode = (mode: LayoutMode): SetLayoutModeAction => ({
+  type: ActionTypes.SetLayoutMode,
+  payload: mode,
+});
+
+export const setPluginsSearchQuery = (query: string): SetPluginsSearchQueryAction => ({
+  type: ActionTypes.SetPluginsSearchQuery,
+  payload: query,
+});
+
+const pluginsLoaded = (plugins: Plugin[]): LoadPluginsAction => ({
+  type: ActionTypes.LoadPlugins,
+  payload: plugins,
+});
+
+export type Action = LoadPluginsAction | SetPluginsSearchQueryAction | SetLayoutModeAction;
+
+type ThunkResult<R> = ThunkAction<R, StoreState, undefined, Action>;
+
+export function loadPlugins(): ThunkResult<void> {
+  return async dispatch => {
+    const result = await getBackendSrv().get('api/plugins', { embedded: 0 });
+    dispatch(pluginsLoaded(result));
+  };
+}
diff --git a/public/app/features/plugins/state/reducers.ts b/public/app/features/plugins/state/reducers.ts
new file mode 100644
index 00000000000..1ca2880282c
--- /dev/null
+++ b/public/app/features/plugins/state/reducers.ts
@@ -0,0 +1,27 @@
+import { Action, ActionTypes } from './actions';
+import { Plugin, PluginsState } from 'app/types';
+import { LayoutModes } from '../../../core/components/LayoutSelector/LayoutSelector';
+
+export const initialState: PluginsState = {
+  plugins: [] as Plugin[],
+  searchQuery: '',
+  layoutMode: LayoutModes.Grid,
+};
+
+export const pluginsReducer = (state = initialState, action: Action): PluginsState => {
+  switch (action.type) {
+    case ActionTypes.LoadPlugins:
+      return { ...state, plugins: action.payload };
+
+    case ActionTypes.SetPluginsSearchQuery:
+      return { ...state, searchQuery: action.payload };
+
+    case ActionTypes.SetLayoutMode:
+      return { ...state, layoutMode: action.payload };
+  }
+  return state;
+};
+
+export default {
+  plugins: pluginsReducer,
+};
diff --git a/public/app/features/plugins/state/selectors.test.ts b/public/app/features/plugins/state/selectors.test.ts
new file mode 100644
index 00000000000..09b1ce4c259
--- /dev/null
+++ b/public/app/features/plugins/state/selectors.test.ts
@@ -0,0 +1,31 @@
+import { getPlugins, getPluginsSearchQuery } from './selectors';
+import { initialState } from './reducers';
+import { getMockPlugins } from '../__mocks__/pluginMocks';
+
+describe('Selectors', () => {
+  const mockState = initialState;
+
+  it('should return search query', () => {
+    mockState.searchQuery = 'test';
+    const query = getPluginsSearchQuery(mockState);
+
+    expect(query).toEqual(mockState.searchQuery);
+  });
+
+  it('should return plugins', () => {
+    mockState.plugins = getMockPlugins(5);
+    mockState.searchQuery = '';
+
+    const plugins = getPlugins(mockState);
+
+    expect(plugins).toEqual(mockState.plugins);
+  });
+
+  it('should filter plugins', () => {
+    mockState.searchQuery = 'plugin-1';
+
+    const plugins = getPlugins(mockState);
+
+    expect(plugins.length).toEqual(1);
+  });
+});
diff --git a/public/app/features/plugins/state/selectors.ts b/public/app/features/plugins/state/selectors.ts
new file mode 100644
index 00000000000..e1d16462527
--- /dev/null
+++ b/public/app/features/plugins/state/selectors.ts
@@ -0,0 +1,10 @@
+export const getPlugins = state => {
+  const regex = new RegExp(state.searchQuery, 'i');
+
+  return state.plugins.filter(item => {
+    return regex.test(item.name) || regex.test(item.info.author.name) || regex.test(item.info.description);
+  });
+};
+
+export const getPluginsSearchQuery = state => state.searchQuery;
+export const getLayoutMode = state => state.layoutMode;
diff --git a/public/app/features/templating/TextBoxVariable.ts b/public/app/features/templating/TextBoxVariable.ts
new file mode 100644
index 00000000000..331ff4f95b8
--- /dev/null
+++ b/public/app/features/templating/TextBoxVariable.ts
@@ -0,0 +1,58 @@
+import { Variable, assignModelProperties, variableTypes } from './variable';
+
+export class TextBoxVariable implements Variable {
+  query: string;
+  current: any;
+  options: any[];
+  skipUrlSync: boolean;
+
+  defaults = {
+    type: 'textbox',
+    name: '',
+    hide: 2,
+    label: '',
+    query: '',
+    current: {},
+    options: [],
+    skipUrlSync: false,
+  };
+
+  /** @ngInject */
+  constructor(private model, private variableSrv) {
+    assignModelProperties(this, model, this.defaults);
+  }
+
+  getSaveModel() {
+    assignModelProperties(this.model, this, this.defaults);
+    return this.model;
+  }
+
+  setValue(option) {
+    this.variableSrv.setOptionAsCurrent(this, option);
+  }
+
+  updateOptions() {
+    this.options = [{ text: this.query.trim(), value: this.query.trim() }];
+    this.current = this.options[0];
+    return Promise.resolve();
+  }
+
+  dependsOn(variable) {
+    return false;
+  }
+
+  setValueFromUrl(urlValue) {
+    this.query = urlValue;
+    return this.variableSrv.setOptionFromUrl(this, urlValue);
+  }
+
+  getValueForUrl() {
+    return this.current.value;
+  }
+}
+
+variableTypes['textbox'] = {
+  name: 'Text box',
+  ctor: TextBoxVariable,
+  description: 'Define a textbox variable, where users can enter any arbitrary string',
+};
diff --git a/public/app/features/templating/all.ts b/public/app/features/templating/all.ts
index 16465740642..b872fa6cd4a 100644
--- a/public/app/features/templating/all.ts
+++ b/public/app/features/templating/all.ts
@@ -9,6 +9,7 @@ import { DatasourceVariable } from './datasource_variable';
 import { CustomVariable } from './custom_variable';
 import { ConstantVariable } from './constant_variable';
 import { AdhocVariable } from './adhoc_variable';
+import { TextBoxVariable } from './TextBoxVariable';
 
 coreModule.factory('templateSrv', () => {
   return templateSrv;
@@ -22,4 +23,5 @@ export {
   CustomVariable,
   ConstantVariable,
   AdhocVariable,
+  TextBoxVariable,
 };
diff --git a/public/app/features/templating/partials/editor.html b/public/app/features/templating/partials/editor.html
index 0d8b0ace327..ac4450c20a2 100644
--- a/public/app/features/templating/partials/editor.html
+++ b/public/app/features/templating/partials/editor.html
@@ -155,6 +155,14 @@
 			</div>
 		</div>
 
+		<div ng-if="current.type === 'textbox'" class="gf-form-group">
+			<h5 class="section-heading">Text options</h5>
+			<div class="gf-form">
+				<span class="gf-form-label">Default value</span>
+				<input type="text" class="gf-form-input" ng-model='current.query' ng-blur="runQuery()" placeholder="default value, if any"></input>
+			</div>
+		</div>
+
 		<div ng-if="current.type === 'query'" class="gf-form-group">
 			<h5 class="section-heading">Query Options</h5>
 
diff --git a/public/app/plugins/datasource/cloudwatch/partials/config.html b/public/app/plugins/datasource/cloudwatch/partials/config.html
index a4df0c14807..e5ab0910cba 100644
--- a/public/app/plugins/datasource/cloudwatch/partials/config.html
+++ b/public/app/plugins/datasource/cloudwatch/partials/config.html
@@ -39,7 +39,7 @@
   <div class="gf-form">
     <label class="gf-form-label width-13">Default Region</label>
     <div class="gf-form-select-wrapper max-width-18 gf-form-select-wrapper--has-help-icon">
-      <select class="gf-form-input" ng-model="ctrl.current.jsonData.defaultRegion" ng-options="region for region in ['ap-northeast-1', 'ap-northeast-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-south-1', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-west-1', 'us-west-1', 'us-west-2']"></select>
+      <select class="gf-form-input" ng-model="ctrl.current.jsonData.defaultRegion" ng-options="region for region in ['ap-northeast-1', 'ap-northeast-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-south-1', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-west-1', 'us-west-1', 'us-west-2', 'us-isob-east-1', 'us-iso-east-1']"></select>
       <info-popover mode="right-absolute">
         Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.
       </info-popover>
diff --git a/public/app/routes/routes.ts b/public/app/routes/routes.ts
index 015b4ae0b51..e4662c77367 100644
--- a/public/app/routes/routes.ts
+++ b/public/app/routes/routes.ts
@@ -5,6 +5,7 @@ import ServerStats from 'app/features/admin/ServerStats';
 import AlertRuleList from 'app/features/alerting/AlertRuleList';
 import TeamPages from 'app/features/teams/TeamPages';
 import TeamList from 'app/features/teams/TeamList';
+import PluginListPage from 'app/features/plugins/PluginListPage';
 import FolderSettingsPage from 'app/features/folders/FolderSettingsPage';
 import FolderPermissions from 'app/features/folders/FolderPermissions';
 
@@ -245,9 +246,10 @@ export function setupAngularRoutes($routeProvider, $locationProvider) {
       controllerAs: 'ctrl',
     })
     .when('/plugins', {
-      templateUrl: 'public/app/features/plugins/partials/plugin_list.html',
-      controller: 'PluginListCtrl',
-      controllerAs: 'ctrl',
+      template: '<react-container />',
+      resolve: {
+        component: () => PluginListPage,
+      },
     })
     .when('/plugins/:pluginId/edit', {
       templateUrl: 'public/app/features/plugins/partials/plugin_edit.html',
diff --git a/public/app/store/configureStore.ts b/public/app/store/configureStore.ts
index 8f6cf25043d..08d3d5bede0 100644
--- a/public/app/store/configureStore.ts
+++ b/public/app/store/configureStore.ts
@@ -6,6 +6,7 @@ import alertingReducers from 'app/features/alerting/state/reducers';
 import teamsReducers from 'app/features/teams/state/reducers';
 import foldersReducers from 'app/features/folders/state/reducers';
 import dashboardReducers from 'app/features/dashboard/state/reducers';
+import pluginReducers from 'app/features/plugins/state/reducers';
 
 const rootReducer = combineReducers({
   ...sharedReducers,
@@ -13,6 +14,7 @@ const rootReducer = combineReducers({
   ...teamsReducers,
   ...foldersReducers,
   ...dashboardReducers,
+  ...pluginReducers,
 });
 
 export let store;
diff --git a/public/app/types/index.ts b/public/app/types/index.ts
index 778a1b21b55..1dd11d73564 100644
--- a/public/app/types/index.ts
+++ b/public/app/types/index.ts
@@ -6,7 +6,7 @@ import { FolderDTO, FolderState, FolderInfo } from './folders';
 import { DashboardState } from './dashboard';
 import { DashboardAcl, OrgRole, PermissionLevel } from './acl';
 import { DataSource } from './datasources';
-import { PluginMeta } from './plugins';
+import { PluginMeta, Plugin, PluginsState } from './plugins';
 
 export {
   Team,
@@ -33,6 +33,8 @@ export {
   PermissionLevel,
   DataSource,
   PluginMeta,
+  Plugin,
+  PluginsState,
 };
 
 export interface StoreState {
diff --git a/public/app/types/plugins.ts b/public/app/types/plugins.ts
index d26085f8e73..92bebfef8d4 100644
--- a/public/app/types/plugins.ts
+++ b/public/app/types/plugins.ts
@@ -12,8 +12,36 @@ export interface PluginInclude {
 }
 
 export interface PluginMetaInfo {
+  author: {
+    name: string;
+    url: string;
+  };
+  description: string;
+  links: string[];
   logos: {
     large: string;
     small: string;
   };
+  screenshots: string;
+  updated: string;
+  version: string;
+}
+
+export interface Plugin {
+  defaultNavUrl: string;
+  enabled: boolean;
+  hasUpdate: boolean;
+  id: string;
+  info: PluginMetaInfo;
+  latestVersion: string;
+  name: string;
+  pinned: boolean;
+  state: string;
+  type: string;
+}
+
+export interface PluginsState {
+  plugins: Plugin[];
+  searchQuery: string;
+  layoutMode: string;
 }
diff --git a/public/sass/components/_buttons.scss b/public/sass/components/_buttons.scss
index b44f792fd7a..916c141a5ec 100644
--- a/public/sass/components/_buttons.scss
+++ b/public/sass/components/_buttons.scss
@@ -221,6 +221,31 @@ $btn-service-icon-width: 35px;
   }
 }
 
+//Toggle button
+
+.toggle-btn {
+  background: $input-label-bg;
+  color: $text-color-weak;
+  box-shadow: $card-shadow;
+
+  &:first-child {
+    border-radius: 2px 0 0 2px;
+    margin: 0;
+  }
+  &:last-child {
+    border-radius: 0 2px 2px 0;
+    margin-left: 0 !important;
+  }
+
+  &.active {
+    background-color: lighten($input-label-bg, 5%);
+    color: $link-color;
+    &:hover {
+      cursor: default;
+    }
+  }
+}
+
 //Button animations
 
 .btn-loading span {
diff --git a/public/sass/components/_form_select_box.scss b/public/sass/components/_form_select_box.scss
index 0401f06eba8..4db294317f7 100644
--- a/public/sass/components/_form_select_box.scss
+++ b/public/sass/components/_form_select_box.scss
@@ -3,7 +3,7 @@ $select-menu-max-height: 300px;
 $select-item-font-size: $font-size-base;
 $select-item-bg: $dropdownBackground;
 $select-item-fg: $input-color;
-$select-option-bg: $dropdownBackground;
+$select-option-bg: $menu-dropdown-bg;
 $select-option-color: $input-color;
 $select-noresults-color: $text-color;
 $select-input-bg: $input-bg;
@@ -82,20 +82,14 @@ $select-option-selected-bg: $dropdownLinkBackgroundActive;
     width: auto;
   }
 
+  .Select-option {
+    border-left: 2px solid transparent;
+  }
+
   .Select-option.is-focused {
     background-color: $dropdownLinkBackgroundHover;
     color: $dropdownLinkColorHover;
-
-    &::before {
-      position: absolute;
-      left: 0;
-      top: 0;
-      height: 100%;
-      width: 2px;
-      display: block;
-      content: '';
-      background-image: linear-gradient(to bottom, #ffd500 0%, #ff4400 99%, #ff4400 100%);
-    }
+    @include left-brand-border-gradient();
   }
 }
 
diff --git a/public/sass/pages/_explore.scss b/public/sass/pages/_explore.scss
index 903193d8b10..d427ee203b8 100644
--- a/public/sass/pages/_explore.scss
+++ b/public/sass/pages/_explore.scss
@@ -69,7 +69,7 @@
   }
 
   .datasource-picker {
-    min-width: 10rem;
+    min-width: 200px;
   }
 
   .timepicker {
diff --git a/public/views/index.template.html b/public/views/index.template.html
index ec51a12d34f..c39d5e08321 100644
--- a/public/views/index.template.html
+++ b/public/views/index.template.html
@@ -275,7 +275,10 @@
     document.head.insertBefore(myCSS, document.head.childNodes[document.head.childNodes.length - 1].nextSibling);
     // switch loader to show all has loaded
     window.onload = function() {
-      document.getElementsByClassName("preloader")[0].className = "preloader preloader--done";
+      var preloader = document.getElementsByClassName("preloader");
+      if (preloader.length) {
+        preloader[0].className = "preloader preloader--done";
+      }
     };
   </script>
 
diff --git a/scripts/grunt/default_task.js b/scripts/grunt/default_task.js
index 07519cdd6c8..bfa4080da4c 100644
--- a/scripts/grunt/default_task.js
+++ b/scripts/grunt/default_task.js
@@ -1,5 +1,5 @@
 // Lint and build CSS
-module.exports = function(grunt) {
+module.exports = function (grunt) {
   'use strict';
 
   grunt.registerTask('default', [
@@ -18,15 +18,16 @@ module.exports = function(grunt) {
   grunt.registerTask('precommit', [
     'sasslint',
     'exec:tslint',
+    'exec:tsc',
     'no-only-tests'
   ]);
 
-  grunt.registerTask('no-only-tests', function() {
+  grunt.registerTask('no-only-tests', function () {
     var files = grunt.file.expand('public/**/*_specs\.ts', 'public/**/*_specs\.js');
 
-    files.forEach(function(spec) {
+    files.forEach(function (spec) {
       var rows = grunt.file.read(spec).split('\n');
-      rows.forEach(function(row) {
+      rows.forEach(function (row) {
         if (row.indexOf('.only(') > 0) {
           grunt.log.errorlns(row);
           grunt.fail.warn('found only statement in test: ' + spec)
diff --git a/scripts/grunt/options/exec.js b/scripts/grunt/options/exec.js
index 92e530cd5fd..d01a993be67 100644
--- a/scripts/grunt/options/exec.js
+++ b/scripts/grunt/options/exec.js
@@ -1,8 +1,9 @@
-module.exports = function(config, grunt) {
+module.exports = function (config, grunt) {
   'use strict';
 
   return {
     tslint: 'node ./node_modules/tslint/lib/tslintCli.js -c tslint.json --project ./tsconfig.json',
+    tsc: 'yarn tsc --noEmit',
     jest: 'node ./node_modules/jest-cli/bin/jest.js --maxWorkers 2',
     webpack: 'node ./node_modules/webpack/bin/webpack.js --config scripts/webpack/webpack.prod.js',
   };

commit a0e1a1a1f98d5094f98e77f46b4f706b5eb514f2 (from fda8a08e0b1003320fb7a213e6ee0fd857bb609d)
Merge: 67c58fa5e40 fda8a08e0b1
Author: Marcus Efraimsson <marcus.efraimsson@gmail.com>
Date:   Fri Sep 28 15:17:30 2018 +0200

    Merge remote-tracking branch 'origin/master' into reminder_refactoring

diff --git a/Gopkg.lock b/Gopkg.lock
index bd247d691dd..041f784f770 100644
--- a/Gopkg.lock
+++ b/Gopkg.lock
@@ -19,6 +19,12 @@
   packages = ["."]
   revision = "7677a1d7c1137cd3dd5ba7a076d0c898a1ef4520"
 
+[[projects]]
+  branch = "master"
+  name = "github.com/VividCortex/mysqlerr"
+  packages = ["."]
+  revision = "6c6b55f8796f578c870b7e19bafb16103bc40095"
+
 [[projects]]
   name = "github.com/aws/aws-sdk-go"
   packages = [
@@ -673,6 +679,6 @@
 [solve-meta]
   analyzer-name = "dep"
   analyzer-version = 1
-  inputs-digest = "81a37e747b875cf870c1b9486fa3147e704dea7db8ba86f7cb942d3ddc01d3e3"
+  inputs-digest = "6e9458f912a5f0eb3430b968f1b4dbc4e3b7671b282cf4fe1573419a6d9ba0d4"
   solver-name = "gps-cdcl"
   solver-version = 1
diff --git a/Gopkg.toml b/Gopkg.toml
index 6c91ec37221..c5b4b31cb32 100644
--- a/Gopkg.toml
+++ b/Gopkg.toml
@@ -203,3 +203,7 @@ ignored = [
 [[constraint]]
   name = "github.com/denisenkom/go-mssqldb"
   revision = "270bc3860bb94dd3a3ffd047377d746c5e276726"
+
+[[constraint]]
+  name = "github.com/VividCortex/mysqlerr"
+  branch = "master"
diff --git a/pkg/models/alert_notifications.go b/pkg/models/alert_notifications.go
index b90b3d36ced..14bf8694207 100644
--- a/pkg/models/alert_notifications.go
+++ b/pkg/models/alert_notifications.go
@@ -8,8 +8,17 @@ import (
 )
 
 var (
-	ErrNotificationFrequencyNotFound = errors.New("Notification frequency not specified")
-	ErrJournalingNotFound            = errors.New("alert notification journaling not found")
+	ErrNotificationFrequencyNotFound         = errors.New("Notification frequency not specified")
+	ErrAlertNotificationStateNotFound        = errors.New("alert notification state not found")
+	ErrAlertNotificationStateVersionConflict = errors.New("alert notification state update version conflict")
+	ErrAlertNotificationStateAlreadyExist    = errors.New("alert notification state already exists.")
+)
+
+type AlertNotificationStateType string
+
+var (
+	AlertNotificationStatePending   = AlertNotificationStateType("pending")
+	AlertNotificationStateCompleted = AlertNotificationStateType("completed")
 )
 
 type AlertNotification struct {
@@ -76,33 +85,36 @@ type GetAllAlertNotificationsQuery struct {
 	Result []*AlertNotification
 }
 
-type AlertNotificationJournal struct {
+type AlertNotificationState struct {
 	Id         int64
 	OrgId      int64
 	AlertId    int64
 	NotifierId int64
 	SentAt     int64
-	Success    bool
+	State      AlertNotificationStateType
+	Version    int64
 }
 
-type RecordNotificationJournalCommand struct {
-	OrgId      int64
-	AlertId    int64
-	NotifierId int64
-	SentAt     int64
-	Success    bool
+type SetAlertNotificationStateToPendingCommand struct {
+	State *AlertNotificationState
 }
 
-type GetLatestNotificationQuery struct {
+type SetAlertNotificationStateToCompleteCommand struct {
+	State *AlertNotificationState
+}
+
+type GetNotificationStateQuery struct {
 	OrgId      int64
 	AlertId    int64
 	NotifierId int64
 
-	Result []AlertNotificationJournal
+	Result *AlertNotificationState
 }
 
-type CleanNotificationJournalCommand struct {
+type InsertAlertNotificationCommand struct {
 	OrgId      int64
 	AlertId    int64
 	NotifierId int64
+	SentAt     int64
+	State      AlertNotificationStateType
 }
diff --git a/pkg/services/alerting/interfaces.go b/pkg/services/alerting/interfaces.go
index 46f8b3c769c..65369ed3884 100644
--- a/pkg/services/alerting/interfaces.go
+++ b/pkg/services/alerting/interfaces.go
@@ -3,6 +3,8 @@ package alerting
 import (
 	"context"
 	"time"
+
+	"github.com/grafana/grafana/pkg/models"
 )
 
 type EvalHandler interface {
@@ -20,7 +22,7 @@ type Notifier interface {
 	NeedsImage() bool
 
 	// ShouldNotify checks this evaluation should send an alert notification
-	ShouldNotify(ctx context.Context, evalContext *EvalContext) bool
+	ShouldNotify(ctx context.Context, evalContext *EvalContext, notificationState *models.AlertNotificationState) bool
 
 	GetNotifierId() int64
 	GetIsDefault() bool
@@ -28,11 +30,16 @@ type Notifier interface {
 	GetFrequency() time.Duration
 }
 
-type NotifierSlice []Notifier
+type NotifierState struct {
+	notifier Notifier
+	state    *models.AlertNotificationState
+}
+
+type NotifierStateSlice []*NotifierState
 
-func (notifiers NotifierSlice) ShouldUploadImage() bool {
-	for _, notifier := range notifiers {
-		if notifier.NeedsImage() {
+func (notifiers NotifierStateSlice) ShouldUploadImage() bool {
+	for _, ns := range notifiers {
+		if ns.notifier.NeedsImage() {
 			return true
 		}
 	}
diff --git a/pkg/services/alerting/notifier.go b/pkg/services/alerting/notifier.go
index cbad5cbfdcf..4f69514977a 100644
--- a/pkg/services/alerting/notifier.go
+++ b/pkg/services/alerting/notifier.go
@@ -1,7 +1,6 @@
 package alerting
 
 import (
-	"context"
 	"errors"
 	"fmt"
 	"time"
@@ -41,61 +40,81 @@ type notificationService struct {
 }
 
 func (n *notificationService) SendIfNeeded(context *EvalContext) error {
-	notifiers, err := n.getNeededNotifiers(context.Rule.OrgId, context.Rule.Notifications, context)
+	notifierStates, err := n.getNeededNotifiers(context.Rule.OrgId, context.Rule.Notifications, context)
 	if err != nil {
 		return err
 	}
 
-	if len(notifiers) == 0 {
+	if len(notifierStates) == 0 {
 		return nil
 	}
 
-	if notifiers.ShouldUploadImage() {
+	if notifierStates.ShouldUploadImage() {
 		if err = n.uploadImage(context); err != nil {
 			n.log.Error("Failed to upload alert panel image.", "error", err)
 		}
 	}
 
-	return n.sendNotifications(context, notifiers)
+	return n.sendNotifications(context, notifierStates)
 }
 
-func (n *notificationService) sendNotifications(evalContext *EvalContext, notifiers []Notifier) error {
-	for _, notifier := range notifiers {
-		not := notifier
+func (n *notificationService) sendAndMarkAsComplete(evalContext *EvalContext, notifierState *NotifierState) error {
+	not := notifierState.notifier
+	n.log.Debug("Sending notification", "type", not.GetType(), "id", not.GetNotifierId(), "isDefault", not.GetIsDefault())
+	metrics.M_Alerting_Notification_Sent.WithLabelValues(not.GetType()).Inc()
 
-		err := bus.InTransaction(evalContext.Ctx, func(ctx context.Context) error {
-			n.log.Debug("trying to send notification", "id", not.GetNotifierId())
+	err := not.Notify(evalContext)
 
-			// Verify that we can send the notification again
-			// but this time within the same transaction.
-			if !evalContext.IsTestRun && !not.ShouldNotify(ctx, evalContext) {
-				return nil
-			}
+	if err != nil {
+		n.log.Error("failed to send notification", "id", not.GetNotifierId())
+	} else {
+		notifierState.state.SentAt = time.Now().UTC().Unix()
+	}
 
-			n.log.Debug("Sending notification", "type", not.GetType(), "id", not.GetNotifierId(), "isDefault", not.GetIsDefault())
-			metrics.M_Alerting_Notification_Sent.WithLabelValues(not.GetType()).Inc()
+	if evalContext.IsTestRun {
+		return nil
+	}
 
-			//send notification
-			success := not.Notify(evalContext) == nil
+	cmd := &m.SetAlertNotificationStateToCompleteCommand{
+		State: notifierState.state,
+	}
 
-			if evalContext.IsTestRun {
-				return nil
-			}
+	if err = bus.DispatchCtx(evalContext.Ctx, cmd); err != nil {
+		if err == m.ErrAlertNotificationStateVersionConflict {
+			n.log.Error("notification state out of sync", "id", not.GetNotifierId())
+			return nil
+		}
 
-			//write result to db.
-			cmd := &m.RecordNotificationJournalCommand{
-				OrgId:      evalContext.Rule.OrgId,
-				AlertId:    evalContext.Rule.Id,
-				NotifierId: not.GetNotifierId(),
-				SentAt:     time.Now().Unix(),
-				Success:    success,
-			}
+		return err
+	}
+
+	return nil
+}
 
-			return bus.DispatchCtx(ctx, cmd)
-		})
+func (n *notificationService) sendNotification(evalContext *EvalContext, notifierState *NotifierState) error {
+	if !evalContext.IsTestRun {
+		setPendingCmd := &m.SetAlertNotificationStateToPendingCommand{
+			State: notifierState.state,
+		}
 
+		err := bus.DispatchCtx(evalContext.Ctx, setPendingCmd)
+		if err == m.ErrAlertNotificationStateVersionConflict {
+			return nil
+		}
+
+		if err != nil {
+			return err
+		}
+	}
+
+	return n.sendAndMarkAsComplete(evalContext, notifierState)
+}
+
+func (n *notificationService) sendNotifications(evalContext *EvalContext, notifierStates NotifierStateSlice) error {
+	for _, notifierState := range notifierStates {
+		err := n.sendNotification(evalContext, notifierState)
 		if err != nil {
-			n.log.Error("failed to send notification", "id", not.GetNotifierId())
+			n.log.Error("failed to send notification", "id", notifierState.notifier.GetNotifierId())
 		}
 	}
 
@@ -142,22 +161,38 @@ func (n *notificationService) uploadImage(context *EvalContext) (err error) {
 	return nil
 }
 
-func (n *notificationService) getNeededNotifiers(orgId int64, notificationIds []int64, evalContext *EvalContext) (NotifierSlice, error) {
+func (n *notificationService) getNeededNotifiers(orgId int64, notificationIds []int64, evalContext *EvalContext) (NotifierStateSlice, error) {
 	query := &m.GetAlertNotificationsToSendQuery{OrgId: orgId, Ids: notificationIds}
 
 	if err := bus.Dispatch(query); err != nil {
 		return nil, err
 	}
 
-	var result []Notifier
+	var result NotifierStateSlice
 	for _, notification := range query.Result {
 		not, err := n.createNotifierFor(notification)
 		if err != nil {
-			return nil, err
+			n.log.Error("Could not create notifier", "notifier", notification.Id)
+			continue
+		}
+
+		query := &m.GetNotificationStateQuery{
+			NotifierId: notification.Id,
+			AlertId:    evalContext.Rule.Id,
+			OrgId:      evalContext.Rule.OrgId,
+		}
+
+		err = bus.DispatchCtx(evalContext.Ctx, query)
+		if err != nil {
+			n.log.Error("Could not get notification state.", "notifier", notification.Id)
+			continue
 		}
 
-		if not.ShouldNotify(evalContext.Ctx, evalContext) {
-			result = append(result, not)
+		if not.ShouldNotify(evalContext.Ctx, evalContext, query.Result) {
+			result = append(result, &NotifierState{
+				notifier: not,
+				state:    query.Result,
+			})
 		}
 	}
 
diff --git a/pkg/services/alerting/notifiers/alertmanager.go b/pkg/services/alerting/notifiers/alertmanager.go
index 9826dd1dffb..2caa4d5ab58 100644
--- a/pkg/services/alerting/notifiers/alertmanager.go
+++ b/pkg/services/alerting/notifiers/alertmanager.go
@@ -46,7 +46,7 @@ type AlertmanagerNotifier struct {
 	log log.Logger
 }
 
-func (this *AlertmanagerNotifier) ShouldNotify(ctx context.Context, evalContext *alerting.EvalContext) bool {
+func (this *AlertmanagerNotifier) ShouldNotify(ctx context.Context, evalContext *alerting.EvalContext, notificationState *m.AlertNotificationState) bool {
 	this.log.Debug("Should notify", "ruleId", evalContext.Rule.Id, "state", evalContext.Rule.State, "previousState", evalContext.PrevAlertState)
 
 	// Do not notify when we become OK for the first time.
diff --git a/pkg/services/alerting/notifiers/base.go b/pkg/services/alerting/notifiers/base.go
index d8f9aadffc5..e1fc2969154 100644
--- a/pkg/services/alerting/notifiers/base.go
+++ b/pkg/services/alerting/notifiers/base.go
@@ -4,7 +4,6 @@ import (
 	"context"
 	"time"
 
-	"github.com/grafana/grafana/pkg/bus"
 	"github.com/grafana/grafana/pkg/log"
 	"github.com/grafana/grafana/pkg/models"
 
@@ -46,22 +45,14 @@ func NewNotifierBase(model *models.AlertNotification) NotifierBase {
 	}
 }
 
-func defaultShouldNotify(context *alerting.EvalContext, sendReminder bool, frequency time.Duration, journals []models.AlertNotificationJournal) bool {
+func defaultShouldNotify(context *alerting.EvalContext, sendReminder bool, frequency time.Duration, notificationState *models.AlertNotificationState) bool {
 	// Only notify on state change.
 	if context.PrevAlertState == context.Rule.State && !sendReminder {
 		return false
 	}
 
-	// get last successfully sent notification
-	lastNotify := time.Time{}
-	for _, j := range journals {
-		if j.Success {
-			lastNotify = time.Unix(j.SentAt, 0)
-			break
-		}
-	}
-
 	// Do not notify if interval has not elapsed
+	lastNotify := time.Unix(notificationState.SentAt, 0)
 	if sendReminder && !lastNotify.IsZero() && lastNotify.Add(frequency).After(time.Now()) {
 		return false
 	}
@@ -80,20 +71,8 @@ func defaultShouldNotify(context *alerting.EvalContext, sendReminder bool, frequ
 }
 
 // ShouldNotify checks this evaluation should send an alert notification
-func (n *NotifierBase) ShouldNotify(ctx context.Context, c *alerting.EvalContext) bool {
-	cmd := &models.GetLatestNotificationQuery{
-		OrgId:      c.Rule.OrgId,
-		AlertId:    c.Rule.Id,
-		NotifierId: n.Id,
-	}
-
-	err := bus.DispatchCtx(ctx, cmd)
-	if err != nil {
-		n.log.Error("Could not determine last time alert notifier fired", "Alert name", c.Rule.Name, "Error", err)
-		return false
-	}
-
-	return defaultShouldNotify(c, n.SendReminder, n.Frequency, cmd.Result)
+func (n *NotifierBase) ShouldNotify(ctx context.Context, c *alerting.EvalContext, notiferState *models.AlertNotificationState) bool {
+	return defaultShouldNotify(c, n.SendReminder, n.Frequency, notiferState)
 }
 
 func (n *NotifierBase) GetType() string {
diff --git a/pkg/services/alerting/notifiers/base_test.go b/pkg/services/alerting/notifiers/base_test.go
index 9ea4b82fd54..50cfbef7387 100644
--- a/pkg/services/alerting/notifiers/base_test.go
+++ b/pkg/services/alerting/notifiers/base_test.go
@@ -2,12 +2,9 @@ package notifiers
 
 import (
 	"context"
-	"errors"
 	"testing"
 	"time"
 
-	"github.com/grafana/grafana/pkg/bus"
-
 	"github.com/grafana/grafana/pkg/components/simplejson"
 	m "github.com/grafana/grafana/pkg/models"
 	"github.com/grafana/grafana/pkg/services/alerting"
@@ -23,7 +20,7 @@ func TestShouldSendAlertNotification(t *testing.T) {
 		newState     m.AlertStateType
 		sendReminder bool
 		frequency    time.Duration
-		journals     []m.AlertNotificationJournal
+		journals     *m.AlertNotificationState
 
 		expect bool
 	}{
@@ -32,7 +29,7 @@ func TestShouldSendAlertNotification(t *testing.T) {
 			newState:     m.AlertStatePending,
 			prevState:    m.AlertStateOK,
 			sendReminder: false,
-			journals:     []m.AlertNotificationJournal{},
+			journals:     &m.AlertNotificationState{},
 
 			expect: false,
 		},
@@ -41,7 +38,7 @@ func TestShouldSendAlertNotification(t *testing.T) {
 			newState:     m.AlertStateOK,
 			prevState:    m.AlertStateAlerting,
 			sendReminder: false,
-			journals:     []m.AlertNotificationJournal{},
+			journals:     &m.AlertNotificationState{},
 
 			expect: true,
 		},
@@ -50,7 +47,7 @@ func TestShouldSendAlertNotification(t *testing.T) {
 			newState:     m.AlertStateOK,
 			prevState:    m.AlertStatePending,
 			sendReminder: false,
-			journals:     []m.AlertNotificationJournal{},
+			journals:     &m.AlertNotificationState{},
 
 			expect: false,
 		},
@@ -59,7 +56,7 @@ func TestShouldSendAlertNotification(t *testing.T) {
 			newState:     m.AlertStateOK,
 			prevState:    m.AlertStateOK,
 			sendReminder: false,
-			journals:     []m.AlertNotificationJournal{},
+			journals:     &m.AlertNotificationState{},
 
 			expect: false,
 		},
@@ -68,7 +65,7 @@ func TestShouldSendAlertNotification(t *testing.T) {
 			newState:     m.AlertStateOK,
 			prevState:    m.AlertStateAlerting,
 			sendReminder: true,
-			journals:     []m.AlertNotificationJournal{},
+			journals:     &m.AlertNotificationState{},
 
 			expect: true,
 		},
@@ -77,7 +74,7 @@ func TestShouldSendAlertNotification(t *testing.T) {
 			newState:     m.AlertStateOK,
 			prevState:    m.AlertStateOK,
 			sendReminder: true,
-			journals:     []m.AlertNotificationJournal{},
+			journals:     &m.AlertNotificationState{},
 
 			expect: false,
 		},
@@ -87,7 +84,7 @@ func TestShouldSendAlertNotification(t *testing.T) {
 			prevState:    m.AlertStateAlerting,
 			frequency:    time.Minute * 10,
 			sendReminder: true,
-			journals:     []m.AlertNotificationJournal{},
+			journals:     &m.AlertNotificationState{},
 
 			expect: true,
 		},
@@ -97,9 +94,7 @@ func TestShouldSendAlertNotification(t *testing.T) {
 			prevState:    m.AlertStateAlerting,
 			frequency:    time.Minute * 10,
 			sendReminder: true,
-			journals: []m.AlertNotificationJournal{
-				{SentAt: tnow.Add(-time.Minute).Unix(), Success: true},
-			},
+			journals:     &m.AlertNotificationState{SentAt: tnow.Add(-time.Minute).Unix()},
 
 			expect: false,
 		},
@@ -110,10 +105,7 @@ func TestShouldSendAlertNotification(t *testing.T) {
 			frequency:    time.Minute * 10,
 			sendReminder: true,
 			expect:       true,
-			journals: []m.AlertNotificationJournal{
-				{SentAt: tnow.Add(-time.Minute).Unix(), Success: false}, // recent failed notification
-				{SentAt: tnow.Add(-time.Hour).Unix(), Success: true},    // old successful notification
-			},
+			journals:     &m.AlertNotificationState{SentAt: tnow.Add(-time.Hour).Unix()},
 		},
 	}
 
@@ -129,30 +121,6 @@ func TestShouldSendAlertNotification(t *testing.T) {
 	}
 }
 
-func TestShouldNotifyWhenNoJournalingIsFound(t *testing.T) {
-	Convey("base notifier", t, func() {
-		bus.ClearBusHandlers()
-
-		notifier := NewNotifierBase(&m.AlertNotification{
-			Id:       1,
-			Name:     "name",
-			Type:     "email",
-			Settings: simplejson.New(),
-		})
-		evalContext := alerting.NewEvalContext(context.TODO(), &alerting.Rule{})
-
-		Convey("should not notify query returns error", func() {
-			bus.AddHandlerCtx("", func(ctx context.Context, q *m.GetLatestNotificationQuery) error {
-				return errors.New("some kind of error unknown error")
-			})
-
-			if notifier.ShouldNotify(context.Background(), evalContext) {
-				t.Errorf("should not send notifications when query returns error")
-			}
-		})
-	})
-}
-
 func TestBaseNotifier(t *testing.T) {
 	Convey("default constructor for notifiers", t, func() {
 		bJson := simplejson.New()
diff --git a/pkg/services/alerting/result_handler.go b/pkg/services/alerting/result_handler.go
index 893cca948f9..e2c70de0e28 100644
--- a/pkg/services/alerting/result_handler.go
+++ b/pkg/services/alerting/result_handler.go
@@ -88,19 +88,6 @@ func (handler *DefaultResultHandler) Handle(evalContext *EvalContext) error {
 		}
 	}
 
-	if evalContext.Rule.State == m.AlertStateOK && evalContext.PrevAlertState != m.AlertStateOK {
-		for _, notifierId := range evalContext.Rule.Notifications {
-			cmd := &m.CleanNotificationJournalCommand{
-				AlertId:    evalContext.Rule.Id,
-				NotifierId: notifierId,
-				OrgId:      evalContext.Rule.OrgId,
-			}
-			if err := bus.DispatchCtx(evalContext.Ctx, cmd); err != nil {
-				handler.log.Error("Failed to clean up old notification records", "notifier", notifierId, "alert", evalContext.Rule.Id, "Error", err)
-			}
-		}
-	}
-
 	handler.notifier.SendIfNeeded(evalContext)
 	return nil
 }
diff --git a/pkg/services/alerting/test_notification.go b/pkg/services/alerting/test_notification.go
index 8421360b5ed..228ec90001d 100644
--- a/pkg/services/alerting/test_notification.go
+++ b/pkg/services/alerting/test_notification.go
@@ -39,7 +39,7 @@ func handleNotificationTestCommand(cmd *NotificationTestCommand) error {
 		return err
 	}
 
-	return notifier.sendNotifications(createTestEvalContext(cmd), []Notifier{notifiers})
+	return notifier.sendNotifications(createTestEvalContext(cmd), NotifierStateSlice{{notifier: notifiers}})
 }
 
 func createTestEvalContext(cmd *NotificationTestCommand) *EvalContext {
diff --git a/pkg/services/sqlstore/alert_notification.go b/pkg/services/sqlstore/alert_notification.go
index df247e6891d..f93ef7b8164 100644
--- a/pkg/services/sqlstore/alert_notification.go
+++ b/pkg/services/sqlstore/alert_notification.go
@@ -3,6 +3,7 @@ package sqlstore
 import (
 	"bytes"
 	"context"
+	"errors"
 	"fmt"
 	"strings"
 	"time"
@@ -18,9 +19,10 @@ func init() {
 	bus.AddHandler("sql", DeleteAlertNotification)
 	bus.AddHandler("sql", GetAlertNotificationsToSend)
 	bus.AddHandler("sql", GetAllAlertNotifications)
-	bus.AddHandlerCtx("sql", RecordNotificationJournal)
-	bus.AddHandlerCtx("sql", GetLatestNotification)
-	bus.AddHandlerCtx("sql", CleanNotificationJournal)
+	bus.AddHandlerCtx("sql", InsertAlertNotificationState)
+	bus.AddHandlerCtx("sql", GetAlertNotificationState)
+	bus.AddHandlerCtx("sql", SetAlertNotificationStateToCompleteCommand)
+	bus.AddHandlerCtx("sql", SetAlertNotificationStateToPendingCommand)
 }
 
 func DeleteAlertNotification(cmd *m.DeleteAlertNotificationCommand) error {
@@ -229,44 +231,139 @@ func UpdateAlertNotification(cmd *m.UpdateAlertNotificationCommand) error {
 	})
 }
 
-func RecordNotificationJournal(ctx context.Context, cmd *m.RecordNotificationJournalCommand) error {
+func InsertAlertNotificationState(ctx context.Context, cmd *m.InsertAlertNotificationCommand) error {
 	return withDbSession(ctx, func(sess *DBSession) error {
-		journalEntry := &m.AlertNotificationJournal{
+		notificationState := &m.AlertNotificationState{
 			OrgId:      cmd.OrgId,
 			AlertId:    cmd.AlertId,
 			NotifierId: cmd.NotifierId,
 			SentAt:     cmd.SentAt,
-			Success:    cmd.Success,
+			State:      cmd.State,
 		}
 
-		_, err := sess.Insert(journalEntry)
-		return err
+		if _, err := sess.Insert(notificationState); err != nil {
+			if dialect.IsUniqueConstraintViolation(err) {
+				return m.ErrAlertNotificationStateAlreadyExist
+			}
+
+			return err
+		}
+
+		return nil
 	})
 }
 
-func GetLatestNotification(ctx context.Context, cmd *m.GetLatestNotificationQuery) error {
+func SetAlertNotificationStateToCompleteCommand(ctx context.Context, cmd *m.SetAlertNotificationStateToCompleteCommand) error {
 	return withDbSession(ctx, func(sess *DBSession) error {
-		nj := []m.AlertNotificationJournal{}
+		version := cmd.State.Version
+		var current m.AlertNotificationState
+		sess.ID(cmd.State.Id).Get(&current)
 
-		err := sess.Desc("alert_notification_journal.sent_at").
-			Where("alert_notification_journal.org_id = ?", cmd.OrgId).
-			Where("alert_notification_journal.alert_id = ?", cmd.AlertId).
-			Where("alert_notification_journal.notifier_id = ?", cmd.NotifierId).
-			Find(&nj)
+		cmd.State.State = m.AlertNotificationStateCompleted
+		cmd.State.Version++
+
+		sql := `UPDATE alert_notification_state SET
+			state = ?,
+			version = ?,
+			sent_at = ?
+		WHERE
+			id = ?`
+
+		_, err := sess.Exec(sql, cmd.State.State, cmd.State.Version, cmd.State.SentAt, cmd.State.Id)
 
 		if err != nil {
 			return err
 		}
 
-		cmd.Result = nj
+		if current.Version != version {
+			return m.ErrAlertNotificationStateVersionConflict
+		}
+
 		return nil
 	})
 }
 
-func CleanNotificationJournal(ctx context.Context, cmd *m.CleanNotificationJournalCommand) error {
-	return inTransactionCtx(ctx, func(sess *DBSession) error {
-		sql := "DELETE FROM alert_notification_journal WHERE alert_notification_journal.org_id = ? AND alert_notification_journal.alert_id = ? AND alert_notification_journal.notifier_id = ?"
-		_, err := sess.Exec(sql, cmd.OrgId, cmd.AlertId, cmd.NotifierId)
-		return err
+func SetAlertNotificationStateToPendingCommand(ctx context.Context, cmd *m.SetAlertNotificationStateToPendingCommand) error {
+	return withDbSession(ctx, func(sess *DBSession) error {
+		currentVersion := cmd.State.Version
+		cmd.State.State = m.AlertNotificationStatePending
+		cmd.State.Version++
+
+		sql := `UPDATE alert_notification_state SET
+			state = ?,
+			version = ?
+		WHERE
+			id = ? AND
+			version = ?`
+
+		res, err := sess.Exec(sql, cmd.State.State, cmd.State.Version, cmd.State.Id, currentVersion)
+
+		if err != nil {
+			return err
+		}
+
+		affected, _ := res.RowsAffected()
+
+		if affected == 0 {
+			return m.ErrAlertNotificationStateVersionConflict
+		}
+
+		return nil
+	})
+}
+
+func GetAlertNotificationState(ctx context.Context, cmd *m.GetNotificationStateQuery) error {
+	return withDbSession(ctx, func(sess *DBSession) error {
+		nj := &m.AlertNotificationState{}
+
+		exist, err := getAlertNotificationState(sess, cmd, nj)
+
+		// if exists, return it, otherwise create it with default values
+		if err != nil {
+			return err
+		}
+
+		if exist {
+			cmd.Result = nj
+			return nil
+		}
+
+		notificationState := &m.AlertNotificationState{
+			OrgId:      cmd.OrgId,
+			AlertId:    cmd.AlertId,
+			NotifierId: cmd.NotifierId,
+			State:      "unknown",
+		}
+
+		if _, err := sess.Insert(notificationState); err != nil {
+			if dialect.IsUniqueConstraintViolation(err) {
+				exist, err = getAlertNotificationState(sess, cmd, nj)
+
+				if err != nil {
+					return err
+				}
+
+				if !exist {
+					return errors.New("Should not happen")
+				}
+
+				cmd.Result = nj
+				return nil
+			}
+
+			return err
+		}
+
+		cmd.Result = notificationState
+		return nil
 	})
 }
+
+func getAlertNotificationState(sess *DBSession, cmd *m.GetNotificationStateQuery, nj *m.AlertNotificationState) (bool, error) {
+	exist, err := sess.Desc("alert_notification_state.sent_at").
+		Where("alert_notification_state.org_id = ?", cmd.OrgId).
+		Where("alert_notification_state.alert_id = ?", cmd.AlertId).
+		Where("alert_notification_state.notifier_id = ?", cmd.NotifierId).
+		Get(nj)
+	return exist, err
+}
diff --git a/pkg/services/sqlstore/alert_notification_test.go b/pkg/services/sqlstore/alert_notification_test.go
index 1e3df45b5cf..daed5a8cd7f 100644
--- a/pkg/services/sqlstore/alert_notification_test.go
+++ b/pkg/services/sqlstore/alert_notification_test.go
@@ -6,7 +6,7 @@ import (
 	"time"
 
 	"github.com/grafana/grafana/pkg/components/simplejson"
-	m "github.com/grafana/grafana/pkg/models"
+	"github.com/grafana/grafana/pkg/models"
 	. "github.com/smartystreets/goconvey/convey"
 )
 
@@ -14,58 +14,89 @@ func TestAlertNotificationSQLAccess(t *testing.T) {
 	Convey("Testing Alert notification sql access", t, func() {
 		InitTestDB(t)
 
-		Convey("Alert notification journal", func() {
-			var alertId int64 = 7
-			var orgId int64 = 5
-			var notifierId int64 = 10
+		Convey("Alert notification state", func() {
+			var alertID int64 = 7
+			var orgID int64 = 5
+			var notifierID int64 = 10
 
-			Convey("Getting last journal should raise error if no one exists", func() {
-				query := &m.GetLatestNotificationQuery{AlertId: alertId, OrgId: orgId, NotifierId: notifierId}
-				GetLatestNotification(context.Background(), query)
-				So(len(query.Result), ShouldEqual, 0)
-
-				// recording an journal entry in another org to make sure org filter works as expected.
-				journalInOtherOrg := &m.RecordNotificationJournalCommand{AlertId: alertId, NotifierId: notifierId, OrgId: 10, Success: true, SentAt: 1}
-				err := RecordNotificationJournal(context.Background(), journalInOtherOrg)
+			Convey("Get no existing state should create a new state", func() {
+				query := &models.GetNotificationStateQuery{AlertId: alertID, OrgId: orgID, NotifierId: notifierID}
+				err := GetAlertNotificationState(context.Background(), query)
 				So(err, ShouldBeNil)
+				So(query.Result, ShouldNotBeNil)
+				So(query.Result.State, ShouldEqual, "unknown")
+				So(query.Result.Version, ShouldEqual, 0)
 
-				Convey("should be able to record two journaling events", func() {
-					createCmd := &m.RecordNotificationJournalCommand{AlertId: alertId, NotifierId: notifierId, OrgId: orgId, Success: true, SentAt: 1}
-
-					err := RecordNotificationJournal(context.Background(), createCmd)
+				Convey("Get existing state should not create a new state", func() {
+					query2 := &models.GetNotificationStateQuery{AlertId: alertID, OrgId: orgID, NotifierId: notifierID}
+					err := GetAlertNotificationState(context.Background(), query2)
 					So(err, ShouldBeNil)
+					So(query2.Result, ShouldNotBeNil)
+					So(query2.Result.Id, ShouldEqual, query.Result.Id)
+				})
 
-					createCmd.SentAt += 1000 //increase epoch
+				Convey("Update existing state to pending with correct version should update database", func() {
+					s := *query.Result
+					cmd := models.SetAlertNotificationStateToPendingCommand{
+						State: &s,
+					}
+					err := SetAlertNotificationStateToPendingCommand(context.Background(), &cmd)
+					So(err, ShouldBeNil)
+					So(cmd.State.Version, ShouldEqual, 1)
+					So(cmd.State.State, ShouldEqual, models.AlertNotificationStatePending)
 
-					err = RecordNotificationJournal(context.Background(), createCmd)
+					query2 := &models.GetNotificationStateQuery{AlertId: alertID, OrgId: orgID, NotifierId: notifierID}
+					err = GetAlertNotificationState(context.Background(), query2)
 					So(err, ShouldBeNil)
+					So(query2.Result.Version, ShouldEqual, 1)
+					So(query2.Result.State, ShouldEqual, models.AlertNotificationStatePending)
+
+					Convey("Update existing state to completed should update database", func() {
+						s := *cmd.State
+						cmd := models.SetAlertNotificationStateToCompleteCommand{
+							State: &s,
+						}
+						err := SetAlertNotificationStateToCompleteCommand(context.Background(), &cmd)
+						So(err, ShouldBeNil)
 
-					Convey("get last journaling event", func() {
-						err := GetLatestNotification(context.Background(), query)
+						query3 := &models.GetNotificationStateQuery{AlertId: alertID, OrgId: orgID, NotifierId: notifierID}
+						err = GetAlertNotificationState(context.Background(), query3)
 						So(err, ShouldBeNil)
-						So(len(query.Result), ShouldEqual, 2)
-						last := query.Result[0]
-						So(last.SentAt, ShouldEqual, 1001)
-
-						Convey("be able to clear all journaling for an notifier", func() {
-							cmd := &m.CleanNotificationJournalCommand{AlertId: alertId, NotifierId: notifierId, OrgId: orgId}
-							err := CleanNotificationJournal(context.Background(), cmd)
-							So(err, ShouldBeNil)
-
-							Convey("querying for last journaling should return no journal entries", func() {
-								query := &m.GetLatestNotificationQuery{AlertId: alertId, OrgId: orgId, NotifierId: notifierId}
-								err := GetLatestNotification(context.Background(), query)
-								So(err, ShouldBeNil)
-								So(len(query.Result), ShouldEqual, 0)
-							})
-						})
+						So(query3.Result.Version, ShouldEqual, 2)
+						So(query3.Result.State, ShouldEqual, models.AlertNotificationStateCompleted)
 					})
+
+					Convey("Update existing state to completed should update database, but return version mismatch", func() {
+						cmd.State.Version = 1000
+						s := *cmd.State
+						cmd := models.SetAlertNotificationStateToCompleteCommand{
+							State: &s,
+						}
+						err := SetAlertNotificationStateToCompleteCommand(context.Background(), &cmd)
+						So(err, ShouldEqual, models.ErrAlertNotificationStateVersionConflict)
+
+						query3 := &models.GetNotificationStateQuery{AlertId: alertID, OrgId: orgID, NotifierId: notifierID}
+						err = GetAlertNotificationState(context.Background(), query3)
+						So(err, ShouldBeNil)
+						So(query3.Result.Version, ShouldEqual, 1001)
+						So(query3.Result.State, ShouldEqual, models.AlertNotificationStateCompleted)
+					})
+				})
+
+				Convey("Update existing state to pending with incorrect version should return version mismatch error", func() {
+					s := *query.Result
+					s.Version = 1000
+					cmd := models.SetAlertNotificationStateToPendingCommand{
+						State: &s,
+					}
+					err := SetAlertNotificationStateToPendingCommand(context.Background(), &cmd)
+					So(err, ShouldEqual, models.ErrAlertNotificationStateVersionConflict)
 				})
 			})
 		})
 
 		Convey("Alert notifications should be empty", func() {
-			cmd := &m.GetAlertNotificationsQuery{
+			cmd := &models.GetAlertNotificationsQuery{
 				OrgId: 2,
 				Name:  "email",
 			}
@@ -76,7 +107,7 @@ func TestAlertNotificationSQLAccess(t *testing.T) {
 		})
 
 		Convey("Cannot save alert notifier with send reminder = true", func() {
-			cmd := &m.CreateAlertNotificationCommand{
+			cmd := &models.CreateAlertNotificationCommand{
 				Name:         "ops",
 				Type:         "email",
 				OrgId:        1,
@@ -86,7 +117,7 @@ func TestAlertNotificationSQLAccess(t *testing.T) {
 
 			Convey("and missing frequency", func() {
 				err := CreateAlertNotificationCommand(cmd)
-				So(err, ShouldEqual, m.ErrNotificationFrequencyNotFound)
+				So(err, ShouldEqual, models.ErrNotificationFrequencyNotFound)
 			})
 
 			Convey("invalid frequency", func() {
@@ -98,7 +129,7 @@ func TestAlertNotificationSQLAccess(t *testing.T) {
 		})
 
 		Convey("Cannot update alert notifier with send reminder = false", func() {
-			cmd := &m.CreateAlertNotificationCommand{
+			cmd := &models.CreateAlertNotificationCommand{
 				Name:         "ops update",
 				Type:         "email",
 				OrgId:        1,
@@ -109,14 +140,14 @@ func TestAlertNotificationSQLAccess(t *testing.T) {
 			err := CreateAlertNotificationCommand(cmd)
 			So(err, ShouldBeNil)
 
-			updateCmd := &m.UpdateAlertNotificationCommand{
+			updateCmd := &models.UpdateAlertNotificationCommand{
 				Id:           cmd.Result.Id,
 				SendReminder: true,
 			}
 
 			Convey("and missing frequency", func() {
 				err := UpdateAlertNotification(updateCmd)
-				So(err, ShouldEqual, m.ErrNotificationFrequencyNotFound)
+				So(err, ShouldEqual, models.ErrNotificationFrequencyNotFound)
 			})
 
 			Convey("invalid frequency", func() {
@@ -129,7 +160,7 @@ func TestAlertNotificationSQLAccess(t *testing.T) {
 		})
 
 		Convey("Can save Alert Notification", func() {
-			cmd := &m.CreateAlertNotificationCommand{
+			cmd := &models.CreateAlertNotificationCommand{
 				Name:         "ops",
 				Type:         "email",
 				OrgId:        1,
@@ -151,7 +182,7 @@ func TestAlertNotificationSQLAccess(t *testing.T) {
 			})
 
 			Convey("Can update alert notification", func() {
-				newCmd := &m.UpdateAlertNotificationCommand{
+				newCmd := &models.UpdateAlertNotificationCommand{
 					Name:         "NewName",
 					Type:         "webhook",
 					OrgId:        cmd.Result.OrgId,
@@ -167,7 +198,7 @@ func TestAlertNotificationSQLAccess(t *testing.T) {
 			})
 
 			Convey("Can update alert notification to disable sending of reminders", func() {
-				newCmd := &m.UpdateAlertNotificationCommand{
+				newCmd := &models.UpdateAlertNotificationCommand{
 					Name:         "NewName",
 					Type:         "webhook",
 					OrgId:        cmd.Result.OrgId,
@@ -182,12 +213,12 @@ func TestAlertNotificationSQLAccess(t *testing.T) {
 		})
 
 		Convey("Can search using an array of ids", func() {
-			cmd1 := m.CreateAlertNotificationCommand{Name: "nagios", Type: "webhook", OrgId: 1, SendReminder: true, Frequency: "10s", Settings: simplejson.New()}
-			cmd2 := m.CreateAlertNotificationCommand{Name: "slack", Type: "webhook", OrgId: 1, SendReminder: true, Frequency: "10s", Settings: simplejson.New()}
-			cmd3 := m.CreateAlertNotificationCommand{Name: "ops2", Type: "email", OrgId: 1, SendReminder: true, Frequency: "10s", Settings: simplejson.New()}
-			cmd4 := m.CreateAlertNotificationCommand{IsDefault: true, Name: "default", Type: "email", OrgId: 1, SendReminder: true, Frequency: "10s", Settings: simplejson.New()}
+			cmd1 := models.CreateAlertNotificationCommand{Name: "nagios", Type: "webhook", OrgId: 1, SendReminder: true, Frequency: "10s", Settings: simplejson.New()}
+			cmd2 := models.CreateAlertNotificationCommand{Name: "slack", Type: "webhook", OrgId: 1, SendReminder: true, Frequency: "10s", Settings: simplejson.New()}
+			cmd3 := models.CreateAlertNotificationCommand{Name: "ops2", Type: "email", OrgId: 1, SendReminder: true, Frequency: "10s", Settings: simplejson.New()}
+			cmd4 := models.CreateAlertNotificationCommand{IsDefault: true, Name: "default", Type: "email", OrgId: 1, SendReminder: true, Frequency: "10s", Settings: simplejson.New()}
 
-			otherOrg := m.CreateAlertNotificationCommand{Name: "default", Type: "email", OrgId: 2, SendReminder: true, Frequency: "10s", Settings: simplejson.New()}
+			otherOrg := models.CreateAlertNotificationCommand{Name: "default", Type: "email", OrgId: 2, SendReminder: true, Frequency: "10s", Settings: simplejson.New()}
 
 			So(CreateAlertNotificationCommand(&cmd1), ShouldBeNil)
 			So(CreateAlertNotificationCommand(&cmd2), ShouldBeNil)
@@ -196,7 +227,7 @@ func TestAlertNotificationSQLAccess(t *testing.T) {
 			So(CreateAlertNotificationCommand(&otherOrg), ShouldBeNil)
 
 			Convey("search", func() {
-				query := &m.GetAlertNotificationsToSendQuery{
+				query := &models.GetAlertNotificationsToSendQuery{
 					Ids:   []int64{cmd1.Result.Id, cmd2.Result.Id, 112341231},
 					OrgId: 1,
 				}
@@ -207,7 +238,7 @@ func TestAlertNotificationSQLAccess(t *testing.T) {
 			})
 
 			Convey("all", func() {
-				query := &m.GetAllAlertNotificationsQuery{
+				query := &models.GetAllAlertNotificationsQuery{
 					OrgId: 1,
 				}
 
diff --git a/pkg/services/sqlstore/migrations/alert_mig.go b/pkg/services/sqlstore/migrations/alert_mig.go
index e27e64c6124..877dafcf1e1 100644
--- a/pkg/services/sqlstore/migrations/alert_mig.go
+++ b/pkg/services/sqlstore/migrations/alert_mig.go
@@ -107,4 +107,26 @@ func addAlertMigrations(mg *Migrator) {
 
 	mg.AddMigration("create notification_journal table v1", NewAddTableMigration(notification_journal))
 	mg.AddMigration("add index notification_journal org_id & alert_id & notifier_id", NewAddIndexMigration(notification_journal, notification_journal.Indices[0]))
+
+	mg.AddMigration("drop alert_notification_journal", NewDropTableMigration("alert_notification_journal"))
+
+	alert_notification_state := Table{
+		Name: "alert_notification_state",
+		Columns: []*Column{
+			{Name: "id", Type: DB_BigInt, IsPrimaryKey: true, IsAutoIncrement: true},
+			{Name: "org_id", Type: DB_BigInt, Nullable: false},
+			{Name: "alert_id", Type: DB_BigInt, Nullable: false},
+			{Name: "notifier_id", Type: DB_BigInt, Nullable: false},
+			{Name: "sent_at", Type: DB_BigInt, Nullable: false},
+			{Name: "state", Type: DB_NVarchar, Length: 50, Nullable: false},
+			{Name: "version", Type: DB_BigInt, Nullable: false},
+		},
+		Indices: []*Index{
+			{Cols: []string{"org_id", "alert_id", "notifier_id"}, Type: UniqueIndex},
+		},
+	}
+
+	mg.AddMigration("create alert_notification_state table v1", NewAddTableMigration(alert_notification_state))
+	mg.AddMigration("add index alert_notification_state org_id & alert_id & notifier_id",
+		NewAddIndexMigration(alert_notification_state, alert_notification_state.Indices[0]))
 }
diff --git a/pkg/services/sqlstore/migrator/dialect.go b/pkg/services/sqlstore/migrator/dialect.go
index 427d102b280..506a01c3ed8 100644
--- a/pkg/services/sqlstore/migrator/dialect.go
+++ b/pkg/services/sqlstore/migrator/dialect.go
@@ -44,6 +44,8 @@ type Dialect interface {
 
 	CleanDB() error
 	NoOpSql() string
+
+	IsUniqueConstraintViolation(err error) bool
 }
 
 func NewDialect(engine *xorm.Engine) Dialect {
diff --git a/pkg/services/sqlstore/migrator/mysql_dialect.go b/pkg/services/sqlstore/migrator/mysql_dialect.go
index 1ed16871c15..7daa4597430 100644
--- a/pkg/services/sqlstore/migrator/mysql_dialect.go
+++ b/pkg/services/sqlstore/migrator/mysql_dialect.go
@@ -5,6 +5,8 @@ import (
 	"strconv"
 	"strings"
 
+	"github.com/VividCortex/mysqlerr"
+	"github.com/go-sql-driver/mysql"
 	"github.com/go-xorm/xorm"
 )
 
@@ -125,3 +127,13 @@ func (db *Mysql) CleanDB() error {
 
 	return nil
 }
+
+func (db *Mysql) IsUniqueConstraintViolation(err error) bool {
+	if driverErr, ok := err.(*mysql.MySQLError); ok {
+		if driverErr.Number == mysqlerr.ER_DUP_ENTRY {
+			return true
+		}
+	}
+
+	return false
+}
diff --git a/pkg/services/sqlstore/migrator/postgres_dialect.go b/pkg/services/sqlstore/migrator/postgres_dialect.go
index eae9ad3ca3f..ab8812a1e26 100644
--- a/pkg/services/sqlstore/migrator/postgres_dialect.go
+++ b/pkg/services/sqlstore/migrator/postgres_dialect.go
@@ -6,6 +6,7 @@ import (
 	"strings"
 
 	"github.com/go-xorm/xorm"
+	"github.com/lib/pq"
 )
 
 type Postgres struct {
@@ -136,3 +137,13 @@ func (db *Postgres) CleanDB() error {
 
 	return nil
 }
+
+func (db *Postgres) IsUniqueConstraintViolation(err error) bool {
+	if driverErr, ok := err.(*pq.Error); ok {
+		if driverErr.Code == "23505" {
+			return true
+		}
+	}
+
+	return false
+}
diff --git a/pkg/services/sqlstore/migrator/sqlite_dialect.go b/pkg/services/sqlstore/migrator/sqlite_dialect.go
index 01082b95c88..446e3fcef12 100644
--- a/pkg/services/sqlstore/migrator/sqlite_dialect.go
+++ b/pkg/services/sqlstore/migrator/sqlite_dialect.go
@@ -4,6 +4,7 @@ import (
 	"fmt"
 
 	"github.com/go-xorm/xorm"
+	sqlite3 "github.com/mattn/go-sqlite3"
 )
 
 type Sqlite3 struct {
@@ -82,3 +83,13 @@ func (db *Sqlite3) DropIndexSql(tableName string, index *Index) string {
 func (db *Sqlite3) CleanDB() error {
 	return nil
 }
+
+func (db *Sqlite3) IsUniqueConstraintViolation(err error) bool {
+	if driverErr, ok := err.(sqlite3.Error); ok {
+		if driverErr.ExtendedCode == sqlite3.ErrConstraintUnique {
+			return true
+		}
+	}
+
+	return false
+}
diff --git a/vendor/github.com/VividCortex/mysqlerr/LICENSE b/vendor/github.com/VividCortex/mysqlerr/LICENSE
new file mode 100644
index 00000000000..92bb301a02f
--- /dev/null
+++ b/vendor/github.com/VividCortex/mysqlerr/LICENSE
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) 2017 VividCortex
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/vendor/github.com/VividCortex/mysqlerr/mysqlerr.go b/vendor/github.com/VividCortex/mysqlerr/mysqlerr.go
new file mode 100644
index 00000000000..ce62e7d5041
--- /dev/null
+++ b/vendor/github.com/VividCortex/mysqlerr/mysqlerr.go
@@ -0,0 +1,1080 @@
+package mysqlerr
+
+const (
+	ER_HASHCHK                                                                       = 1000
+	ER_NISAMCHK                                                                      = 1001
+	ER_NO                                                                            = 1002
+	ER_YES                                                                           = 1003
+	ER_CANT_CREATE_FILE                                                              = 1004
+	ER_CANT_CREATE_TABLE                                                             = 1005
+	ER_CANT_CREATE_DB                                                                = 1006
+	ER_DB_CREATE_EXISTS                                                              = 1007
+	ER_DB_DROP_EXISTS                                                                = 1008
+	ER_DB_DROP_DELETE                                                                = 1009
+	ER_DB_DROP_RMDIR                                                                 = 1010
+	ER_CANT_DELETE_FILE                                                              = 1011
+	ER_CANT_FIND_SYSTEM_REC                                                          = 1012
+	ER_CANT_GET_STAT                                                                 = 1013
+	ER_CANT_GET_WD                                                                   = 1014
+	ER_CANT_LOCK                                                                     = 1015
+	ER_CANT_OPEN_FILE                                                                = 1016
+	ER_FILE_NOT_FOUND                                                                = 1017
+	ER_CANT_READ_DIR                                                                 = 1018
+	ER_CANT_SET_WD                                                                   = 1019
+	ER_CHECKREAD                                                                     = 1020
+	ER_DISK_FULL                                                                     = 1021
+	ER_DUP_KEY                                                                       = 1022
+	ER_ERROR_ON_CLOSE                                                                = 1023
+	ER_ERROR_ON_READ                                                                 = 1024
+	ER_ERROR_ON_RENAME                                                               = 1025
+	ER_ERROR_ON_WRITE                                                                = 1026
+	ER_FILE_USED                                                                     = 1027
+	ER_FILSORT_ABORT                                                                 = 1028
+	ER_FORM_NOT_FOUND                                                                = 1029
+	ER_GET_ERRNO                                                                     = 1030
+	ER_ILLEGAL_HA                                                                    = 1031
+	ER_KEY_NOT_FOUND                                                                 = 1032
+	ER_NOT_FORM_FILE                                                                 = 1033
+	ER_NOT_KEYFILE                                                                   = 1034
+	ER_OLD_KEYFILE                                                                   = 1035
+	ER_OPEN_AS_READONLY                                                              = 1036
+	ER_OUTOFMEMORY                                                                   = 1037
+	ER_OUT_OF_SORTMEMORY                                                             = 1038
+	ER_UNEXPECTED_EOF                                                                = 1039
+	ER_CON_COUNT_ERROR                                                               = 1040
+	ER_OUT_OF_RESOURCES                                                              = 1041
+	ER_BAD_HOST_ERROR                                                                = 1042
+	ER_HANDSHAKE_ERROR                                                               = 1043
+	ER_DBACCESS_DENIED_ERROR                                                         = 1044
+	ER_ACCESS_DENIED_ERROR                                                           = 1045
+	ER_NO_DB_ERROR                                                                   = 1046
+	ER_UNKNOWN_COM_ERROR                                                             = 1047
+	ER_BAD_NULL_ERROR                                                                = 1048
+	ER_BAD_DB_ERROR                                                                  = 1049
+	ER_TABLE_EXISTS_ERROR                                                            = 1050
+	ER_BAD_TABLE_ERROR                                                               = 1051
+	ER_NON_UNIQ_ERROR                                                                = 1052
+	ER_SERVER_SHUTDOWN                                                               = 1053
+	ER_BAD_FIELD_ERROR                                                               = 1054
+	ER_WRONG_FIELD_WITH_GROUP                                                        = 1055
+	ER_WRONG_GROUP_FIELD                                                             = 1056
+	ER_WRONG_SUM_SELECT                                                              = 1057
+	ER_WRONG_VALUE_COUNT                                                             = 1058
+	ER_TOO_LONG_IDENT                                                                = 1059
+	ER_DUP_FIELDNAME                                                                 = 1060
+	ER_DUP_KEYNAME                                                                   = 1061
+	ER_DUP_ENTRY                                                                     = 1062
+	ER_WRONG_FIELD_SPEC                                                              = 1063
+	ER_PARSE_ERROR                                                                   = 1064
+	ER_EMPTY_QUERY                                                                   = 1065
+	ER_NONUNIQ_TABLE                                                                 = 1066
+	ER_INVALID_DEFAULT                                                               = 1067
+	ER_MULTIPLE_PRI_KEY                                                              = 1068
+	ER_TOO_MANY_KEYS                                                                 = 1069
+	ER_TOO_MANY_KEY_PARTS                                                            = 1070
+	ER_TOO_LONG_KEY                                                                  = 1071
+	ER_KEY_COLUMN_DOES_NOT_EXITS                                                     = 1072
+	ER_BLOB_USED_AS_KEY                                                              = 1073
+	ER_TOO_BIG_FIELDLENGTH                                                           = 1074
+	ER_WRONG_AUTO_KEY                                                                = 1075
+	ER_READY                                                                         = 1076
+	ER_NORMAL_SHUTDOWN                                                               = 1077
+	ER_GOT_SIGNAL                                                                    = 1078
+	ER_SHUTDOWN_COMPLETE                                                             = 1079
+	ER_FORCING_CLOSE                                                                 = 1080
+	ER_IPSOCK_ERROR                                                                  = 1081
+	ER_NO_SUCH_INDEX                                                                 = 1082
+	ER_WRONG_FIELD_TERMINATORS                                                       = 1083
+	ER_BLOBS_AND_NO_TERMINATED                                                       = 1084
+	ER_TEXTFILE_NOT_READABLE                                                         = 1085
+	ER_FILE_EXISTS_ERROR                                                             = 1086
+	ER_LOAD_INFO                                                                     = 1087
+	ER_ALTER_INFO                                                                    = 1088
+	ER_WRONG_SUB_KEY                                                                 = 1089
+	ER_CANT_REMOVE_ALL_FIELDS                                                        = 1090
+	ER_CANT_DROP_FIELD_OR_KEY                                                        = 1091
+	ER_INSERT_INFO                                                                   = 1092
+	ER_UPDATE_TABLE_USED                                                             = 1093
+	ER_NO_SUCH_THREAD                                                                = 1094
+	ER_KILL_DENIED_ERROR                                                             = 1095
+	ER_NO_TABLES_USED                                                                = 1096
+	ER_TOO_BIG_SET                                                                   = 1097
+	ER_NO_UNIQUE_LOGFILE                                                             = 1098
+	ER_TABLE_NOT_LOCKED_FOR_WRITE                                                    = 1099
+	ER_TABLE_NOT_LOCKED                                                              = 1100
+	ER_BLOB_CANT_HAVE_DEFAULT                                                        = 1101
+	ER_WRONG_DB_NAME                                                                 = 1102
+	ER_WRONG_TABLE_NAME                                                              = 1103
+	ER_TOO_BIG_SELECT                                                                = 1104
+	ER_UNKNOWN_ERROR                                                                 = 1105
+	ER_UNKNOWN_PROCEDURE                                                             = 1106
+	ER_WRONG_PARAMCOUNT_TO_PROCEDURE                                                 = 1107
+	ER_WRONG_PARAMETERS_TO_PROCEDURE                                                 = 1108
+	ER_UNKNOWN_TABLE                                                                 = 1109
+	ER_FIELD_SPECIFIED_TWICE                                                         = 1110
+	ER_INVALID_GROUP_FUNC_USE                                                        = 1111
+	ER_UNSUPPORTED_EXTENSION                                                         = 1112
+	ER_TABLE_MUST_HAVE_COLUMNS                                                       = 1113
+	ER_RECORD_FILE_FULL                                                              = 1114
+	ER_UNKNOWN_CHARACTER_SET                                                         = 1115
+	ER_TOO_MANY_TABLES                                                               = 1116
+	ER_TOO_MANY_FIELDS                                                               = 1117
+	ER_TOO_BIG_ROWSIZE                                                               = 1118
+	ER_STACK_OVERRUN                                                                 = 1119
+	ER_WRONG_OUTER_JOIN                                                              = 1120
+	ER_NULL_COLUMN_IN_INDEX                                                          = 1121
+	ER_CANT_FIND_UDF                                                                 = 1122
+	ER_CANT_INITIALIZE_UDF                                                           = 1123
+	ER_UDF_NO_PATHS                                                                  = 1124
+	ER_UDF_EXISTS                                                                    = 1125
+	ER_CANT_OPEN_LIBRARY                                                             = 1126
+	ER_CANT_FIND_DL_ENTRY                                                            = 1127
+	ER_FUNCTION_NOT_DEFINED                                                          = 1128
+	ER_HOST_IS_BLOCKED                                                               = 1129
+	ER_HOST_NOT_PRIVILEGED                                                           = 1130
+	ER_PASSWORD_ANONYMOUS_USER                                                       = 1131
+	ER_PASSWORD_NOT_ALLOWED                                                          = 1132
+	ER_PASSWORD_NO_MATCH                                                             = 1133
+	ER_UPDATE_INFO                                                                   = 1134
+	ER_CANT_CREATE_THREAD                                                            = 1135
+	ER_WRONG_VALUE_COUNT_ON_ROW                                                      = 1136
+	ER_CANT_REOPEN_TABLE                                                             = 1137
+	ER_INVALID_USE_OF_NULL                                                           = 1138
+	ER_REGEXP_ERROR                                                                  = 1139
+	ER_MIX_OF_GROUP_FUNC_AND_FIELDS                                                  = 1140
+	ER_NONEXISTING_GRANT                                                             = 1141
+	ER_TABLEACCESS_DENIED_ERROR                                                      = 1142
+	ER_COLUMNACCESS_DENIED_ERROR                                                     = 1143
+	ER_ILLEGAL_GRANT_FOR_TABLE                                                       = 1144
+	ER_GRANT_WRONG_HOST_OR_USER                                                      = 1145
+	ER_NO_SUCH_TABLE                                                                 = 1146
+	ER_NONEXISTING_TABLE_GRANT                                                       = 1147
+	ER_NOT_ALLOWED_COMMAND                                                           = 1148
+	ER_SYNTAX_ERROR                                                                  = 1149
+	ER_DELAYED_CANT_CHANGE_LOCK                                                      = 1150
+	ER_TOO_MANY_DELAYED_THREADS                                                      = 1151
+	ER_ABORTING_CONNECTION                                                           = 1152
+	ER_NET_PACKET_TOO_LARGE                                                          = 1153
+	ER_NET_READ_ERROR_FROM_PIPE                                                      = 1154
+	ER_NET_FCNTL_ERROR                                                               = 1155
+	ER_NET_PACKETS_OUT_OF_ORDER                                                      = 1156
+	ER_NET_UNCOMPRESS_ERROR                                                          = 1157
+	ER_NET_READ_ERROR                                                                = 1158
+	ER_NET_READ_INTERRUPTED                                                          = 1159
+	ER_NET_ERROR_ON_WRITE                                                            = 1160
+	ER_NET_WRITE_INTERRUPTED                                                         = 1161
+	ER_TOO_LONG_STRING                                                               = 1162
+	ER_TABLE_CANT_HANDLE_BLOB                                                        = 1163
+	ER_TABLE_CANT_HANDLE_AUTO_INCREMENT                                              = 1164
+	ER_DELAYED_INSERT_TABLE_LOCKED                                                   = 1165
+	ER_WRONG_COLUMN_NAME                                                             = 1166
+	ER_WRONG_KEY_COLUMN                                                              = 1167
+	ER_WRONG_MRG_TABLE                                                               = 1168
+	ER_DUP_UNIQUE                                                                    = 1169
+	ER_BLOB_KEY_WITHOUT_LENGTH                                                       = 1170
+	ER_PRIMARY_CANT_HAVE_NULL                                                        = 1171
+	ER_TOO_MANY_ROWS                                                                 = 1172
+	ER_REQUIRES_PRIMARY_KEY                                                          = 1173
+	ER_NO_RAID_COMPILED                                                              = 1174
+	ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE                                               = 1175
+	ER_KEY_DOES_NOT_EXITS                                                            = 1176
+	ER_CHECK_NO_SUCH_TABLE                                                           = 1177
+	ER_CHECK_NOT_IMPLEMENTED                                                         = 1178
+	ER_CANT_DO_THIS_DURING_AN_TRANSACTION                                            = 1179
+	ER_ERROR_DURING_COMMIT                                                           = 1180
+	ER_ERROR_DURING_ROLLBACK                                                         = 1181
+	ER_ERROR_DURING_FLUSH_LOGS                                                       = 1182
+	ER_ERROR_DURING_CHECKPOINT                                                       = 1183
+	ER_NEW_ABORTING_CONNECTION                                                       = 1184
+	ER_DUMP_NOT_IMPLEMENTED                                                          = 1185
+	ER_FLUSH_MASTER_BINLOG_CLOSED                                                    = 1186
+	ER_INDEX_REBUILD                                                                 = 1187
+	ER_MASTER                                                                        = 1188
+	ER_MASTER_NET_READ                                                               = 1189
+	ER_MASTER_NET_WRITE                                                              = 1190
+	ER_FT_MATCHING_KEY_NOT_FOUND                                                     = 1191
+	ER_LOCK_OR_ACTIVE_TRANSACTION                                                    = 1192
+	ER_UNKNOWN_SYSTEM_VARIABLE                                                       = 1193
+	ER_CRASHED_ON_USAGE                                                              = 1194
+	ER_CRASHED_ON_REPAIR                                                             = 1195
+	ER_WARNING_NOT_COMPLETE_ROLLBACK                                                 = 1196
+	ER_TRANS_CACHE_FULL                                                              = 1197
+	ER_SLAVE_MUST_STOP                                                               = 1198
+	ER_SLAVE_NOT_RUNNING                                                             = 1199
+	ER_BAD_SLAVE                                                                     = 1200
+	ER_MASTER_INFO                                                                   = 1201
+	ER_SLAVE_THREAD                                                                  = 1202
+	ER_TOO_MANY_USER_CONNECTIONS                                                     = 1203
+	ER_SET_CONSTANTS_ONLY                                                            = 1204
+	ER_LOCK_WAIT_TIMEOUT                                                             = 1205
+	ER_LOCK_TABLE_FULL                                                               = 1206
+	ER_READ_ONLY_TRANSACTION                                                         = 1207
+	ER_DROP_DB_WITH_READ_LOCK                                                        = 1208
+	ER_CREATE_DB_WITH_READ_LOCK                                                      = 1209
+	ER_WRONG_ARGUMENTS                                                               = 1210
+	ER_NO_PERMISSION_TO_CREATE_USER                                                  = 1211
+	ER_UNION_TABLES_IN_DIFFERENT_DIR                                                 = 1212
+	ER_LOCK_DEADLOCK                                                                 = 1213
+	ER_TABLE_CANT_HANDLE_FT                                                          = 1214
+	ER_CANNOT_ADD_FOREIGN                                                            = 1215
+	ER_NO_REFERENCED_ROW                                                             = 1216
+	ER_ROW_IS_REFERENCED                                                             = 1217
+	ER_CONNECT_TO_MASTER                                                             = 1218
+	ER_QUERY_ON_MASTER                                                               = 1219
+	ER_ERROR_WHEN_EXECUTING_COMMAND                                                  = 1220
+	ER_WRONG_USAGE                                                                   = 1221
+	ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT                                             = 1222
+	ER_CANT_UPDATE_WITH_READLOCK                                                     = 1223
+	ER_MIXING_NOT_ALLOWED                                                            = 1224
+	ER_DUP_ARGUMENT                                                                  = 1225
+	ER_USER_LIMIT_REACHED                                                            = 1226
+	ER_SPECIFIC_ACCESS_DENIED_ERROR                                                  = 1227
+	ER_LOCAL_VARIABLE                                                                = 1228
+	ER_GLOBAL_VARIABLE                                                               = 1229
+	ER_NO_DEFAULT                                                                    = 1230
+	ER_WRONG_VALUE_FOR_VAR                                                           = 1231
+	ER_WRONG_TYPE_FOR_VAR                                                            = 1232
+	ER_VAR_CANT_BE_READ                                                              = 1233
+	ER_CANT_USE_OPTION_HERE                                                          = 1234
+	ER_NOT_SUPPORTED_YET                                                             = 1235
+	ER_MASTER_FATAL_ERROR_READING_BINLOG                                             = 1236
+	ER_SLAVE_IGNORED_TABLE                                                           = 1237
+	ER_INCORRECT_GLOBAL_LOCAL_VAR                                                    = 1238
+	ER_WRONG_FK_DEF                                                                  = 1239
+	ER_KEY_REF_DO_NOT_MATCH_TABLE_REF                                                = 1240
+	ER_OPERAND_COLUMNS                                                               = 1241
+	ER_SUBQUERY_NO_1_ROW                                                             = 1242
+	ER_UNKNOWN_STMT_HANDLER                                                          = 1243
+	ER_CORRUPT_HELP_DB                                                               = 1244
+	ER_CYCLIC_REFERENCE                                                              = 1245
+	ER_AUTO_CONVERT                                                                  = 1246
+	ER_ILLEGAL_REFERENCE                                                             = 1247
+	ER_DERIVED_MUST_HAVE_ALIAS                                                       = 1248
+	ER_SELECT_REDUCED                                                                = 1249
+	ER_TABLENAME_NOT_ALLOWED_HERE                                                    = 1250
+	ER_NOT_SUPPORTED_AUTH_MODE                                                       = 1251
+	ER_SPATIAL_CANT_HAVE_NULL                                                        = 1252
+	ER_COLLATION_CHARSET_MISMATCH                                                    = 1253
+	ER_SLAVE_WAS_RUNNING                                                             = 1254
+	ER_SLAVE_WAS_NOT_RUNNING                                                         = 1255
+	ER_TOO_BIG_FOR_UNCOMPRESS                                                        = 1256
+	ER_ZLIB_Z_MEM_ERROR                                                              = 1257
+	ER_ZLIB_Z_BUF_ERROR                                                              = 1258
+	ER_ZLIB_Z_DATA_ERROR                                                             = 1259
+	ER_CUT_VALUE_GROUP_CONCAT                                                        = 1260
+	ER_WARN_TOO_FEW_RECORDS                                                          = 1261
+	ER_WARN_TOO_MANY_RECORDS                                                         = 1262
+	ER_WARN_NULL_TO_NOTNULL                                                          = 1263
+	ER_WARN_DATA_OUT_OF_RANGE                                                        = 1264
+	WARN_DATA_TRUNCATED                                                              = 1265
+	ER_WARN_USING_OTHER_HANDLER                                                      = 1266
+	ER_CANT_AGGREGATE_2COLLATIONS                                                    = 1267
+	ER_DROP_USER                                                                     = 1268
+	ER_REVOKE_GRANTS                                                                 = 1269
+	ER_CANT_AGGREGATE_3COLLATIONS                                                    = 1270
+	ER_CANT_AGGREGATE_NCOLLATIONS                                                    = 1271
+	ER_VARIABLE_IS_NOT_STRUCT                                                        = 1272
+	ER_UNKNOWN_COLLATION                                                             = 1273
+	ER_SLAVE_IGNORED_SSL_PARAMS                                                      = 1274
+	ER_SERVER_IS_IN_SECURE_AUTH_MODE                                                 = 1275
+	ER_WARN_FIELD_RESOLVED                                                           = 1276
+	ER_BAD_SLAVE_UNTIL_COND                                                          = 1277
+	ER_MISSING_SKIP_SLAVE                                                            = 1278
+	ER_UNTIL_COND_IGNORED                                                            = 1279
+	ER_WRONG_NAME_FOR_INDEX                                                          = 1280
+	ER_WRONG_NAME_FOR_CATALOG                                                        = 1281
+	ER_WARN_QC_RESIZE                                                                = 1282
+	ER_BAD_FT_COLUMN                                                                 = 1283
+	ER_UNKNOWN_KEY_CACHE                                                             = 1284
+	ER_WARN_HOSTNAME_WONT_WORK                                                       = 1285
+	ER_UNKNOWN_STORAGE_ENGINE                                                        = 1286
+	ER_WARN_DEPRECATED_SYNTAX                                                        = 1287
+	ER_NON_UPDATABLE_TABLE                                                           = 1288
+	ER_FEATURE_DISABLED                                                              = 1289
+	ER_OPTION_PREVENTS_STATEMENT                                                     = 1290
+	ER_DUPLICATED_VALUE_IN_TYPE                                                      = 1291
+	ER_TRUNCATED_WRONG_VALUE                                                         = 1292
+	ER_TOO_MUCH_AUTO_TIMESTAMP_COLS                                                  = 1293
+	ER_INVALID_ON_UPDATE                                                             = 1294
+	ER_UNSUPPORTED_PS                                                                = 1295
+	ER_GET_ERRMSG                                                                    = 1296
+	ER_GET_TEMPORARY_ERRMSG                                                          = 1297
+	ER_UNKNOWN_TIME_ZONE                                                             = 1298
+	ER_WARN_INVALID_TIMESTAMP                                                        = 1299
+	ER_INVALID_CHARACTER_STRING                                                      = 1300
+	ER_WARN_ALLOWED_PACKET_OVERFLOWED                                                = 1301
+	ER_CONFLICTING_DECLARATIONS                                                      = 1302
+	ER_SP_NO_RECURSIVE_CREATE                                                        = 1303
+	ER_SP_ALREADY_EXISTS                                                             = 1304
+	ER_SP_DOES_NOT_EXIST                                                             = 1305
+	ER_SP_DROP_FAILED                                                                = 1306
+	ER_SP_STORE_FAILED                                                               = 1307
+	ER_SP_LILABEL_MISMATCH                                                           = 1308
+	ER_SP_LABEL_REDEFINE                                                             = 1309
+	ER_SP_LABEL_MISMATCH                                                             = 1310
+	ER_SP_UNINIT_VAR                                                                 = 1311
+	ER_SP_BADSELECT                                                                  = 1312
+	ER_SP_BADRETURN                                                                  = 1313
+	ER_SP_BADSTATEMENT                                                               = 1314
+	ER_UPDATE_LOG_DEPRECATED_IGNORED                                                 = 1315
+	ER_UPDATE_LOG_DEPRECATED_TRANSLATED                                              = 1316
+	ER_QUERY_INTERRUPTED                                                             = 1317
+	ER_SP_WRONG_NO_OF_ARGS                                                           = 1318
+	ER_SP_COND_MISMATCH                                                              = 1319
+	ER_SP_NORETURN                                                                   = 1320
+	ER_SP_NORETURNEND                                                                = 1321
+	ER_SP_BAD_CURSOR_QUERY                                                           = 1322
+	ER_SP_BAD_CURSOR_SELECT                                                          = 1323
+	ER_SP_CURSOR_MISMATCH                                                            = 1324
+	ER_SP_CURSOR_ALREADY_OPEN                                                        = 1325
+	ER_SP_CURSOR_NOT_OPEN                                                            = 1326
+	ER_SP_UNDECLARED_VAR                                                             = 1327
+	ER_SP_WRONG_NO_OF_FETCH_ARGS                                                     = 1328
+	ER_SP_FETCH_NO_DATA                                                              = 1329
+	ER_SP_DUP_PARAM                                                                  = 1330
+	ER_SP_DUP_VAR                                                                    = 1331
+	ER_SP_DUP_COND                                                                   = 1332
+	ER_SP_DUP_CURS                                                                   = 1333
+	ER_SP_CANT_ALTER                                                                 = 1334
+	ER_SP_SUBSELECT_NYI                                                              = 1335
+	ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG                                                 = 1336
+	ER_SP_VARCOND_AFTER_CURSHNDLR                                                    = 1337
+	ER_SP_CURSOR_AFTER_HANDLER                                                       = 1338
+	ER_SP_CASE_NOT_FOUND                                                             = 1339
+	ER_FPARSER_TOO_BIG_FILE                                                          = 1340
+	ER_FPARSER_BAD_HEADER                                                            = 1341
+	ER_FPARSER_EOF_IN_COMMENT                                                        = 1342
+	ER_FPARSER_ERROR_IN_PARAMETER                                                    = 1343
+	ER_FPARSER_EOF_IN_UNKNOWN_PARAMETER                                              = 1344
+	ER_VIEW_NO_EXPLAIN                                                               = 1345
+	ER_FRM_UNKNOWN_TYPE                                                              = 1346
+	ER_WRONG_OBJECT                                                                  = 1347
+	ER_NONUPDATEABLE_COLUMN                                                          = 1348
+	ER_VIEW_SELECT_DERIVED                                                           = 1349
+	ER_VIEW_SELECT_CLAUSE                                                            = 1350
+	ER_VIEW_SELECT_VARIABLE                                                          = 1351
+	ER_VIEW_SELECT_TMPTABLE                                                          = 1352
+	ER_VIEW_WRONG_LIST                                                               = 1353
+	ER_WARN_VIEW_MERGE                                                               = 1354
+	ER_WARN_VIEW_WITHOUT_KEY                                                         = 1355
+	ER_VIEW_INVALID                                                                  = 1356
+	ER_SP_NO_DROP_SP                                                                 = 1357
+	ER_SP_GOTO_IN_HNDLR                                                              = 1358
+	ER_TRG_ALREADY_EXISTS                                                            = 1359
+	ER_TRG_DOES_NOT_EXIST                                                            = 1360
+	ER_TRG_ON_VIEW_OR_TEMP_TABLE                                                     = 1361
+	ER_TRG_CANT_CHANGE_ROW                                                           = 1362
+	ER_TRG_NO_SUCH_ROW_IN_TRG                                                        = 1363
+	ER_NO_DEFAULT_FOR_FIELD                                                          = 1364
+	ER_DIVISION_BY_ZERO                                                              = 1365
+	ER_TRUNCATED_WRONG_VALUE_FOR_FIELD                                               = 1366
+	ER_ILLEGAL_VALUE_FOR_TYPE                                                        = 1367
+	ER_VIEW_NONUPD_CHECK                                                             = 1368
+	ER_VIEW_CHECK_FAILED                                                             = 1369
+	ER_PROCACCESS_DENIED_ERROR                                                       = 1370
+	ER_RELAY_LOG_FAIL                                                                = 1371
+	ER_PASSWD_LENGTH                                                                 = 1372
+	ER_UNKNOWN_TARGET_BINLOG                                                         = 1373
+	ER_IO_ERR_LOG_INDEX_READ                                                         = 1374
+	ER_BINLOG_PURGE_PROHIBITED                                                       = 1375
+	ER_FSEEK_FAIL                                                                    = 1376
+	ER_BINLOG_PURGE_FATAL_ERR                                                        = 1377
+	ER_LOG_IN_USE                                                                    = 1378
+	ER_LOG_PURGE_UNKNOWN_ERR                                                         = 1379
+	ER_RELAY_LOG_INIT                                                                = 1380
+	ER_NO_BINARY_LOGGING                                                             = 1381
+	ER_RESERVED_SYNTAX                                                               = 1382
+	ER_WSAS_FAILED                                                                   = 1383
+	ER_DIFF_GROUPS_PROC                                                              = 1384
+	ER_NO_GROUP_FOR_PROC                                                             = 1385
+	ER_ORDER_WITH_PROC                                                               = 1386
+	ER_LOGGING_PROHIBIT_CHANGING_OF                                                  = 1387
+	ER_NO_FILE_MAPPING                                                               = 1388
+	ER_WRONG_MAGIC                                                                   = 1389
+	ER_PS_MANY_PARAM                                                                 = 1390
+	ER_KEY_PART_0                                                                    = 1391
+	ER_VIEW_CHECKSUM                                                                 = 1392
+	ER_VIEW_MULTIUPDATE                                                              = 1393
+	ER_VIEW_NO_INSERT_FIELD_LIST                                                     = 1394
+	ER_VIEW_DELETE_MERGE_VIEW                                                        = 1395
+	ER_CANNOT_USER                                                                   = 1396
+	ER_XAER_NOTA                                                                     = 1397
+	ER_XAER_INVAL                                                                    = 1398
+	ER_XAER_RMFAIL                                                                   = 1399
+	ER_XAER_OUTSIDE                                                                  = 1400
+	ER_XAER_RMERR                                                                    = 1401
+	ER_XA_RBROLLBACK                                                                 = 1402
+	ER_NONEXISTING_PROC_GRANT                                                        = 1403
+	ER_PROC_AUTO_GRANT_FAIL                                                          = 1404
+	ER_PROC_AUTO_REVOKE_FAIL                                                         = 1405
+	ER_DATA_TOO_LONG                                                                 = 1406
+	ER_SP_BAD_SQLSTATE                                                               = 1407
+	ER_STARTUP                                                                       = 1408
+	ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR                                              = 1409
+	ER_CANT_CREATE_USER_WITH_GRANT                                                   = 1410
+	ER_WRONG_VALUE_FOR_TYPE                                                          = 1411
+	ER_TABLE_DEF_CHANGED                                                             = 1412
+	ER_SP_DUP_HANDLER                                                                = 1413
+	ER_SP_NOT_VAR_ARG                                                                = 1414
+	ER_SP_NO_RETSET                                                                  = 1415
+	ER_CANT_CREATE_GEOMETRY_OBJECT                                                   = 1416
+	ER_FAILED_ROUTINE_BREAK_BINLOG                                                   = 1417
+	ER_BINLOG_UNSAFE_ROUTINE                                                         = 1418
+	ER_BINLOG_CREATE_ROUTINE_NEED_SUPER                                              = 1419
+	ER_EXEC_STMT_WITH_OPEN_CURSOR                                                    = 1420
+	ER_STMT_HAS_NO_OPEN_CURSOR                                                       = 1421
+	ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG                                               = 1422
+	ER_NO_DEFAULT_FOR_VIEW_FIELD                                                     = 1423
+	ER_SP_NO_RECURSION                                                               = 1424
+	ER_TOO_BIG_SCALE                                                                 = 1425
+	ER_TOO_BIG_PRECISION                                                             = 1426
+	ER_M_BIGGER_THAN_D                                                               = 1427
+	ER_WRONG_LOCK_OF_SYSTEM_TABLE                                                    = 1428
+	ER_CONNECT_TO_FOREIGN_DATA_SOURCE                                                = 1429
+	ER_QUERY_ON_FOREIGN_DATA_SOURCE                                                  = 1430
+	ER_FOREIGN_DATA_SOURCE_DOESNT_EXIST                                              = 1431
+	ER_FOREIGN_DATA_STRING_INVALID_CANT_CREATE                                       = 1432
+	ER_FOREIGN_DATA_STRING_INVALID                                                   = 1433
+	ER_CANT_CREATE_FEDERATED_TABLE                                                   = 1434
+	ER_TRG_IN_WRONG_SCHEMA                                                           = 1435
+	ER_STACK_OVERRUN_NEED_MORE                                                       = 1436
+	ER_TOO_LONG_BODY                                                                 = 1437
+	ER_WARN_CANT_DROP_DEFAULT_KEYCACHE                                               = 1438
+	ER_TOO_BIG_DISPLAYWIDTH                                                          = 1439
+	ER_XAER_DUPID                                                                    = 1440
+	ER_DATETIME_FUNCTION_OVERFLOW                                                    = 1441
+	ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG                                           = 1442
+	ER_VIEW_PREVENT_UPDATE                                                           = 1443
+	ER_PS_NO_RECURSION                                                               = 1444
+	ER_SP_CANT_SET_AUTOCOMMIT                                                        = 1445
+	ER_MALFORMED_DEFINER                                                             = 1446
+	ER_VIEW_FRM_NO_USER                                                              = 1447
+	ER_VIEW_OTHER_USER                                                               = 1448
+	ER_NO_SUCH_USER                                                                  = 1449
+	ER_FORBID_SCHEMA_CHANGE                                                          = 1450
+	ER_ROW_IS_REFERENCED_2                                                           = 1451
+	ER_NO_REFERENCED_ROW_2                                                           = 1452
+	ER_SP_BAD_VAR_SHADOW                                                             = 1453
+	ER_TRG_NO_DEFINER                                                                = 1454
+	ER_OLD_FILE_FORMAT                                                               = 1455
+	ER_SP_RECURSION_LIMIT                                                            = 1456
+	ER_SP_PROC_TABLE_CORRUPT                                                         = 1457
+	ER_SP_WRONG_NAME                                                                 = 1458
+	ER_TABLE_NEEDS_UPGRADE                                                           = 1459
+	ER_SP_NO_AGGREGATE                                                               = 1460
+	ER_MAX_PREPARED_STMT_COUNT_REACHED                                               = 1461
+	ER_VIEW_RECURSIVE                                                                = 1462
+	ER_NON_GROUPING_FIELD_USED                                                       = 1463
+	ER_TABLE_CANT_HANDLE_SPKEYS                                                      = 1464
+	ER_NO_TRIGGERS_ON_SYSTEM_SCHEMA                                                  = 1465
+	ER_REMOVED_SPACES                                                                = 1466
+	ER_AUTOINC_READ_FAILED                                                           = 1467
+	ER_USERNAME                                                                      = 1468
+	ER_HOSTNAME                                                                      = 1469
+	ER_WRONG_STRING_LENGTH                                                           = 1470
+	ER_NON_INSERTABLE_TABLE                                                          = 1471
+	ER_ADMIN_WRONG_MRG_TABLE                                                         = 1472
+	ER_TOO_HIGH_LEVEL_OF_NESTING_FOR_SELECT                                          = 1473
+	ER_NAME_BECOMES_EMPTY                                                            = 1474
+	ER_AMBIGUOUS_FIELD_TERM                                                          = 1475
+	ER_FOREIGN_SERVER_EXISTS                                                         = 1476
+	ER_FOREIGN_SERVER_DOESNT_EXIST                                                   = 1477
+	ER_ILLEGAL_HA_CREATE_OPTION                                                      = 1478
+	ER_PARTITION_REQUIRES_VALUES_ERROR                                               = 1479
+	ER_PARTITION_WRONG_VALUES_ERROR                                                  = 1480
+	ER_PARTITION_MAXVALUE_ERROR                                                      = 1481
+	ER_PARTITION_SUBPARTITION_ERROR                                                  = 1482
+	ER_PARTITION_SUBPART_MIX_ERROR                                                   = 1483
+	ER_PARTITION_WRONG_NO_PART_ERROR                                                 = 1484
+	ER_PARTITION_WRONG_NO_SUBPART_ERROR                                              = 1485
+	ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR                                            = 1486
+	ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR                                          = 1487
+	ER_FIELD_NOT_FOUND_PART_ERROR                                                    = 1488
+	ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR                                             = 1489
+	ER_INCONSISTENT_PARTITION_INFO_ERROR                                             = 1490
+	ER_PARTITION_FUNC_NOT_ALLOWED_ERROR                                              = 1491
+	ER_PARTITIONS_MUST_BE_DEFINED_ERROR                                              = 1492
+	ER_RANGE_NOT_INCREASING_ERROR                                                    = 1493
+	ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR                                          = 1494
+	ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR                                         = 1495
+	ER_PARTITION_ENTRY_ERROR                                                         = 1496
+	ER_MIX_HANDLER_ERROR                                                             = 1497
+	ER_PARTITION_NOT_DEFINED_ERROR                                                   = 1498
+	ER_TOO_MANY_PARTITIONS_ERROR                                                     = 1499
+	ER_SUBPARTITION_ERROR                                                            = 1500
+	ER_CANT_CREATE_HANDLER_FILE                                                      = 1501
+	ER_BLOB_FIELD_IN_PART_FUNC_ERROR                                                 = 1502
+	ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF                                              = 1503
+	ER_NO_PARTS_ERROR                                                                = 1504
+	ER_PARTITION_MGMT_ON_NONPARTITIONED                                              = 1505
+	ER_FOREIGN_KEY_ON_PARTITIONED                                                    = 1506
+	ER_DROP_PARTITION_NON_EXISTENT                                                   = 1507
+	ER_DROP_LAST_PARTITION                                                           = 1508
+	ER_COALESCE_ONLY_ON_HASH_PARTITION                                               = 1509
+	ER_REORG_HASH_ONLY_ON_SAME_NO                                                    = 1510
+	ER_REORG_NO_PARAM_ERROR                                                          = 1511
+	ER_ONLY_ON_RANGE_LIST_PARTITION                                                  = 1512
+	ER_ADD_PARTITION_SUBPART_ERROR                                                   = 1513
+	ER_ADD_PARTITION_NO_NEW_PARTITION                                                = 1514
+	ER_COALESCE_PARTITION_NO_PARTITION                                               = 1515
+	ER_REORG_PARTITION_NOT_EXIST                                                     = 1516
+	ER_SAME_NAME_PARTITION                                                           = 1517
+	ER_NO_BINLOG_ERROR                                                               = 1518
+	ER_CONSECUTIVE_REORG_PARTITIONS                                                  = 1519
+	ER_REORG_OUTSIDE_RANGE                                                           = 1520
+	ER_PARTITION_FUNCTION_FAILURE                                                    = 1521
+	ER_PART_STATE_ERROR                                                              = 1522
+	ER_LIMITED_PART_RANGE                                                            = 1523
+	ER_PLUGIN_IS_NOT_LOADED                                                          = 1524
+	ER_WRONG_VALUE                                                                   = 1525
+	ER_NO_PARTITION_FOR_GIVEN_VALUE                                                  = 1526
+	ER_FILEGROUP_OPTION_ONLY_ONCE                                                    = 1527
+	ER_CREATE_FILEGROUP_FAILED                                                       = 1528
+	ER_DROP_FILEGROUP_FAILED                                                         = 1529
+	ER_TABLESPACE_AUTO_EXTEND_ERROR                                                  = 1530
+	ER_WRONG_SIZE_NUMBER                                                             = 1531
+	ER_SIZE_OVERFLOW_ERROR                                                           = 1532
+	ER_ALTER_FILEGROUP_FAILED                                                        = 1533
+	ER_BINLOG_ROW_LOGGING_FAILED                                                     = 1534
+	ER_BINLOG_ROW_WRONG_TABLE_DEF                                                    = 1535
+	ER_BINLOG_ROW_RBR_TO_SBR                                                         = 1536
+	ER_EVENT_ALREADY_EXISTS                                                          = 1537
+	ER_EVENT_STORE_FAILED                                                            = 1538
+	ER_EVENT_DOES_NOT_EXIST                                                          = 1539
+	ER_EVENT_CANT_ALTER                                                              = 1540
+	ER_EVENT_DROP_FAILED                                                             = 1541
+	ER_EVENT_INTERVAL_NOT_POSITIVE_OR_TOO_BIG                                        = 1542
+	ER_EVENT_ENDS_BEFORE_STARTS                                                      = 1543
+	ER_EVENT_EXEC_TIME_IN_THE_PAST                                                   = 1544
+	ER_EVENT_OPEN_TABLE_FAILED                                                       = 1545
+	ER_EVENT_NEITHER_M_EXPR_NOR_M_AT                                                 = 1546
+	ER_OBSOLETE_COL_COUNT_DOESNT_MATCH_CORRUPTED                                     = 1547
+	ER_OBSOLETE_CANNOT_LOAD_FROM_TABLE                                               = 1548
+	ER_EVENT_CANNOT_DELETE                                                           = 1549
+	ER_EVENT_COMPILE_ERROR                                                           = 1550
+	ER_EVENT_SAME_NAME                                                               = 1551
+	ER_EVENT_DATA_TOO_LONG                                                           = 1552
+	ER_DROP_INDEX_FK                                                                 = 1553
+	ER_WARN_DEPRECATED_SYNTAX_WITH_VER                                               = 1554
+	ER_CANT_WRITE_LOCK_LOG_TABLE                                                     = 1555
+	ER_CANT_LOCK_LOG_TABLE                                                           = 1556
+	ER_FOREIGN_DUPLICATE_KEY_OLD_UNUSED                                              = 1557
+	ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE                                          = 1558
+	ER_TEMP_TABLE_PREVENTS_SWITCH_OUT_OF_RBR                                         = 1559
+	ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_FORMAT                                 = 1560
+	ER_NDB_CANT_SWITCH_BINLOG_FORMAT                                                 = 1561
+	ER_PARTITION_NO_TEMPORARY                                                        = 1562
+	ER_PARTITION_CONST_DOMAIN_ERROR                                                  = 1563
+	ER_PARTITION_FUNCTION_IS_NOT_ALLOWED                                             = 1564
+	ER_DDL_LOG_ERROR                                                                 = 1565
+	ER_NULL_IN_VALUES_LESS_THAN                                                      = 1566
+	ER_WRONG_PARTITION_NAME                                                          = 1567
+	ER_CANT_CHANGE_TX_CHARACTERISTICS                                                = 1568
+	ER_DUP_ENTRY_AUTOINCREMENT_CASE                                                  = 1569
+	ER_EVENT_MODIFY_QUEUE_ERROR                                                      = 1570
+	ER_EVENT_SET_VAR_ERROR                                                           = 1571
+	ER_PARTITION_MERGE_ERROR                                                         = 1572
+	ER_CANT_ACTIVATE_LOG                                                             = 1573
+	ER_RBR_NOT_AVAILABLE                                                             = 1574
+	ER_BASE64_DECODE_ERROR                                                           = 1575
+	ER_EVENT_RECURSION_FORBIDDEN                                                     = 1576
+	ER_EVENTS_DB_ERROR                                                               = 1577
+	ER_ONLY_INTEGERS_ALLOWED                                                         = 1578
+	ER_UNSUPORTED_LOG_ENGINE                                                         = 1579
+	ER_BAD_LOG_STATEMENT                                                             = 1580
+	ER_CANT_RENAME_LOG_TABLE                                                         = 1581
+	ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT                                                = 1582
+	ER_WRONG_PARAMETERS_TO_NATIVE_FCT                                                = 1583
+	ER_WRONG_PARAMETERS_TO_STORED_FCT                                                = 1584
+	ER_NATIVE_FCT_NAME_COLLISION                                                     = 1585
+	ER_DUP_ENTRY_WITH_KEY_NAME                                                       = 1586
+	ER_BINLOG_PURGE_EMFILE                                                           = 1587
+	ER_EVENT_CANNOT_CREATE_IN_THE_PAST                                               = 1588
+	ER_EVENT_CANNOT_ALTER_IN_THE_PAST                                                = 1589
+	ER_SLAVE_INCIDENT                                                                = 1590
+	ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT                                           = 1591
+	ER_BINLOG_UNSAFE_STATEMENT                                                       = 1592
+	ER_SLAVE_FATAL_ERROR                                                             = 1593
+	ER_SLAVE_RELAY_LOG_READ_FAILURE                                                  = 1594
+	ER_SLAVE_RELAY_LOG_WRITE_FAILURE                                                 = 1595
+	ER_SLAVE_CREATE_EVENT_FAILURE                                                    = 1596
+	ER_SLAVE_MASTER_COM_FAILURE                                                      = 1597
+	ER_BINLOG_LOGGING_IMPOSSIBLE                                                     = 1598
+	ER_VIEW_NO_CREATION_CTX                                                          = 1599
+	ER_VIEW_INVALID_CREATION_CTX                                                     = 1600
+	ER_SR_INVALID_CREATION_CTX                                                       = 1601
+	ER_TRG_CORRUPTED_FILE                                                            = 1602
+	ER_TRG_NO_CREATION_CTX                                                           = 1603
+	ER_TRG_INVALID_CREATION_CTX                                                      = 1604
+	ER_EVENT_INVALID_CREATION_CTX                                                    = 1605
+	ER_TRG_CANT_OPEN_TABLE                                                           = 1606
+	ER_CANT_CREATE_SROUTINE                                                          = 1607
+	ER_NEVER_USED                                                                    = 1608
+	ER_NO_FORMAT_DESCRIPTION_EVENT_BEFORE_BINLOG_STATEMENT                           = 1609
+	ER_SLAVE_CORRUPT_EVENT                                                           = 1610
+	ER_LOAD_DATA_INVALID_COLUMN_UNUSED                                               = 1611
+	ER_LOG_PURGE_NO_FILE                                                             = 1612
+	ER_XA_RBTIMEOUT                                                                  = 1613
+	ER_XA_RBDEADLOCK                                                                 = 1614
+	ER_NEED_REPREPARE                                                                = 1615
+	ER_DELAYED_NOT_SUPPORTED                                                         = 1616
+	WARN_NO_MASTER_INFO                                                              = 1617
+	WARN_OPTION_IGNORED                                                              = 1618
+	ER_PLUGIN_DELETE_BUILTIN                                                         = 1619
+	WARN_PLUGIN_BUSY                                                                 = 1620
+	ER_VARIABLE_IS_READONLY                                                          = 1621
+	ER_WARN_ENGINE_TRANSACTION_ROLLBACK                                              = 1622
+	ER_SLAVE_HEARTBEAT_FAILURE                                                       = 1623
+	ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE                                            = 1624
+	ER_NDB_REPLICATION_SCHEMA_ERROR                                                  = 1625
+	ER_CONFLICT_FN_PARSE_ERROR                                                       = 1626
+	ER_EXCEPTIONS_WRITE_ERROR                                                        = 1627
+	ER_TOO_LONG_TABLE_COMMENT                                                        = 1628
+	ER_TOO_LONG_FIELD_COMMENT                                                        = 1629
+	ER_FUNC_INEXISTENT_NAME_COLLISION                                                = 1630
+	ER_DATABASE_NAME                                                                 = 1631
+	ER_TABLE_NAME                                                                    = 1632
+	ER_PARTITION_NAME                                                                = 1633
+	ER_SUBPARTITION_NAME                                                             = 1634
+	ER_TEMPORARY_NAME                                                                = 1635
+	ER_RENAMED_NAME                                                                  = 1636
+	ER_TOO_MANY_CONCURRENT_TRXS                                                      = 1637
+	WARN_NON_ASCII_SEPARATOR_NOT_IMPLEMENTED                                         = 1638
+	ER_DEBUG_SYNC_TIMEOUT                                                            = 1639
+	ER_DEBUG_SYNC_HIT_LIMIT                                                          = 1640
+	ER_DUP_SIGNAL_SET                                                                = 1641
+	ER_SIGNAL_WARN                                                                   = 1642
+	ER_SIGNAL_NOT_FOUND                                                              = 1643
+	ER_SIGNAL_EXCEPTION                                                              = 1644
+	ER_RESIGNAL_WITHOUT_ACTIVE_HANDLER                                               = 1645
+	ER_SIGNAL_BAD_CONDITION_TYPE                                                     = 1646
+	WARN_COND_ITEM_TRUNCATED                                                         = 1647
+	ER_COND_ITEM_TOO_LONG                                                            = 1648
+	ER_UNKNOWN_LOCALE                                                                = 1649
+	ER_SLAVE_IGNORE_SERVER_IDS                                                       = 1650
+	ER_QUERY_CACHE_DISABLED                                                          = 1651
+	ER_SAME_NAME_PARTITION_FIELD                                                     = 1652
+	ER_PARTITION_COLUMN_LIST_ERROR                                                   = 1653
+	ER_WRONG_TYPE_COLUMN_VALUE_ERROR                                                 = 1654
+	ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR                                          = 1655
+	ER_MAXVALUE_IN_VALUES_IN                                                         = 1656
+	ER_TOO_MANY_VALUES_ERROR                                                         = 1657
+	ER_ROW_SINGLE_PARTITION_FIELD_ERROR                                              = 1658
+	ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD                                     = 1659
+	ER_PARTITION_FIELDS_TOO_LONG                                                     = 1660
+	ER_BINLOG_ROW_ENGINE_AND_STMT_ENGINE                                             = 1661
+	ER_BINLOG_ROW_MODE_AND_STMT_ENGINE                                               = 1662
+	ER_BINLOG_UNSAFE_AND_STMT_ENGINE                                                 = 1663
+	ER_BINLOG_ROW_INJECTION_AND_STMT_ENGINE                                          = 1664
+	ER_BINLOG_STMT_MODE_AND_ROW_ENGINE                                               = 1665
+	ER_BINLOG_ROW_INJECTION_AND_STMT_MODE                                            = 1666
+	ER_BINLOG_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE                               = 1667
+	ER_BINLOG_UNSAFE_LIMIT                                                           = 1668
+	ER_UNUSED4                                                                       = 1669
+	ER_BINLOG_UNSAFE_SYSTEM_TABLE                                                    = 1670
+	ER_BINLOG_UNSAFE_AUTOINC_COLUMNS                                                 = 1671
+	ER_BINLOG_UNSAFE_UDF                                                             = 1672
+	ER_BINLOG_UNSAFE_SYSTEM_VARIABLE                                                 = 1673
+	ER_BINLOG_UNSAFE_SYSTEM_FUNCTION                                                 = 1674
+	ER_BINLOG_UNSAFE_NONTRANS_AFTER_TRANS                                            = 1675
+	ER_MESSAGE_AND_STATEMENT                                                         = 1676
+	ER_SLAVE_CONVERSION_FAILED                                                       = 1677
+	ER_SLAVE_CANT_CREATE_CONVERSION                                                  = 1678
+	ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_FORMAT                              = 1679
+	ER_PATH_LENGTH                                                                   = 1680
+	ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT                                         = 1681
+	ER_WRONG_NATIVE_TABLE_STRUCTURE                                                  = 1682
+	ER_WRONG_PERFSCHEMA_USAGE                                                        = 1683
+	ER_WARN_I_S_SKIPPED_TABLE                                                        = 1684
+	ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_DIRECT                              = 1685
+	ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_DIRECT                                 = 1686
+	ER_SPATIAL_MUST_HAVE_GEOM_COL                                                    = 1687
+	ER_TOO_LONG_INDEX_COMMENT                                                        = 1688
+	ER_LOCK_ABORTED                                                                  = 1689
+	ER_DATA_OUT_OF_RANGE                                                             = 1690
+	ER_WRONG_SPVAR_TYPE_IN_LIMIT                                                     = 1691
+	ER_BINLOG_UNSAFE_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE                        = 1692
+	ER_BINLOG_UNSAFE_MIXED_STATEMENT                                                 = 1693
+	ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SQL_LOG_BIN                                = 1694
+	ER_STORED_FUNCTION_PREVENTS_SWITCH_SQL_LOG_BIN                                   = 1695
+	ER_FAILED_READ_FROM_PAR_FILE                                                     = 1696
+	ER_VALUES_IS_NOT_INT_TYPE_ERROR                                                  = 1697
+	ER_ACCESS_DENIED_NO_PASSWORD_ERROR                                               = 1698
+	ER_SET_PASSWORD_AUTH_PLUGIN                                                      = 1699
+	ER_GRANT_PLUGIN_USER_EXISTS                                                      = 1700
+	ER_TRUNCATE_ILLEGAL_FK                                                           = 1701
+	ER_PLUGIN_IS_PERMANENT                                                           = 1702
+	ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN                                        = 1703
+	ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX                                        = 1704
+	ER_STMT_CACHE_FULL                                                               = 1705
+	ER_MULTI_UPDATE_KEY_CONFLICT                                                     = 1706
+	ER_TABLE_NEEDS_REBUILD                                                           = 1707
+	WARN_OPTION_BELOW_LIMIT                                                          = 1708
+	ER_INDEX_COLUMN_TOO_LONG                                                         = 1709
+	ER_ERROR_IN_TRIGGER_BODY                                                         = 1710
+	ER_ERROR_IN_UNKNOWN_TRIGGER_BODY                                                 = 1711
+	ER_INDEX_CORRUPT                                                                 = 1712
+	ER_UNDO_RECORD_TOO_BIG                                                           = 1713
+	ER_BINLOG_UNSAFE_INSERT_IGNORE_SELECT                                            = 1714
+	ER_BINLOG_UNSAFE_INSERT_SELECT_UPDATE                                            = 1715
+	ER_BINLOG_UNSAFE_REPLACE_SELECT                                                  = 1716
+	ER_BINLOG_UNSAFE_CREATE_IGNORE_SELECT                                            = 1717
+	ER_BINLOG_UNSAFE_CREATE_REPLACE_SELECT                                           = 1718
+	ER_BINLOG_UNSAFE_UPDATE_IGNORE                                                   = 1719
+	ER_PLUGIN_NO_UNINSTALL                                                           = 1720
+	ER_PLUGIN_NO_INSTALL                                                             = 1721
+	ER_BINLOG_UNSAFE_WRITE_AUTOINC_SELECT                                            = 1722
+	ER_BINLOG_UNSAFE_CREATE_SELECT_AUTOINC                                           = 1723
+	ER_BINLOG_UNSAFE_INSERT_TWO_KEYS                                                 = 1724
+	ER_TABLE_IN_FK_CHECK                                                             = 1725
+	ER_UNSUPPORTED_ENGINE                                                            = 1726
+	ER_BINLOG_UNSAFE_AUTOINC_NOT_FIRST                                               = 1727
+	ER_CANNOT_LOAD_FROM_TABLE_V2                                                     = 1728
+	ER_MASTER_DELAY_VALUE_OUT_OF_RANGE                                               = 1729
+	ER_ONLY_FD_AND_RBR_EVENTS_ALLOWED_IN_BINLOG_STATEMENT                            = 1730
+	ER_PARTITION_EXCHANGE_DIFFERENT_OPTION                                           = 1731
+	ER_PARTITION_EXCHANGE_PART_TABLE                                                 = 1732
+	ER_PARTITION_EXCHANGE_TEMP_TABLE                                                 = 1733
+	ER_PARTITION_INSTEAD_OF_SUBPARTITION                                             = 1734
+	ER_UNKNOWN_PARTITION                                                             = 1735
+	ER_TABLES_DIFFERENT_METADATA                                                     = 1736
+	ER_ROW_DOES_NOT_MATCH_PARTITION                                                  = 1737
+	ER_BINLOG_CACHE_SIZE_GREATER_THAN_MAX                                            = 1738
+	ER_WARN_INDEX_NOT_APPLICABLE                                                     = 1739
+	ER_PARTITION_EXCHANGE_FOREIGN_KEY                                                = 1740
+	ER_NO_SUCH_KEY_VALUE                                                             = 1741
+	ER_RPL_INFO_DATA_TOO_LONG                                                        = 1742
+	ER_NETWORK_READ_EVENT_CHECKSUM_FAILURE                                           = 1743
+	ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE                                            = 1744
+	ER_BINLOG_STMT_CACHE_SIZE_GREATER_THAN_MAX                                       = 1745
+	ER_CANT_UPDATE_TABLE_IN_CREATE_TABLE_SELECT                                      = 1746
+	ER_PARTITION_CLAUSE_ON_NONPARTITIONED                                            = 1747
+	ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET                                        = 1748
+	ER_NO_SUCH_PARTITION__UNUSED                                                     = 1749
+	ER_CHANGE_RPL_INFO_REPOSITORY_FAILURE                                            = 1750
+	ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_CREATED_TEMP_TABLE                         = 1751
+	ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_DROPPED_TEMP_TABLE                         = 1752
+	ER_MTS_FEATURE_IS_NOT_SUPPORTED                                                  = 1753
+	ER_MTS_UPDATED_DBS_GREATER_MAX                                                   = 1754
+	ER_MTS_CANT_PARALLEL                                                             = 1755
+	ER_MTS_INCONSISTENT_DATA                                                         = 1756
+	ER_FULLTEXT_NOT_SUPPORTED_WITH_PARTITIONING                                      = 1757
+	ER_DA_INVALID_CONDITION_NUMBER                                                   = 1758
+	ER_INSECURE_PLAIN_TEXT                                                           = 1759
+	ER_INSECURE_CHANGE_MASTER                                                        = 1760
+	ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO                                         = 1761
+	ER_FOREIGN_DUPLICATE_KEY_WITHOUT_CHILD_INFO                                      = 1762
+	ER_SQLTHREAD_WITH_SECURE_SLAVE                                                   = 1763
+	ER_TABLE_HAS_NO_FT                                                               = 1764
+	ER_VARIABLE_NOT_SETTABLE_IN_SF_OR_TRIGGER                                        = 1765
+	ER_VARIABLE_NOT_SETTABLE_IN_TRANSACTION                                          = 1766
+	ER_GTID_NEXT_IS_NOT_IN_GTID_NEXT_LIST                                            = 1767
+	ER_CANT_CHANGE_GTID_NEXT_IN_TRANSACTION                                          = 1768
+	ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION                                          = 1769
+	ER_GTID_NEXT_CANT_BE_AUTOMATIC_IF_GTID_NEXT_LIST_IS_NON_NULL                     = 1770
+	ER_SKIPPING_LOGGED_TRANSACTION                                                   = 1771
+	ER_MALFORMED_GTID_SET_SPECIFICATION                                              = 1772
+	ER_MALFORMED_GTID_SET_ENCODING                                                   = 1773
+	ER_MALFORMED_GTID_SPECIFICATION                                                  = 1774
+	ER_GNO_EXHAUSTED                                                                 = 1775
+	ER_BAD_SLAVE_AUTO_POSITION                                                       = 1776
+	ER_AUTO_POSITION_REQUIRES_GTID_MODE_NOT_OFF                                      = 1777
+	ER_CANT_DO_IMPLICIT_COMMIT_IN_TRX_WHEN_GTID_NEXT_IS_SET                          = 1778
+	ER_GTID_MODE_ON_REQUIRES_ENFORCE_GTID_CONSISTENCY_ON                             = 1779
+	ER_GTID_MODE_REQUIRES_BINLOG                                                     = 1780
+	ER_CANT_SET_GTID_NEXT_TO_GTID_WHEN_GTID_MODE_IS_OFF                              = 1781
+	ER_CANT_SET_GTID_NEXT_TO_ANONYMOUS_WHEN_GTID_MODE_IS_ON                          = 1782
+	ER_CANT_SET_GTID_NEXT_LIST_TO_NON_NULL_WHEN_GTID_MODE_IS_OFF                     = 1783
+	ER_FOUND_GTID_EVENT_WHEN_GTID_MODE_IS_OFF__UNUSED                                = 1784
+	ER_GTID_UNSAFE_NON_TRANSACTIONAL_TABLE                                           = 1785
+	ER_GTID_UNSAFE_CREATE_SELECT                                                     = 1786
+	ER_GTID_UNSAFE_CREATE_DROP_TEMPORARY_TABLE_IN_TRANSACTION                        = 1787
+	ER_GTID_MODE_CAN_ONLY_CHANGE_ONE_STEP_AT_A_TIME                                  = 1788
+	ER_MASTER_HAS_PURGED_REQUIRED_GTIDS                                              = 1789
+	ER_CANT_SET_GTID_NEXT_WHEN_OWNING_GTID                                           = 1790
+	ER_UNKNOWN_EXPLAIN_FORMAT                                                        = 1791
+	ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION                                         = 1792
+	ER_TOO_LONG_TABLE_PARTITION_COMMENT                                              = 1793
+	ER_SLAVE_CONFIGURATION                                                           = 1794
+	ER_INNODB_FT_LIMIT                                                               = 1795
+	ER_INNODB_NO_FT_TEMP_TABLE                                                       = 1796
+	ER_INNODB_FT_WRONG_DOCID_COLUMN                                                  = 1797
+	ER_INNODB_FT_WRONG_DOCID_INDEX                                                   = 1798
+	ER_INNODB_ONLINE_LOG_TOO_BIG                                                     = 1799
+	ER_UNKNOWN_ALTER_ALGORITHM                                                       = 1800
+	ER_UNKNOWN_ALTER_LOCK                                                            = 1801
+	ER_MTS_CHANGE_MASTER_CANT_RUN_WITH_GAPS                                          = 1802
+	ER_MTS_RECOVERY_FAILURE                                                          = 1803
+	ER_MTS_RESET_WORKERS                                                             = 1804
+	ER_COL_COUNT_DOESNT_MATCH_CORRUPTED_V2                                           = 1805
+	ER_SLAVE_SILENT_RETRY_TRANSACTION                                                = 1806
+	ER_DISCARD_FK_CHECKS_RUNNING                                                     = 1807
+	ER_TABLE_SCHEMA_MISMATCH                                                         = 1808
+	ER_TABLE_IN_SYSTEM_TABLESPACE                                                    = 1809
+	ER_IO_READ_ERROR                                                                 = 1810
+	ER_IO_WRITE_ERROR                                                                = 1811
+	ER_TABLESPACE_MISSING                                                            = 1812
+	ER_TABLESPACE_EXISTS                                                             = 1813
+	ER_TABLESPACE_DISCARDED                                                          = 1814
+	ER_INTERNAL_ERROR                                                                = 1815
+	ER_INNODB_IMPORT_ERROR                                                           = 1816
+	ER_INNODB_INDEX_CORRUPT                                                          = 1817
+	ER_INVALID_YEAR_COLUMN_LENGTH                                                    = 1818
+	ER_NOT_VALID_PASSWORD                                                            = 1819
+	ER_MUST_CHANGE_PASSWORD                                                          = 1820
+	ER_FK_NO_INDEX_CHILD                                                             = 1821
+	ER_FK_NO_INDEX_PARENT                                                            = 1822
+	ER_FK_FAIL_ADD_SYSTEM                                                            = 1823
+	ER_FK_CANNOT_OPEN_PARENT                                                         = 1824
+	ER_FK_INCORRECT_OPTION                                                           = 1825
+	ER_FK_DUP_NAME                                                                   = 1826
+	ER_PASSWORD_FORMAT                                                               = 1827
+	ER_FK_COLUMN_CANNOT_DROP                                                         = 1828
+	ER_FK_COLUMN_CANNOT_DROP_CHILD                                                   = 1829
+	ER_FK_COLUMN_NOT_NULL                                                            = 1830
+	ER_DUP_INDEX                                                                     = 1831
+	ER_FK_COLUMN_CANNOT_CHANGE                                                       = 1832
+	ER_FK_COLUMN_CANNOT_CHANGE_CHILD                                                 = 1833
+	ER_UNUSED5                                                                       = 1834
+	ER_MALFORMED_PACKET                                                              = 1835
+	ER_READ_ONLY_MODE                                                                = 1836
+	ER_GTID_NEXT_TYPE_UNDEFINED_GROUP                                                = 1837
+	ER_VARIABLE_NOT_SETTABLE_IN_SP                                                   = 1838
+	ER_CANT_SET_GTID_PURGED_WHEN_GTID_MODE_IS_OFF                                    = 1839
+	ER_CANT_SET_GTID_PURGED_WHEN_GTID_EXECUTED_IS_NOT_EMPTY                          = 1840
+	ER_CANT_SET_GTID_PURGED_WHEN_OWNED_GTIDS_IS_NOT_EMPTY                            = 1841
+	ER_GTID_PURGED_WAS_CHANGED                                                       = 1842
+	ER_GTID_EXECUTED_WAS_CHANGED                                                     = 1843
+	ER_BINLOG_STMT_MODE_AND_NO_REPL_TABLES                                           = 1844
+	ER_ALTER_OPERATION_NOT_SUPPORTED                                                 = 1845
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON                                          = 1846
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COPY                                     = 1847
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_PARTITION                                = 1848
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_RENAME                                = 1849
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COLUMN_TYPE                              = 1850
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_CHECK                                 = 1851
+	ER_UNUSED6                                                                       = 1852
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOPK                                     = 1853
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_AUTOINC                                  = 1854
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_HIDDEN_FTS                               = 1855
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_CHANGE_FTS                               = 1856
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FTS                                      = 1857
+	ER_SQL_SLAVE_SKIP_COUNTER_NOT_SETTABLE_IN_GTID_MODE                              = 1858
+	ER_DUP_UNKNOWN_IN_INDEX                                                          = 1859
+	ER_IDENT_CAUSES_TOO_LONG_PATH                                                    = 1860
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOT_NULL                                 = 1861
+	ER_MUST_CHANGE_PASSWORD_LOGIN                                                    = 1862
+	ER_ROW_IN_WRONG_PARTITION                                                        = 1863
+	ER_MTS_EVENT_BIGGER_PENDING_JOBS_SIZE_MAX                                        = 1864
+	ER_INNODB_NO_FT_USES_PARSER                                                      = 1865
+	ER_BINLOG_LOGICAL_CORRUPTION                                                     = 1866
+	ER_WARN_PURGE_LOG_IN_USE                                                         = 1867
+	ER_WARN_PURGE_LOG_IS_ACTIVE                                                      = 1868
+	ER_AUTO_INCREMENT_CONFLICT                                                       = 1869
+	WARN_ON_BLOCKHOLE_IN_RBR                                                         = 1870
+	ER_SLAVE_MI_INIT_REPOSITORY                                                      = 1871
+	ER_SLAVE_RLI_INIT_REPOSITORY                                                     = 1872
+	ER_ACCESS_DENIED_CHANGE_USER_ERROR                                               = 1873
+	ER_INNODB_READ_ONLY                                                              = 1874
+	ER_STOP_SLAVE_SQL_THREAD_TIMEOUT                                                 = 1875
+	ER_STOP_SLAVE_IO_THREAD_TIMEOUT                                                  = 1876
+	ER_TABLE_CORRUPT                                                                 = 1877
+	ER_TEMP_FILE_WRITE_FAILURE                                                       = 1878
+	ER_INNODB_FT_AUX_NOT_HEX_ID                                                      = 1879
+	ER_OLD_TEMPORALS_UPGRADED                                                        = 1880
+	ER_INNODB_FORCED_RECOVERY                                                        = 1881
+	ER_AES_INVALID_IV                                                                = 1882
+	ER_PLUGIN_CANNOT_BE_UNINSTALLED                                                  = 1883
+	ER_GTID_UNSAFE_BINLOG_SPLITTABLE_STATEMENT_AND_GTID_GROUP                        = 1884
+	ER_SLAVE_HAS_MORE_GTIDS_THAN_MASTER                                              = 1885
+	ER_FILE_CORRUPT                                                                  = 3000
+	ER_ERROR_ON_MASTER                                                               = 3001
+	ER_INCONSISTENT_ERROR                                                            = 3002
+	ER_STORAGE_ENGINE_NOT_LOADED                                                     = 3003
+	ER_GET_STACKED_DA_WITHOUT_ACTIVE_HANDLER                                         = 3004
+	ER_WARN_LEGACY_SYNTAX_CONVERTED                                                  = 3005
+	ER_BINLOG_UNSAFE_FULLTEXT_PLUGIN                                                 = 3006
+	ER_CANNOT_DISCARD_TEMPORARY_TABLE                                                = 3007
+	ER_FK_DEPTH_EXCEEDED                                                             = 3008
+	ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE_V2                                       = 3009
+	ER_WARN_TRIGGER_DOESNT_HAVE_CREATED                                              = 3010
+	ER_REFERENCED_TRG_DOES_NOT_EXIST                                                 = 3011
+	ER_EXPLAIN_NOT_SUPPORTED                                                         = 3012
+	ER_INVALID_FIELD_SIZE                                                            = 3013
+	ER_MISSING_HA_CREATE_OPTION                                                      = 3014
+	ER_ENGINE_OUT_OF_MEMORY                                                          = 3015
+	ER_PASSWORD_EXPIRE_ANONYMOUS_USER                                                = 3016
+	ER_SLAVE_SQL_THREAD_MUST_STOP                                                    = 3017
+	ER_NO_FT_MATERIALIZED_SUBQUERY                                                   = 3018
+	ER_INNODB_UNDO_LOG_FULL                                                          = 3019
+	ER_INVALID_ARGUMENT_FOR_LOGARITHM                                                = 3020
+	ER_SLAVE_CHANNEL_IO_THREAD_MUST_STOP                                             = 3021
+	ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO                                            = 3022
+	ER_WARN_ONLY_MASTER_LOG_FILE_NO_POS                                              = 3023
+	ER_QUERY_TIMEOUT                                                                 = 3024
+	ER_NON_RO_SELECT_DISABLE_TIMER                                                   = 3025
+	ER_DUP_LIST_ENTRY                                                                = 3026
+	ER_SQL_MODE_NO_EFFECT                                                            = 3027
+	ER_AGGREGATE_ORDER_FOR_UNION                                                     = 3028
+	ER_AGGREGATE_ORDER_NON_AGG_QUERY                                                 = 3029
+	ER_SLAVE_WORKER_STOPPED_PREVIOUS_THD_ERROR                                       = 3030
+	ER_DONT_SUPPORT_SLAVE_PRESERVE_COMMIT_ORDER                                      = 3031
+	ER_SERVER_OFFLINE_MODE                                                           = 3032
+	ER_GIS_DIFFERENT_SRIDS                                                           = 3033
+	ER_GIS_UNSUPPORTED_ARGUMENT                                                      = 3034
+	ER_GIS_UNKNOWN_ERROR                                                             = 3035
+	ER_GIS_UNKNOWN_EXCEPTION                                                         = 3036
+	ER_GIS_INVALID_DATA                                                              = 3037
+	ER_BOOST_GEOMETRY_EMPTY_INPUT_EXCEPTION                                          = 3038
+	ER_BOOST_GEOMETRY_CENTROID_EXCEPTION                                             = 3039
+	ER_BOOST_GEOMETRY_OVERLAY_INVALID_INPUT_EXCEPTION                                = 3040
+	ER_BOOST_GEOMETRY_TURN_INFO_EXCEPTION                                            = 3041
+	ER_BOOST_GEOMETRY_SELF_INTERSECTION_POINT_EXCEPTION                              = 3042
+	ER_BOOST_GEOMETRY_UNKNOWN_EXCEPTION                                              = 3043
+	ER_STD_BAD_ALLOC_ERROR                                                           = 3044
+	ER_STD_DOMAIN_ERROR                                                              = 3045
+	ER_STD_LENGTH_ERROR                                                              = 3046
+	ER_STD_INVALID_ARGUMENT                                                          = 3047
+	ER_STD_OUT_OF_RANGE_ERROR                                                        = 3048
+	ER_STD_OVERFLOW_ERROR                                                            = 3049
+	ER_STD_RANGE_ERROR                                                               = 3050
+	ER_STD_UNDERFLOW_ERROR                                                           = 3051
+	ER_STD_LOGIC_ERROR                                                               = 3052
+	ER_STD_RUNTIME_ERROR                                                             = 3053
+	ER_STD_UNKNOWN_EXCEPTION                                                         = 3054
+	ER_GIS_DATA_WRONG_ENDIANESS                                                      = 3055
+	ER_CHANGE_MASTER_PASSWORD_LENGTH                                                 = 3056
+	ER_USER_LOCK_WRONG_NAME                                                          = 3057
+	ER_USER_LOCK_DEADLOCK                                                            = 3058
+	ER_REPLACE_INACCESSIBLE_ROWS                                                     = 3059
+	ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_GIS                                      = 3060
+	ER_ILLEGAL_USER_VAR                                                              = 3061
+	ER_GTID_MODE_OFF                                                                 = 3062
+	ER_UNSUPPORTED_BY_REPLICATION_THREAD                                             = 3063
+	ER_INCORRECT_TYPE                                                                = 3064
+	ER_FIELD_IN_ORDER_NOT_SELECT                                                     = 3065
+	ER_AGGREGATE_IN_ORDER_NOT_SELECT                                                 = 3066
+	ER_INVALID_RPL_WILD_TABLE_FILTER_PATTERN                                         = 3067
+	ER_NET_OK_PACKET_TOO_LARGE                                                       = 3068
+	ER_INVALID_JSON_DATA                                                             = 3069
+	ER_INVALID_GEOJSON_MISSING_MEMBER                                                = 3070
+	ER_INVALID_GEOJSON_WRONG_TYPE                                                    = 3071
+	ER_INVALID_GEOJSON_UNSPECIFIED                                                   = 3072
+	ER_DIMENSION_UNSUPPORTED                                                         = 3073
+	ER_SLAVE_CHANNEL_DOES_NOT_EXIST                                                  = 3074
+	ER_SLAVE_MULTIPLE_CHANNELS_HOST_PORT                                             = 3075
+	ER_SLAVE_CHANNEL_NAME_INVALID_OR_TOO_LONG                                        = 3076
+	ER_SLAVE_NEW_CHANNEL_WRONG_REPOSITORY                                            = 3077
+	ER_SLAVE_CHANNEL_DELETE                                                          = 3078
+	ER_SLAVE_MULTIPLE_CHANNELS_CMD                                                   = 3079
+	ER_SLAVE_MAX_CHANNELS_EXCEEDED                                                   = 3080
+	ER_SLAVE_CHANNEL_MUST_STOP                                                       = 3081
+	ER_SLAVE_CHANNEL_NOT_RUNNING                                                     = 3082
+	ER_SLAVE_CHANNEL_WAS_RUNNING                                                     = 3083
+	ER_SLAVE_CHANNEL_WAS_NOT_RUNNING                                                 = 3084
+	ER_SLAVE_CHANNEL_SQL_THREAD_MUST_STOP                                            = 3085
+	ER_SLAVE_CHANNEL_SQL_SKIP_COUNTER                                                = 3086
+	ER_WRONG_FIELD_WITH_GROUP_V2                                                     = 3087
+	ER_MIX_OF_GROUP_FUNC_AND_FIELDS_V2                                               = 3088
+	ER_WARN_DEPRECATED_SYSVAR_UPDATE                                                 = 3089
+	ER_WARN_DEPRECATED_SQLMODE                                                       = 3090
+	ER_CANNOT_LOG_PARTIAL_DROP_DATABASE_WITH_GTID                                    = 3091
+	ER_GROUP_REPLICATION_CONFIGURATION                                               = 3092
+	ER_GROUP_REPLICATION_RUNNING                                                     = 3093
+	ER_GROUP_REPLICATION_APPLIER_INIT_ERROR                                          = 3094
+	ER_GROUP_REPLICATION_STOP_APPLIER_THREAD_TIMEOUT                                 = 3095
+	ER_GROUP_REPLICATION_COMMUNICATION_LAYER_SESSION_ERROR                           = 3096
+	ER_GROUP_REPLICATION_COMMUNICATION_LAYER_JOIN_ERROR                              = 3097
+	ER_BEFORE_DML_VALIDATION_ERROR                                                   = 3098
+	ER_PREVENTS_VARIABLE_WITHOUT_RBR                                                 = 3099
+	ER_RUN_HOOK_ERROR                                                                = 3100
+	ER_TRANSACTION_ROLLBACK_DURING_COMMIT                                            = 3101
+	ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED                                      = 3102
+	ER_UNSUPPORTED_ALTER_INPLACE_ON_VIRTUAL_COLUMN                                   = 3103
+	ER_WRONG_FK_OPTION_FOR_GENERATED_COLUMN                                          = 3104
+	ER_NON_DEFAULT_VALUE_FOR_GENERATED_COLUMN                                        = 3105
+	ER_UNSUPPORTED_ACTION_ON_GENERATED_COLUMN                                        = 3106
+	ER_GENERATED_COLUMN_NON_PRIOR                                                    = 3107
+	ER_DEPENDENT_BY_GENERATED_COLUMN                                                 = 3108
+	ER_GENERATED_COLUMN_REF_AUTO_INC                                                 = 3109
+	ER_FEATURE_NOT_AVAILABLE                                                         = 3110
+	ER_CANT_SET_GTID_MODE                                                            = 3111
+	ER_CANT_USE_AUTO_POSITION_WITH_GTID_MODE_OFF                                     = 3112
+	ER_CANT_REPLICATE_ANONYMOUS_WITH_AUTO_POSITION                                   = 3113
+	ER_CANT_REPLICATE_ANONYMOUS_WITH_GTID_MODE_ON                                    = 3114
+	ER_CANT_REPLICATE_GTID_WITH_GTID_MODE_OFF                                        = 3115
+	ER_CANT_SET_ENFORCE_GTID_CONSISTENCY_ON_WITH_ONGOING_GTID_VIOLATING_TRANSACTIONS = 3116
+	ER_SET_ENFORCE_GTID_CONSISTENCY_WARN_WITH_ONGOING_GTID_VIOLATING_TRANSACTIONS    = 3117
+	ER_ACCOUNT_HAS_BEEN_LOCKED                                                       = 3118
+	ER_WRONG_TABLESPACE_NAME                                                         = 3119
+	ER_TABLESPACE_IS_NOT_EMPTY                                                       = 3120
+	ER_WRONG_FILE_NAME                                                               = 3121
+	ER_BOOST_GEOMETRY_INCONSISTENT_TURNS_EXCEPTION                                   = 3122
+	ER_WARN_OPTIMIZER_HINT_SYNTAX_ERROR                                              = 3123
+	ER_WARN_BAD_MAX_EXECUTION_TIME                                                   = 3124
+	ER_WARN_UNSUPPORTED_MAX_EXECUTION_TIME                                           = 3125
+	ER_WARN_CONFLICTING_HINT                                                         = 3126
+	ER_WARN_UNKNOWN_QB_NAME                                                          = 3127
+	ER_UNRESOLVED_HINT_NAME                                                          = 3128
+	ER_WARN_ON_MODIFYING_GTID_EXECUTED_TABLE                                         = 3129
+	ER_PLUGGABLE_PROTOCOL_COMMAND_NOT_SUPPORTED                                      = 3130
+	ER_LOCKING_SERVICE_WRONG_NAME                                                    = 3131
+	ER_LOCKING_SERVICE_DEADLOCK                                                      = 3132
+	ER_LOCKING_SERVICE_TIMEOUT                                                       = 3133
+	ER_GIS_MAX_POINTS_IN_GEOMETRY_OVERFLOWED                                         = 3134
+	ER_SQL_MODE_MERGED                                                               = 3135
+	ER_VTOKEN_PLUGIN_TOKEN_MISMATCH                                                  = 3136
+	ER_VTOKEN_PLUGIN_TOKEN_NOT_FOUND                                                 = 3137
+	ER_CANT_SET_VARIABLE_WHEN_OWNING_GTID                                            = 3138
+	ER_SLAVE_CHANNEL_OPERATION_NOT_ALLOWED                                           = 3139
+	ER_INVALID_JSON_TEXT                                                             = 3140
+	ER_INVALID_JSON_TEXT_IN_PARAM                                                    = 3141
+	ER_INVALID_JSON_BINARY_DATA                                                      = 3142
+	ER_INVALID_JSON_PATH                                                             = 3143
+	ER_INVALID_JSON_CHARSET                                                          = 3144
+	ER_INVALID_JSON_CHARSET_IN_FUNCTION                                              = 3145
+	ER_INVALID_TYPE_FOR_JSON                                                         = 3146
+	ER_INVALID_CAST_TO_JSON                                                          = 3147
+	ER_INVALID_JSON_PATH_CHARSET                                                     = 3148
+	ER_INVALID_JSON_PATH_WILDCARD                                                    = 3149
+	ER_JSON_VALUE_TOO_BIG                                                            = 3150
+	ER_JSON_KEY_TOO_BIG                                                              = 3151
+	ER_JSON_USED_AS_KEY                                                              = 3152
+	ER_JSON_VACUOUS_PATH                                                             = 3153
+	ER_JSON_BAD_ONE_OR_ALL_ARG                                                       = 3154
+	ER_NUMERIC_JSON_VALUE_OUT_OF_RANGE                                               = 3155
+	ER_INVALID_JSON_VALUE_FOR_CAST                                                   = 3156
+	ER_JSON_DOCUMENT_TOO_DEEP                                                        = 3157
+	ER_JSON_DOCUMENT_NULL_KEY                                                        = 3158
+	ER_SECURE_TRANSPORT_REQUIRED                                                     = 3159
+	ER_NO_SECURE_TRANSPORTS_CONFIGURED                                               = 3160
+	ER_DISABLED_STORAGE_ENGINE                                                       = 3161
+	ER_USER_DOES_NOT_EXIST                                                           = 3162
+	ER_USER_ALREADY_EXISTS                                                           = 3163
+	ER_AUDIT_API_ABORT                                                               = 3164
+	ER_INVALID_JSON_PATH_ARRAY_CELL                                                  = 3165
+	ER_BUFPOOL_RESIZE_INPROGRESS                                                     = 3166
+	ER_FEATURE_DISABLED_SEE_DOC                                                      = 3167
+	ER_SERVER_ISNT_AVAILABLE                                                         = 3168
+	ER_SESSION_WAS_KILLED                                                            = 3169
+	ER_CAPACITY_EXCEEDED                                                             = 3170
+	ER_CAPACITY_EXCEEDED_IN_RANGE_OPTIMIZER                                          = 3171
+	ER_TABLE_NEEDS_UPG_PART                                                          = 3172
+	ER_CANT_WAIT_FOR_EXECUTED_GTID_SET_WHILE_OWNING_A_GTID                           = 3173
+	ER_CANNOT_ADD_FOREIGN_BASE_COL_VIRTUAL                                           = 3174
+	ER_CANNOT_CREATE_VIRTUAL_INDEX_CONSTRAINT                                        = 3175
+	ER_ERROR_ON_MODIFYING_GTID_EXECUTED_TABLE                                        = 3176
+	ER_LOCK_REFUSED_BY_ENGINE                                                        = 3177
+	ER_UNSUPPORTED_ALTER_ONLINE_ON_VIRTUAL_COLUMN                                    = 3178
+	ER_MASTER_KEY_ROTATION_NOT_SUPPORTED_BY_SE                                       = 3179
+	ER_MASTER_KEY_ROTATION_ERROR_BY_SE                                               = 3180
+	ER_MASTER_KEY_ROTATION_BINLOG_FAILED                                             = 3181
+	ER_MASTER_KEY_ROTATION_SE_UNAVAILABLE                                            = 3182
+	ER_TABLESPACE_CANNOT_ENCRYPT                                                     = 3183
+	ER_INVALID_ENCRYPTION_OPTION                                                     = 3184
+	ER_CANNOT_FIND_KEY_IN_KEYRING                                                    = 3185
+	ER_CAPACITY_EXCEEDED_IN_PARSER                                                   = 3186
+	ER_UNSUPPORTED_ALTER_ENCRYPTION_INPLACE                                          = 3187
+	ER_KEYRING_UDF_KEYRING_SERVICE_ERROR                                             = 3188
+	ER_USER_COLUMN_OLD_LENGTH                                                        = 3189
+)
